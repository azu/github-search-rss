{
    "version": "https://jsonfeed.org/version/1",
    "title": "org:wintercg Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/wintercg.json",
    "feed_url": "https://azu.github.io/github-search-rss/wintercg.json",
    "description": "org:wintercg Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/4174848?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The rudiments of a synchronous function to return the name of the runtime the script is running in <a href=\"https://gist.github.com/guest271314/13ae833d27395f3db7d3b683b02cc611\">https://gist.github.com/guest271314/13ae833d27395f3db7d3b683b02cc611</a></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"const runtime = () =&gt; {\n  // TODO: More direct and exclusionary way to do this for QuickJS\n  if (\n    !globalThis.hasOwnProperty(&quot;hasOwn&quot;) &amp;&amp;\n    Array.isArray(globalThis.scriptArgs)\n  ) {\n    return &quot;qjs&quot;;\n  }\n  if (Object.hasOwn(globalThis, &quot;tjs&quot;)) {\n    return globalThis.tjs.args[0];\n  }\n  if (Object.hasOwn(globalThis, &quot;process&quot;)) {\n    if (globalThis.process.argv0 === &quot;node&quot;) {\n      return globalThis.process.argv0;\n    }\n    if (\n      globalThis.process.argv0 === &quot;bun&quot; \n      &amp;&amp; globalThis.process.isBun) {\n      return globalThis.process.argv0;\n    }\n  }\n  if (Object.hasOwn(globalThis, &quot;Deno&quot;)) {\n    return Object.keys(globalThis.Deno.version).shift();\n  }\n};\n\nconsole.log(runtime());\"><pre class=\"notranslate\"><code class=\"notranslate\">const runtime = () =&gt; {\n  // TODO: More direct and exclusionary way to do this for QuickJS\n  if (\n    !globalThis.hasOwnProperty(\"hasOwn\") &amp;&amp;\n    Array.isArray(globalThis.scriptArgs)\n  ) {\n    return \"qjs\";\n  }\n  if (Object.hasOwn(globalThis, \"tjs\")) {\n    return globalThis.tjs.args[0];\n  }\n  if (Object.hasOwn(globalThis, \"process\")) {\n    if (globalThis.process.argv0 === \"node\") {\n      return globalThis.process.argv0;\n    }\n    if (\n      globalThis.process.argv0 === \"bun\" \n      &amp;&amp; globalThis.process.isBun) {\n      return globalThis.process.argv0;\n    }\n  }\n  if (Object.hasOwn(globalThis, \"Deno\")) {\n    return Object.keys(globalThis.Deno.version).shift();\n  }\n};\n\nconsole.log(runtime());\n</code></pre></div>",
            "url": "https://github.com/wintercg/proposal-common-minimum-api/issues/62",
            "title": "There's no common, global runtime identifier. How do you know which runtime your script is running in? ",
            "date_modified": "2023-12-10T14:36:24.000Z",
            "date_published": "2023-12-10T14:36:24.000Z",
            "author": {
                "name": "guest271314",
                "url": "https://github.com/guest271314"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2352663?u=6d0db159fb863f7648118acf92b7960701228bf9&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Hey, I'm sorry if this has already been discussed. I'm just wondering why an entirely new API is being designed when there is at least one existing proposal: <a href=\"https://wicg.github.io/direct-sockets/\" rel=\"nofollow\">https://wicg.github.io/direct-sockets/</a><br>\nHas it been considered to work with Google on that?</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/27",
            "title": "Why not follow existing proposals for Sockets API",
            "date_modified": "2023-11-29T13:45:20.000Z",
            "date_published": "2023-11-29T13:45:20.000Z",
            "author": {
                "name": "targos",
                "url": "https://github.com/targos"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/205482?u=de3265fd6a286e3e51965136cbe7a04bb9ec051a&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I've been working on building up diagnostics_channel and TracingChannel as a high-performance data source for tracing products to consume safely rather than relying on risky monkey patching. I would like to extend that effort to defining consistent events for serverless function providers to publish around the lifecycle of a request to form a trace boundary.</p>\n<p dir=\"auto\">For the tracing use case a clear <code class=\"notranslate\">start</code> and <code class=\"notranslate\">end</code> event will be needed to scope the activity of that request. Additionally some error tracking event would be valuable. This could be a single event or it may be worth splitting out certain commit failure cases such as timeouts.</p>\n<p dir=\"auto\">Is this something others feel makes sense as a part of this functions API initiative, or should standardization of this debugging information be considered separately? What are others thoughts on what this should look like?</p>",
            "url": "https://github.com/wintercg/proposal-functions-api/issues/4",
            "title": "Consistent use of diagnostics_channel events to demarcate the boundaries of a request",
            "date_modified": "2023-11-15T18:29:03.000Z",
            "date_published": "2023-11-15T18:29:03.000Z",
            "author": {
                "name": "Qard",
                "url": "https://github.com/Qard"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/11367844?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is sort of similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1549639044\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/fetch/issues/9\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/fetch/issues/9/hovercard\" href=\"https://github.com/wintercg/fetch/issues/9\">#9</a> but I think it has some interesting semantics that might be worth looking into seperately.</p>\n<p dir=\"auto\">The current spec is very clear that <code class=\"notranslate\">Response.redirect</code> MUST be resolved against the current url. This is rather unfortunate by itself since server runtimes don't really have a concept of \"current url\". Outside of that, redirects (especially when paired with status code <code class=\"notranslate\">307</code>) are incredibly common for stuff like OAuth flows.</p>\n<p dir=\"auto\">Currently, doing:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"return Response.redirect(&quot;/home&quot;, 307);\"><pre class=\"notranslate\"><span class=\"pl-k\">return</span> <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">redirect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"/home\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">307</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">just errors in Node and Deno (without the <code class=\"notranslate\">--location</code> flag). The correct way to do this currently is</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"return new Response(null, {\n    status: 307,\n    headers: {\n        &quot;Location&quot;: &quot;/home&quot;\n    }\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Response</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">status</span>: <span class=\"pl-c1\">307</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">headers</span>: <span class=\"pl-kos\">{</span>\n        <span class=\"pl-s\">\"Location\"</span>: <span class=\"pl-s\">\"/home\"</span>\n    <span class=\"pl-kos\">}</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">which I think is suboptimal. Perhaps this issue should be raised upstream, because this could actually work in a web-standard <code class=\"notranslate\">Response.redirect</code>. Ideally, <code class=\"notranslate\">Response.redirect</code> would just use a relative location for status codes that support it. I'm hoping to champion this change in WinterCG and eventually land it upstream later.</p>",
            "url": "https://github.com/wintercg/fetch/issues/22",
            "title": "`Response.redirect` with relative URLs",
            "date_modified": "2023-11-14T23:51:38.000Z",
            "date_published": "2023-11-14T23:24:47.000Z",
            "author": {
                "name": "lino-levan",
                "url": "https://github.com/lino-levan"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/8500303?u=50e30202b089c2c9bd355d8f86eae6ebcda67ffd&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">There are lots of APIs defined on the <a href=\"https://html.spec.whatwg.org/multipage/system-state.html#the-navigator-object\" rel=\"nofollow\">Navigator</a> object. For now, the common minimum API merely defines <code class=\"notranslate\">navigator.userAgent</code> as part of the common APIs that WinterCG runtimes are interested in implementing.</p>\n<p dir=\"auto\">However, it is being proposed to add more properties to <code class=\"notranslate\">Navigator</code> in Node.js for usefulness (e.g. <code class=\"notranslate\">Navigator.hardwareConcurrency</code>) and legacy compatibility (e.g. constant <code class=\"notranslate\">Navigator.appVersion</code> version)</p>\n<p dir=\"auto\">Current implementation status:</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>API/Attribute Name</th>\n<th>Node.js</th>\n<th>Deno</th>\n<th>Cloudflare Worker</th>\n<th>Bun</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"notranslate\">Navigator.userAgent</code></td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"https://html.spec.whatwg.org/multipage/workers.html#navigatorconcurrenthardware\" rel=\"nofollow\"><code class=\"notranslate\">Navigator.hardwareConcurrency</code></a></td>\n<td>✅</td>\n<td>✅</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">Navigator.platform</code></td>\n<td>✅ <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1961212286\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/50385\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nodejs/node/pull/50385/hovercard\" href=\"https://github.com/nodejs/node/pull/50385\">nodejs/node#50385</a></td>\n<td>❌</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td><a href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigatorlanguage\" rel=\"nofollow\"><code class=\"notranslate\">Navigator.language</code></a></td>\n<td><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1953474268\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/50303\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nodejs/node/pull/50303/hovercard\" href=\"https://github.com/nodejs/node/pull/50303\">nodejs/node#50303</a></td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><a href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigatorlanguage\" rel=\"nofollow\"><code class=\"notranslate\">Navigator.languages</code></a></td>\n<td><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1953474268\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/50303\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nodejs/node/pull/50303/hovercard\" href=\"https://github.com/nodejs/node/pull/50303\">nodejs/node#50303</a></td>\n<td>✅</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><a href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigatoronline\" rel=\"nofollow\"><code class=\"notranslate\">Navigator.onLine</code></a></td>\n<td><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1948426246\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/50224\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nodejs/node/pull/50224/hovercard\" href=\"https://github.com/nodejs/node/pull/50224\">nodejs/node#50224</a></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td><a href=\"https://html.spec.whatwg.org/multipage/system-state.html#navigatorid\" rel=\"nofollow\">NavigatorID</a> mixin (excluding <code class=\"notranslate\">Navigator.userAgent</code> and <code class=\"notranslate\">Navigator.platform</code>)</td>\n<td><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1973356532\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/50521\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/nodejs/node/pull/50521/hovercard\" href=\"https://github.com/nodejs/node/pull/50521\">nodejs/node#50521</a></td>\n<td>❌</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n</tbody>\n</table>\n<p dir=\"auto\">I believe the common APIs of <code class=\"notranslate\">Navigator</code> should be extended to include attributes that were shipped in more than two runtimes. Also, if there are strong push-backs on adding the above APIs to the common minimum API, we should be wary of shipping them to reduce the gaps between the runtimes.</p>",
            "url": "https://github.com/wintercg/proposal-common-minimum-api/issues/61",
            "title": "Navigator APIs",
            "date_modified": "2023-12-08T05:20:33.000Z",
            "date_published": "2023-11-03T02:26:46.000Z",
            "author": {
                "name": "legendecas",
                "url": "https://github.com/legendecas"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/895923?u=ee2417210461abea5b06cf6aea5492220ecdadf7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Was trying to follow the steps in the <em>README</em> to run the site locally, and experienced this issue</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"➜  www git:(main) deno run -A --no-check main.jsx\nerror: The source code is invalid, as it does not match the expected hash in the lock file.\n  Specifier: https://esm.sh/*@twind/typography@0.0.2\n  Lock file: /Users/owenbuckley/Workspace/github/wintercg/www/deno.lock\"><pre class=\"notranslate\">➜  www git:(main) deno run -A --no-check main.jsx\nerror: The <span class=\"pl-c1\">source</span> code is invalid, as it does not match the expected <span class=\"pl-c1\">hash</span> <span class=\"pl-k\">in</span> the lock file.\n  Specifier: https://esm.sh/<span class=\"pl-k\">*</span>@twind/typography@0.0.2\n  Lock file: /Users/owenbuckley/Workspace/github/wintercg/www/deno.lock</pre></div>\n<p dir=\"auto\">Can confirm that <strong>deno</strong> is installed locally</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"➜  www git:(main) deno --version\ndeno 1.38.0 (release, aarch64-apple-darwin)\nv8 12.0.267.1\ntypescript 5.2.2\"><pre class=\"notranslate\">➜  www git:(main) deno --version\ndeno 1.38.0 (release, aarch64-apple-darwin)\nv8 12.0.267.1\ntypescript 5.2.2</pre></div>\n<p dir=\"auto\">Any thoughts?  I'm new to deno, so not sure if it is just user error or something else 😅</p>",
            "url": "https://github.com/wintercg/www/issues/37",
            "title": "not able to run the website locally",
            "date_modified": "2023-11-02T16:09:02.000Z",
            "date_published": "2023-11-02T15:29:43.000Z",
            "author": {
                "name": "thescientist13",
                "url": "https://github.com/thescientist13"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/188257?u=5972424c4a683223929b7b3d783d34948b640399&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Headers.entries is implemented in some WinterCG runtimes (Deno Deploy &amp; Cloudflare Workers) but is not in the spec.<br>\nHere's the example:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"self.addEventListener('fetch', event =&gt; {\n  let headers = event.request.headers;\n  event.respondWith(new Response(`typeof headers.entries == &quot;${typeof headers.entries}&quot;`));\n})\"><pre class=\"notranslate\"><span class=\"pl-s1\">self</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addEventListener</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'fetch'</span><span class=\"pl-kos\">,</span> <span class=\"pl-s1\">event</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-k\">let</span> <span class=\"pl-s1\">headers</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">event</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">request</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">headers</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-s1\">event</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">respondWith</span><span class=\"pl-kos\">(</span><span class=\"pl-k\">new</span> <span class=\"pl-v\">Response</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">`typeof headers.entries == \"<span class=\"pl-s1\"><span class=\"pl-kos\">${</span><span class=\"pl-k\">typeof</span> <span class=\"pl-s1\">headers</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">entries</span><span class=\"pl-kos\">}</span></span>\"`</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">See related issue on WinterJS: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1973304142\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wasmerio/winterjs/issues/25\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wasmerio/winterjs/issues/25/hovercard?comment_id=1790851061&amp;comment_type=issue_comment\" href=\"https://github.com/wasmerio/winterjs/issues/25#issuecomment-1790851061\">wasmerio/winterjs#25 (comment)</a></p>\n<p dir=\"auto\">Should <code class=\"notranslate\">entries</code> be added to the spec so Cloudflare and Deno Deploy stay compliant with the spec and the rest of runtimes add support as well?</p>",
            "url": "https://github.com/wintercg/proposal-common-minimum-api/issues/60",
            "title": "Spec missing Headers.entries",
            "date_modified": "2023-12-07T15:21:03.000Z",
            "date_published": "2023-11-02T14:35:48.000Z",
            "author": {
                "name": "syrusakbary",
                "url": "https://github.com/syrusakbary"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/246651?u=80e18ea8c1e4cba31f0f0e3de791b33f0d36c523&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">From <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1941459453\" data-permission-text=\"Title is private\" data-url=\"https://github.com/cloudflare/workerd/issues/1305\" data-hovercard-type=\"issue\" data-hovercard-url=\"/cloudflare/workerd/issues/1305/hovercard\" href=\"https://github.com/cloudflare/workerd/issues/1305\">cloudflare/workerd#1305</a> we've realised that we should define what should happen when <code class=\"notranslate\">close</code> is called on a socket that already had its <code class=\"notranslate\">closed</code> promise rejected.</p>\n<p dir=\"auto\">When the <code class=\"notranslate\">closed</code> promise is resolved then the answer is easy: <code class=\"notranslate\">close</code> does nothing.</p>\n<p dir=\"auto\">But when <code class=\"notranslate\">closed</code> is rejected, we have a couple of options:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">close</code> throws the exception in <code class=\"notranslate\">closed</code></li>\n<li><code class=\"notranslate\">close</code> doesn't throw <strong>and</strong> leaves the <code class=\"notranslate\">closed</code> promise unchanged (so it remains rejected)</li>\n</ul>\n<p dir=\"auto\">Workerd currently does a third option, which I think just leads to gotchas so I want to change it, where <code class=\"notranslate\">close</code> doesn't throw but also resolves the <code class=\"notranslate\">closed</code> promise which means the exception can be lost.</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/24",
            "title": "sockets.close behaviour when `closed` already rejected",
            "date_modified": "2023-11-05T23:00:11.000Z",
            "date_published": "2023-10-27T15:08:43.000Z",
            "author": {
                "name": "dom96",
                "url": "https://github.com/dom96"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/135671829?u=bde12febd669ab6108ec844bb653e8f1ab229962&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">There should be an ability to add client certificates to the new TLS connection. While this feature is implemented in web clients on the browser side (and not allowed from the code side), it's important to have ability to specify client certificates from code on the server side.</p>\n<p dir=\"auto\">Some apps use client certificates as an authentication technology, so it might be critical.</p>\n<p dir=\"auto\">It could look like an option properties <code class=\"notranslate\">tlsKey</code>, <code class=\"notranslate\">tlsCert</code> or as an object property <code class=\"notranslate\">tls</code> with <code class=\"notranslate\">key</code> and <code class=\"notranslate\">cert</code> properties:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const socket = connect('https://example.com', {\n  tls: {\n    key: clientKey,\n    cert: clientCert,\n  },\n)\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">socket</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">connect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'https://example.com'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">tls</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-c1\">key</span>: <span class=\"pl-s1\">clientKey</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-c1\">cert</span>: <span class=\"pl-s1\">clientCert</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span><span class=\"pl-kos\"></span>\n<span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">The key and certificate values could be WebCrypto API primitives or TypedArray, ArrayBuffer, DataView instances.</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/23",
            "title": "Add client certificates support",
            "date_modified": "2023-11-11T18:47:19.000Z",
            "date_published": "2023-10-11T17:26:39.000Z",
            "author": {
                "name": "teabroker",
                "url": "https://github.com/teabroker"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/246651?u=80e18ea8c1e4cba31f0f0e3de791b33f0d36c523&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1727934008\" data-permission-text=\"Title is private\" data-url=\"https://github.com/cloudflare/cloudflare-docs/issues/9118\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/cloudflare/cloudflare-docs/pull/9118/hovercard?comment_id=1752288727&amp;comment_type=issue_comment\" href=\"https://github.com/cloudflare/cloudflare-docs/pull/9118#issuecomment-1752288727\">cloudflare/cloudflare-docs#9118 (comment)</a></p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/22",
            "title": "Document allowed inputs to WritableStream::write",
            "date_modified": "2023-10-10T22:11:38.000Z",
            "date_published": "2023-10-10T22:11:38.000Z",
            "author": {
                "name": "dom96",
                "url": "https://github.com/dom96"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/135671829?u=bde12febd669ab6108ec844bb653e8f1ab229962&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">It should be decided not to make insecure options to be default. Developers usually rely on default values as secure enough. It could and would lead to data leakages and security breaches.</p>\n<p dir=\"auto\">The <code class=\"notranslate\">secureTransport</code> option in <code class=\"notranslate\">SocketOptions</code> should not be <code class=\"notranslate\">\"off\"</code>.</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/21",
            "title": "Make defaults secure",
            "date_modified": "2023-11-05T22:48:03.000Z",
            "date_published": "2023-10-08T11:13:40.000Z",
            "author": {
                "name": "teabroker",
                "url": "https://github.com/teabroker"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/628926?u=005309ed463151dd6cf918269125f91578f15096&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Your spec sites are all down.. Like: <a href=\"https://common-min-api.proposal.wintercg.org/\" rel=\"nofollow\">https://common-min-api.proposal.wintercg.org/</a></p>",
            "url": "https://github.com/wintercg/proposal-common-minimum-api/issues/59",
            "title": "Spec websites are down",
            "date_modified": "2023-10-25T18:38:51.000Z",
            "date_published": "2023-10-05T20:13:17.000Z",
            "author": {
                "name": "melroy89",
                "url": "https://github.com/melroy89"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/439929?u=88483145a53c3d594ab68146c1a8bdecc3bcd1d3&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Because the socket API builds on the streams spec, it would be helpful for performance tuning to be able to specify the readable and writable queuing strategies. For example,</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const socket = connect('https://example.org', {\n  writableStrategy: { highWaterMark: 4096 },\n  readableStrategy: { highWaterMark: 4096 },\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">socket</span> <span class=\"pl-c1\">=</span> <span class=\"pl-en\">connect</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'https://example.org'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">writableStrategy</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">highWaterMark</span>: <span class=\"pl-c1\">4096</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">readableStrategy</span>: <span class=\"pl-kos\">{</span> <span class=\"pl-c1\">highWaterMark</span>: <span class=\"pl-c1\">4096</span> <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/20",
            "title": "Writable and Readable QueuingStrategies",
            "date_modified": "2023-10-01T16:34:58.000Z",
            "date_published": "2023-10-01T16:34:58.000Z",
            "author": {
                "name": "jasnell",
                "url": "https://github.com/jasnell"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/512240?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The socket should provide the local and peer addresses for connections. For example, you may wish to know on which port the outgoing connection was established for logging or accounting purposes. In addition, it may be useful to know which IP address a wildcard connection resolved to (though obviously this will be 127.0.0.1 in most cases).</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/17",
            "title": "Peer addresses",
            "date_modified": "2023-11-12T12:12:29.000Z",
            "date_published": "2023-09-28T17:13:28.000Z",
            "author": {
                "name": "mmastrac",
                "url": "https://github.com/mmastrac"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/512240?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Deno currently provides the ability to connect to a unix socket. While I believe there is no standard for unix socket addresses URIs, a few ad-hoc standards do exist for this. Ideally the connection standard should make it reasonably easy for implementers to provide additional platform-specific socket types.</p>\n<p dir=\"auto\">Some discussion around this in WhatWG: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"802612854\" data-permission-text=\"Title is private\" data-url=\"https://github.com/whatwg/url/issues/577\" data-hovercard-type=\"issue\" data-hovercard-url=\"/whatwg/url/issues/577/hovercard\" href=\"https://github.com/whatwg/url/issues/577\">whatwg/url#577</a></p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/16",
            "title": "Unix sockets",
            "date_modified": "2023-09-28T18:23:27.000Z",
            "date_published": "2023-09-28T16:34:32.000Z",
            "author": {
                "name": "mmastrac",
                "url": "https://github.com/mmastrac"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/512240?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The spec likely needs to deal with these three items which are necessary for creating HTTP/2 connections.</p>\n<p dir=\"auto\">The socket options must allow outgoing connections to specify ALPN negotation strings and/or byte strings, and should return the negotiated values as part of a handshake.</p>\n<p dir=\"auto\">In addition, a socket should be configured so that it may optionally send/receive data before the handshake promise completes.</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/14",
            "title": "Early data, handshake promise, and ALPN negotiation",
            "date_modified": "2023-11-05T22:49:11.000Z",
            "date_published": "2023-09-28T16:30:41.000Z",
            "author": {
                "name": "mmastrac",
                "url": "https://github.com/mmastrac"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/246651?u=80e18ea8c1e4cba31f0f0e3de791b33f0d36c523&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Only <code class=\"notranslate\">hostname:port</code> should be supported.</p>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/13",
            "title": "Clarify the string format of AnySocketAddress",
            "date_modified": "2023-11-05T22:21:48.000Z",
            "date_published": "2023-09-27T13:22:18.000Z",
            "author": {
                "name": "dom96",
                "url": "https://github.com/dom96"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/16144158?u=82cadd66bfcfcd8340269a3c0ce30f503acaf7b4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1884495951\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/proposal-sockets-api/issues/8\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/wintercg/proposal-sockets-api/pull/8/hovercard\" href=\"https://github.com/wintercg/proposal-sockets-api/pull/8\">#8</a></p>\n<blockquote>\n<blockquote>\n<p dir=\"auto\">A constructor for {{Socket}} is intentially not specified, and is left to implementors to create.</p>\n</blockquote>\n<p dir=\"auto\">Do we want to leave it like this? Are there reasons why implementors might want to create a constructor for Socket? If there are then it's better for us to capture that in this document and avoid every vendor creating their own constructor.</p>\n</blockquote>",
            "url": "https://github.com/wintercg/proposal-sockets-api/issues/9",
            "title": "Should we define a constructor for the Socket class?",
            "date_modified": "2023-09-08T19:46:24.000Z",
            "date_published": "2023-09-07T16:27:00.000Z",
            "author": {
                "name": "Ethan-Arrowood",
                "url": "https://github.com/Ethan-Arrowood"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/275871?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">I can <code class=\"notranslate\">curl https://common-min-api.proposal.wintercg.org/</code> but not <code class=\"notranslate\">firefox https://common-min-api.proposal.wintercg.org/</code> (edit: on ubuntu) - the latter fails persistently with a <code class=\"notranslate\">NS_ERROR_UNKNOWN_HOST</code> and I believe this is due to the somewhat unusual CNAME construct:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ dig common-min-api.proposal.wintercg.org +short\nproposal-*.deno.dev.\n34.120.54.55\"><pre class=\"notranslate\"><code class=\"notranslate\">$ dig common-min-api.proposal.wintercg.org +short\nproposal-*.deno.dev.\n34.120.54.55\n</code></pre></div>\n<p dir=\"auto\">Supporting evidence: it starts working the moment I add a <code class=\"notranslate\">34.120.54.55 common-min-api.proposal.wintercg.org</code> stanza to my /etc/hosts.</p>\n<p dir=\"auto\">Also applies to the other *.proposal.wintercg.org domain names.</p>\n<p dir=\"auto\">Small aside: proposal.wintercg.org has no A or AAAA records.</p>",
            "url": "https://github.com/wintercg/www/issues/35",
            "title": "*.proposal.wintercg.org not reachable in firefox",
            "date_modified": "2023-11-02T15:35:01.000Z",
            "date_published": "2023-08-30T10:33:24.000Z",
            "author": {
                "name": "bnoordhuis",
                "url": "https://github.com/bnoordhuis"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/4174848?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This Draft <a href=\"https://common-min-api.proposal.wintercg.org/\" rel=\"nofollow\">https://common-min-api.proposal.wintercg.org/</a> links to <a href=\"https://wicg.github.io/background-fetch/\" rel=\"nofollow\">https://wicg.github.io/background-fetch/</a> not <a href=\"https://fetch.spec.whatwg.org/\" rel=\"nofollow\">https://fetch.spec.whatwg.org/</a>. Disambiguate.</p>",
            "url": "https://github.com/wintercg/proposal-common-minimum-api/issues/53",
            "title": "Disambiguate BackgroundFetch from Fetch Standard",
            "date_modified": "2023-08-10T05:48:17.000Z",
            "date_published": "2023-08-10T05:48:17.000Z",
            "author": {
                "name": "guest271314",
                "url": "https://github.com/guest271314"
            }
        }
    ]
}