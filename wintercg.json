{
    "version": "https://jsonfeed.org/version/1",
    "title": "org:wintercg Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/wintercg.json",
    "feed_url": "https://azu.github.io/github-search-rss/wintercg.json",
    "description": "org:wintercg Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/241506?u=13324b3ac27dc54cdde3ac635d567d0d96b88876&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This is very much related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1668941156\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/runtime-keys/issues/5\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/runtime-keys/issues/5/hovercard\" href=\"https://github.com/wintercg/runtime-keys/issues/5\">#5</a>, it highlights its importance and issues in the module ecosystem stemming from runtimes such as Bun and Deno pretending to be Node.js</p>\n<p dir=\"auto\">From the very <a href=\"https://runtime-keys.proposal.wintercg.org/#example-usage\" rel=\"nofollow\">example in the proposal</a></p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&quot;exports&quot;: {\n    &quot;node&quot;: &quot;./dist/node/index.js&quot;,\n    &quot;deno&quot;: &quot;./dist/deno/index.js&quot;\n},\"><pre class=\"notranslate\"><span class=\"pl-s\">\"exports\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"node\"</span>: <span class=\"pl-s\">\"./dist/node/index.js\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"deno\"</span>: <span class=\"pl-s\">\"./dist/deno/index.js\"</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>\n<p dir=\"auto\">or an extended one</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&quot;exports&quot;: {\n    &quot;node&quot;: &quot;./dist/node/index.js&quot;,\n    &quot;deno&quot;: &quot;./dist/deno/index.js&quot;,\n    &quot;bun&quot;: &quot;./dist/bun/index.js&quot;\n},\"><pre class=\"notranslate\"><span class=\"pl-s\">\"exports\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"node\"</span>: <span class=\"pl-s\">\"./dist/node/index.js\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"deno\"</span>: <span class=\"pl-s\">\"./dist/deno/index.js\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"bun\"</span>: <span class=\"pl-s\">\"./dist/bun/index.js\"</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>\n<p dir=\"auto\">While lacking resolution for <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1668941156\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/runtime-keys/issues/5\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/runtime-keys/issues/5/hovercard\" href=\"https://github.com/wintercg/runtime-keys/issues/5\">#5</a> and at least some prescribed lookup behaviour one would mistakenly think that the following means \"everything but node loads from the webapi dist\".</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&quot;exports&quot;: {\n    &quot;node&quot;: &quot;./dist/node/index.js&quot;,\n    &quot;default&quot;: &quot;./dist/webapi/index.js&quot;\n},\"><pre class=\"notranslate\"><span class=\"pl-s\">\"exports\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"node\"</span>: <span class=\"pl-s\">\"./dist/node/index.js\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"default\"</span>: <span class=\"pl-s\">\"./dist/webapi/index.js\"</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span></pre></div>\n<p dir=\"auto\">Unfortunately that is not the case. Only Node.js correctly loads its intended export, while both Bun and Deno load \"node\" <strong>in all three examples above</strong> because of their compatibility beliefs and undescribed key order matching (all runtimes just look from top to bottom for a first hit).</p>\n<p dir=\"auto\">I believe the proposal needs <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1668941156\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/runtime-keys/issues/5\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/runtime-keys/issues/5/hovercard\" href=\"https://github.com/wintercg/runtime-keys/issues/5\">#5</a> combined with at least some text around how the keys are to be used.</p>\n<p dir=\"auto\">For example:</p>\n<ul dir=\"auto\">\n<li>add \"wintercg\" or similar which effectively behaves as \"default\" does in the Node.js resolution algorithm</li>\n<li>prescribe that runtimes must first look for their own key, then wintercg/default, and only then fallback on proprietary resolution algorithms</li>\n</ul>\n<p dir=\"auto\">The alternative (today's behaviour) is that module authors need to maintain an ever growing list of keys in their package.json on the offchance that a new runtime is added that inherits from Deno or Bun in that they believe they can work with \"node\" exports</p>",
            "url": "https://github.com/wintercg/runtime-keys/issues/18",
            "title": "Runtime's own key resolution should be at least somewhat defined",
            "date_modified": "2024-11-08T15:17:53.000Z",
            "date_published": "2024-10-31T07:52:38.000Z",
            "author": {
                "name": "panva",
                "url": "https://github.com/panva"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/567540?u=8c4489cd158bb1a7fffff338fc832359a113955e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Some code that runs in either the browser or a non-browser environment may have dedicated code paths for each, e.g. because certain code isn't expected to work- or to be exposed in browsers (or vice versa). The only API that is exposed in the minimum common API appears to be <code class=\"notranslate\">navigator.userAgent</code> and it looks fragile when it comes to detecting browser vs non-browser environments.</p>\n<p dir=\"auto\">Are there plans to have a clear signal that can be used to detect the presence of the minimum common API?</p>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/77",
            "title": "Detect common API vs browser",
            "date_modified": "2024-10-30T18:52:52.000Z",
            "date_published": "2024-10-28T17:44:10.000Z",
            "author": {
                "name": "jkrems",
                "url": "https://github.com/jkrems"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/567540?u=8c4489cd158bb1a7fffff338fc832359a113955e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The current spec text seems ambiguous so I was interested in the semantics: it links to the HTML spec for userAgent which says that the value is used as the default value for the User-Agent header. Is that true for the property here as well? Will fetch() by default use that value?</p>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/76",
            "title": "navigator.userAgent and User-Agent",
            "date_modified": "2024-10-24T00:17:28.000Z",
            "date_published": "2024-10-24T00:17:28.000Z",
            "author": {
                "name": "jkrems",
                "url": "https://github.com/jkrems"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/8225977?u=ebf8bbc30918fe9c36833005bebc027a65984f34&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The File System API is a relatively recent web standard, now implemented in all browsers, that allows accessing and modifying files in the file system. All browsers allow access through this API to a virtual filesystem, unique to a page's origin, through <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/StorageManager/getDirectory\" rel=\"nofollow\"><code class=\"notranslate\">await navigator.storage.getDirectory()</code></a>, that you can't go outside of.</p>\n<p dir=\"auto\">However, Chromium extends this by providing additional APIs (such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/showOpenFilePicker\" rel=\"nofollow\"><code class=\"notranslate\">window.showOpenFilePicker()</code></a>) that give you access to arbitrary files and directories in the file system. Although other browsers are opposed to implementing these APIs because of safety and privacy concerns, this is not an issue for server-side runtimes.</p>\n<p dir=\"auto\">I have heard that this API is not a great fit for server-side environments, but (as someone who hasn't looked in depth at the API and considered it) those concerns are not clear to me. So I opened this issue to have a place to discuss what it's missing, whether we can work with WHATWG to fix that, and also to discuss WinterCG extensions similar to <code class=\"notranslate\">showOpenFilePicker()</code>.</p>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/73",
            "title": "Considering the File System API",
            "date_modified": "2024-07-03T01:57:04.000Z",
            "date_published": "2024-07-02T08:55:34.000Z",
            "author": {
                "name": "andreubotella",
                "url": "https://github.com/andreubotella"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/9669289?u=1dba106891d6c062871da687242942532ea26005&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Hi there, at the <a href=\"https://webengineshackfest.org/\" rel=\"nofollow\">Web Engines Hackfest</a> I raised the question of how to get a WinterCG \"position\" about new web API proposals. Along with others, <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/littledan/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/littledan\">@littledan</a> mentioned that for now, filing issues against this repository will do.</p>\n<p dir=\"auto\">I'd like to get Winter's position on the Observable API, as proposed in <a href=\"https://github.com/WICG/observable\">https://github.com/WICG/observable</a>. Observables are a <a href=\"https://github.com/whatwg/dom/issues/544\" data-hovercard-type=\"issue\" data-hovercard-url=\"/whatwg/dom/issues/544/hovercard\">long-awaited</a> and <a href=\"https://foolip.github.io/spec-reactions/\" rel=\"nofollow\">highly desired</a> ergonomic improvement for event handling.</p>\n<p dir=\"auto\">I'll admit I'd still like to do my research on where exactly the line should be drawn between Observables and Signals in terms of their usage (at the moment I know almost nothing about Signals except for what some people described to me in person). But still it would be good to get a gut check on this proposal by experts over here, sooner than later. Thanks!</p>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/72",
            "title": "Requesting a position on the Observable API",
            "date_modified": "2024-06-17T07:10:14.000Z",
            "date_published": "2024-06-06T13:43:19.000Z",
            "author": {
                "name": "domfarolino",
                "url": "https://github.com/domfarolino"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5588957?u=fb4173ce4f07a2a10a27f53afb59de4055ec0ca4&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Can browser service worker runtime be included?</p>\n<p dir=\"auto\">Hono can run in Node, Deno, Bun, Cloudflare Workers, Pages, and can also run in a service worker to power an offline web app.</p>\n<p dir=\"auto\">I'd like to see more things target/support service workers too (e.g. Next.js, Deno Fresh, and HonoX could all be made to work in various runtime environments and could then easily be ran in a service worker).</p>",
            "url": "https://github.com/wintercg/runtime-keys/issues/13",
            "title": "Service worker runtime environment",
            "date_modified": "2024-04-08T10:51:57.000Z",
            "date_published": "2024-04-08T10:29:10.000Z",
            "author": {
                "name": "mfulton26",
                "url": "https://github.com/mfulton26"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1935696?u=d4da91ea9b820da475036cd6fec79943b2c06775&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Since Node.js, Bun and Deno offer different APIs (<a href=\"https://nodejs.org/api/test.html#test-runner\" rel=\"nofollow\"><code class=\"notranslate\">node:test</code></a>, <a href=\"https://bun.sh/docs/test/writing\" rel=\"nofollow\"><code class=\"notranslate\">bun:test</code></a>, <a href=\"https://examples.deno.land/writing-tests\" rel=\"nofollow\"><code class=\"notranslate\">Deno.test</code></a>) but have many similarities, would it make sense to have a set of specced cross-platform testing APIs?</p>\n<h2 dir=\"auto\">Motivating Example</h2>\n<p dir=\"auto\"><code class=\"notranslate\">runtime:</code> prefix, in the style of Node.js or Bun:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"import { test } from 'runtime:test';\n\ntest('2 + 2', () =&gt; {\n  expect(2 + 2).toBe(4);\n});\"><pre class=\"notranslate\"><span class=\"pl-k\">import</span> <span class=\"pl-kos\">{</span> <span class=\"pl-s1\">test</span> <span class=\"pl-kos\">}</span> <span class=\"pl-k\">from</span> <span class=\"pl-s\">'runtime:test'</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'2 + 2'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">expect</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">2</span> <span class=\"pl-c1\">+</span> <span class=\"pl-c1\">2</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">toBe</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">4</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">Or, Deno-style global:</p>\n<div class=\"highlight highlight-source-ts notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"Runtime.test(&quot;assert works correctly&quot;, () =&gt; {\n  assert(true);\n  assertEquals(1, 1);\n});\n\n// Using existing global:\nglobalThis.test(&quot;assert works correctly&quot;, () =&gt; {\n  assert(true);\n  assertEquals(1, 1);\n});\"><pre class=\"notranslate\"><span class=\"pl-smi\">Runtime</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"assert works correctly\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">assert</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-en\">assertEquals</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n\n<span class=\"pl-c\">// Using existing global:</span>\n<span class=\"pl-s1\">globalThis</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">\"assert works correctly\"</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-en\">assert</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">true</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n  <span class=\"pl-en\">assertEquals</span><span class=\"pl-kos\">(</span><span class=\"pl-c1\">1</span><span class=\"pl-kos\">,</span> <span class=\"pl-c1\">1</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span></pre></div>\n<p dir=\"auto\">This was originally inspired by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nzakas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nzakas\">@nzakas</a>'s tweet here:</p>\n<blockquote>\n<p dir=\"auto\">What I want: To write JavaScript tests once and be able to run them across Node.js, Bun, and Deno.</p>\n<p dir=\"auto\">Problem: Bun and Deno have built-in test runners you have to import from to run tests. I use Mocha. This doesn't work.</p>\n<p dir=\"auto\">Solution: ???</p>\n</blockquote>\n<p dir=\"auto\">Source: <a href=\"https://twitter.com/slicknet/status/1762264774166085937\" rel=\"nofollow\">https://twitter.com/slicknet/status/1762264774166085937</a></p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/CanadaHonk/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/CanadaHonk\">@CanadaHonk</a> rightly mentions that, while there are similarities, there are probably challenges creating a spec:</p>\n<blockquote>\n<p dir=\"auto\">most test framework APIs are pretty similar?</p>\n<p dir=\"auto\">probably hard to spec due to sandbox/isolation/etc</p>\n</blockquote>\n<p dir=\"auto\">Source: <a href=\"https://twitter.com/CanadaHonk/status/1762417370893516929\" rel=\"nofollow\">https://twitter.com/CanadaHonk/status/1762417370893516929</a></p>\n<h2 dir=\"auto\">Alternatives Considered</h2>\n<h3 dir=\"auto\">Separate Package</h3>\n<p dir=\"auto\">Instead of something built into the standard library of multiple runtimes, use a separate package (either like Vitest, including testing features of its own, or a wrapper package).</p>\n<p dir=\"auto\">Downsides:</p>\n<ol dir=\"auto\">\n<li>Doesn't work out of the box or with zero dependencies</li>\n<li>Downloading and maintaining another package in <code class=\"notranslate\">devDependencies</code></li>\n</ol>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/68",
            "title": "Cross-Runtime Testing APIs?",
            "date_modified": "2024-03-02T05:14:42.000Z",
            "date_published": "2024-02-27T10:10:33.000Z",
            "author": {
                "name": "karlhorky",
                "url": "https://github.com/karlhorky"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Eg: <code class=\"notranslate\">'0'</code> -&gt; <code class=\"notranslate\">0</code>, <code class=\"notranslate\">'false'</code> -&gt; <code class=\"notranslate\">false</code>. Suggested by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/nicolo-ribaudo/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/nicolo-ribaudo\">@nicolo-ribaudo</a></p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/17",
            "title": "Should environment variable values be normalized?",
            "date_modified": "2024-03-14T01:26:30.000Z",
            "date_published": "2024-02-11T21:35:18.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/42794878?u=c2da6d9d9cc86ff6ae7bd4c089f2cdbb9ff01a84&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Cloudflare workers, Deno, node, bun all have it in some capacity. But it's also extremely limited and there is little incentive from browsers to change it.</p>\n<p dir=\"auto\">Node supports passing a dictionary as the second argument, ie. for setting custom headers or undici dispatchers (which allows for proxying, etc.). If this could be standardized it'd be great.</p>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1599378606\" data-permission-text=\"Title is private\" data-url=\"https://github.com/whatwg/websockets/issues/42\" data-hovercard-type=\"issue\" data-hovercard-url=\"/whatwg/websockets/issues/42/hovercard\" href=\"https://github.com/whatwg/websockets/issues/42\">whatwg/websockets#42</a><br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1147048320\" data-permission-text=\"Title is private\" data-url=\"https://github.com/whatwg/websockets/issues/16\" data-hovercard-type=\"issue\" data-hovercard-url=\"/whatwg/websockets/issues/16/hovercard?comment_id=881547333&amp;comment_type=issue_comment\" href=\"https://github.com/whatwg/websockets/issues/16#issuecomment-881547333\">whatwg/websockets#16 (comment)</a></p>",
            "url": "https://github.com/wintercg/proposal-minimum-common-api/issues/66",
            "title": "WebSocket",
            "date_modified": "2024-02-09T09:48:37.000Z",
            "date_published": "2024-02-09T04:01:26.000Z",
            "author": {
                "name": "KhafraDev",
                "url": "https://github.com/KhafraDev"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Further future thing, but would be very nice to have, especially for more low-level implementations like env atm.</p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/16",
            "title": "Write mini test suite?",
            "date_modified": "2024-02-09T02:26:14.000Z",
            "date_published": "2024-02-09T02:26:14.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Since we can exit, we should likely add exit hooks as <a href=\"https://github.com/CanadaHonk/proposal-cli-api/issues/1#issuecomment-1921542301\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/proposal-cli-api/issues/1/hovercard\">suggested by @lucacasonato</a>. How should they be added/removed? (also todo bikeshed exit hook or exit listener or ...)</p>\n<p dir=\"auto\">Just like this?</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const hook = () =&gt; console.log('Goodbye!');\nCLI.addExitHook(hook);\n// CLI.removeExitHook(hook);\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-en\">hook</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">=&gt;</span> <span class=\"pl-smi\">console</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">log</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'Goodbye!'</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c1\">CLI</span><span class=\"pl-kos\">.</span><span class=\"pl-en\">addExitHook</span><span class=\"pl-kos\">(</span><span class=\"pl-en\">hook</span><span class=\"pl-kos\">)</span><span class=\"pl-kos\">;</span>\n<span class=\"pl-c\">// CLI.removeExitHook(hook);</span></pre></div>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/15",
            "title": "How should exit hooks be added/removed?",
            "date_modified": "2024-03-07T00:27:32.000Z",
            "date_published": "2024-02-09T00:37:56.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Since we now have a mini ES-like thing taking up most the explainer, we should probably start an actual spec bikeshed file sometime soon. Maybe once it is under WinterCG?</p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/14",
            "title": "Write spec bikeshed file",
            "date_modified": "2024-02-08T21:03:02.000Z",
            "date_published": "2024-02-08T21:03:01.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/32498324?u=6ff39af834311a2dbeefc3c3071dde7eeb6d5a0b&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Some terminals support printing interactive hyperlinks and some don't. It could be useful to expose this ability?</p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/12",
            "title": "Terminal metadata - link support?",
            "date_modified": "2024-02-19T15:58:55.000Z",
            "date_published": "2024-02-07T11:53:03.000Z",
            "author": {
                "name": "lukewarlow",
                "url": "https://github.com/lukewarlow"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">\"The three\"</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Node: <a href=\"https://github.com/nodejs/node/issues/51706\" data-hovercard-type=\"issue\" data-hovercard-url=\"/nodejs/node/issues/51706/hovercard\">TSC issue requesting comments</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Deno: Marking this as essentially done thanks to <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/lucacasonato/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/lucacasonato\">@lucacasonato</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Bun: Some feedback from <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/paperdave/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/paperdave\">@paperdave</a> (ty!)</li>\n</ul>\n<h3 dir=\"auto\">Edge runtimes</h3>\n<p dir=\"auto\">Not sure, this doesn't really effect them?</p>\n<h3 dir=\"auto\">Smaller runtimes</h3>\n<p dir=\"auto\">Could be nice, probably low priority though?</p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/11",
            "title": "Runtime outreach",
            "date_modified": "2024-02-08T19:22:12.000Z",
            "date_published": "2024-02-07T01:04:09.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Terminal metadata idea from <a href=\"https://github.com/CanadaHonk/proposal-cli-api/issues/1#issuecomment-1921612081\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/proposal-cli-api/issues/1/hovercard\">this #1 comment</a>.</p>\n<ul dir=\"auto\">\n<li>Should we have a parent object (eg <code class=\"notranslate\">CLI.terminal.noColor</code>) or bare in the namespace (eg <code class=\"notranslate\">CLI.noColor</code>)?</li>\n<li>Functions (eg <code class=\"notranslate\">CLI.terminal.noColor()</code>) or getters (eg <code class=\"notranslate\">CLI.terminal.noColor</code>)?</li>\n<li>Interactivity:\n<ul dir=\"auto\">\n<li>Potential names: <code class=\"notranslate\">interactive</code>, <code class=\"notranslate\">isInteractive</code>, <code class=\"notranslate\">interactivity</code>, <code class=\"notranslate\">nonInteractive</code>, <code class=\"notranslate\">notInteractive</code>, <code class=\"notranslate\">tty</code>, <code class=\"notranslate\">isTty</code>, <code class=\"notranslate\">isTTY</code>, <code class=\"notranslate\">terminal</code>, <code class=\"notranslate\">isTerminal</code>, <code class=\"notranslate\">inTerminal</code></li>\n<li>Deno used to have a <code class=\"notranslate\">isatty(...)</code> function, but now is moving to <code class=\"notranslate\">isTerminal</code>.</li>\n</ul>\n</li>\n<li>No color:\n<ul dir=\"auto\">\n<li>Potential names: <code class=\"notranslate\">noColor</code>, <code class=\"notranslate\">color</code>, <code class=\"notranslate\">colorful</code>, <code class=\"notranslate\">hasColor</code>, <code class=\"notranslate\">shouldColor</code></li>\n<li>We should probably just use <code class=\"notranslate\">noColor</code> as it is essentially an opt-out preference; <code class=\"notranslate\">color</code> could imply the user <em>wants</em> color which could not be true (rather than <code class=\"notranslate\">NO_COLOR</code> stating the user explicitly does <em>not want</em> color). Also, this would then share the name of the <a href=\"https://no-color.org/\" rel=\"nofollow\">environment variable \"standard\"</a>.</li>\n<li>Only <a href=\"https://deno.land/api?s=Deno.noColor\" rel=\"nofollow\">Deno exposes just this (<code class=\"notranslate\">Deno.noColor</code>)</a> afaik, other runtimes you have to handle it yourself (eg <code class=\"notranslate\">!!process.env.NO_COLOR</code>).</li>\n</ul>\n</li>\n</ul>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/9",
            "title": "How should terminal metadata be exposed?",
            "date_modified": "2024-05-15T03:10:03.000Z",
            "date_published": "2024-02-06T23:14:42.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">A bare object (<code class=\"notranslate\">process.env</code>, <code class=\"notranslate\">Bun.env</code>)? A Map-like object (<code class=\"notranslate\">Deno.env</code>)?</p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/8",
            "title": "How should env variables be exposed?",
            "date_modified": "2024-03-07T16:00:35.000Z",
            "date_published": "2024-02-06T23:10:29.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">While WinterCG doesn't have an official process, here are rough stages I think are reasonable, \"adapted\" from ECMAScript:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Stage 0 (you are here)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Present idea, see if it is mostly agreed to be reasonable</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Stage 1 (adopted into WinterCG?)\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2094210350\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/proposal-cli-api/issues/5\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/proposal-cli-api/issues/5/hovercard\" href=\"https://github.com/wintercg/proposal-cli-api/issues/5\">#5</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2121958324\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/proposal-cli-api/issues/11\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/proposal-cli-api/issues/11/hovercard\" href=\"https://github.com/wintercg/proposal-cli-api/issues/11\">#11</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> More discussion</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Stage 2\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Write specification</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Stage 3\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Implemented in at least 2 runtimes (can be behind flag)</li>\n</ul>\n</li>\n</ul>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/7",
            "title": "Next steps",
            "date_modified": "2024-03-07T16:32:19.000Z",
            "date_published": "2024-02-01T18:26:42.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/189835?u=2d60c25c3f0cbdad0e8c9239a7283e887a3e490c&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">In this issue, let's verify that our CLI API has sufficient capabilities for advanced argument parsing and tab completion. I'm not sure what's required here, but I hope my coworker <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/molisani/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/molisani\">@molisani</a> can help lay out requirements, as he has significant experience in advanced Node CLIs.</p>\n<div class=\"markdown-alert markdown-alert-note\" dir=\"auto\"><p class=\"markdown-alert-title\" dir=\"auto\"><svg class=\"octicon octicon-info mr-2\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" height=\"16\" aria-hidden=\"true\"><path d=\"M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8Zm8-6.5a6.5 6.5 0 1 0 0 13 6.5 6.5 0 0 0 0-13ZM6.5 7.75A.75.75 0 0 1 7.25 7h1a.75.75 0 0 1 .75.75v2.75h.25a.75.75 0 0 1 0 1.5h-2a.75.75 0 0 1 0-1.5h.25v-2h-.25a.75.75 0 0 1-.75-.75ZM8 6a1 1 0 1 1 0-2 1 1 0 0 1 0 2Z\"></path></svg>Note</p><p dir=\"auto\">The initial CLI API should <em>not</em> provide a high-level argument parser or tab completion engine--we should focus on low-level capabilities first, and build more high-level abstractions once we have the basis (so that we're not tempted to put low-level hooks in the higher-level APIs, given that their use is optional).</p>\n</div>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/6",
            "title": "Enumerate necessary capabilities for advanced APIs",
            "date_modified": "2024-02-07T13:32:22.000Z",
            "date_published": "2024-02-01T16:12:03.000Z",
            "author": {
                "name": "littledan",
                "url": "https://github.com/littledan"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><code class=\"notranslate\">argv</code> is traditionally all arguments, which would include: runtime binary, script being ran, and runtime arguments (\"runtime parts\"). Should ours?</p>\n<p dir=\"auto\">Existing examples:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">process.argv</code> (Node): includes runtime parts</li>\n<li><code class=\"notranslate\">Deno.args</code> (Deno): does not include runtime parts (they can be got separately with <code class=\"notranslate\">Deno.execPath()</code>, etc)</li>\n</ul>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/3",
            "title": "Should argv include runtime parts (binary/script/runtime args)?",
            "date_modified": "2024-03-07T19:03:44.000Z",
            "date_published": "2024-01-22T15:44:29.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/19228318?u=eea29901f58d6357f0fc2992747d0b4b80d23c8e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Node has <code class=\"notranslate\">process</code> for most APIs discussed here (and more), Deno has its own-named <code class=\"notranslate\">Deno</code>. <code class=\"notranslate\">CLI</code>/etc seems obvious but needs (a lot of?) bikeshedding. Separate discussion for whether to use <code class=\"notranslate\">process</code>: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2094206032\" data-permission-text=\"Title is private\" data-url=\"https://github.com/wintercg/proposal-cli-api/issues/4\" data-hovercard-type=\"issue\" data-hovercard-url=\"/wintercg/proposal-cli-api/issues/4/hovercard\" href=\"https://github.com/wintercg/proposal-cli-api/issues/4\">#4</a></p>",
            "url": "https://github.com/wintercg/proposal-cli-api/issues/2",
            "title": "What namespace?",
            "date_modified": "2024-03-07T12:11:56.000Z",
            "date_published": "2024-01-22T15:42:35.000Z",
            "author": {
                "name": "CanadaHonk",
                "url": "https://github.com/CanadaHonk"
            }
        }
    ]
}