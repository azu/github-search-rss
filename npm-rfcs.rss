<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://azu.github.io/github-search-rss/npm-rfcs.rss</id>
    <title>npm/rfcs Issues</title>
    <updated>2025-04-24T19:01:12.827Z</updated>
    <generator>github-search-rss</generator>
    <link rel="alternate" href="https://azu.github.io/github-search-rss/npm-rfcs.rss"/>
    <subtitle>npm/rfcs Issues on GitHub</subtitle>
    <rights>github-search-rss</rights>
    <entry>
        <title type="html"><![CDATA[RxJS Website Redirects to NET::ERR_CERT_AUTHORITY_INVALID]]></title>
        <id>https://github.com/npm/rfcs/issues/819</id>
        <link href="https://github.com/npm/rfcs/issues/819"/>
        <updated>2025-04-23T11:53:37.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/134489692?u=8348f7898bbda06cc26307f310dbfdf2497c8f84&v=4" width="64" height="64" alt=""/><br/><p dir="auto">Greetings,</p>
<p dir="auto">I recently attempted to visit the <a href="https://rxjs.dev/" rel="nofollow">https://rxjs.dev/</a> website to review the API documentation. However, I was instantly redirected to a page stating that my connection was not private, mind you I was using Google chrome on my phone but issue also arose on my Google chrome on my HP ProBook laptop too.</p>
<p dir="auto">I believe that there might be an issue with the SSL certificate that was issues for the website.</p>
<p dir="auto">I hope a solution can be found for this issue.</p>
<p dir="auto"><a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/134489692/436512152-3267b844-0916-4149-ba40-90de7fe72236.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDU1MjE1NzIsIm5iZiI6MTc0NTUyMTI3MiwicGF0aCI6Ii8xMzQ0ODk2OTIvNDM2NTEyMTUyLTMyNjdiODQ0LTA5MTYtNDE0OS1iYTQwLTkwZGU3ZmU3MjIzNi5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNDI0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDQyNFQxOTAxMTJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iYzI2ODg2NjVkYjdlYWQ3ZGNiYjFiZGU3ZmRmMWM2ZjY0NGFhMzgyZTVhODcwMmY0MmM2MWYzMDJiMTM3YjVjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.Zzxv0NIMy1C2SwiTbaSaD5vQfDd6D1rQejP3X4InCdo"><img src="https://private-user-images.githubusercontent.com/134489692/436512152-3267b844-0916-4149-ba40-90de7fe72236.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDU1MjE1NzIsIm5iZiI6MTc0NTUyMTI3MiwicGF0aCI6Ii8xMzQ0ODk2OTIvNDM2NTEyMTUyLTMyNjdiODQ0LTA5MTYtNDE0OS1iYTQwLTkwZGU3ZmU3MjIzNi5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNDI0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDQyNFQxOTAxMTJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1iYzI2ODg2NjVkYjdlYWQ3ZGNiYjFiZGU3ZmRmMWM2ZjY0NGFhMzgyZTVhODcwMmY0MmM2MWYzMDJiMTM3YjVjJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.Zzxv0NIMy1C2SwiTbaSaD5vQfDd6D1rQejP3X4InCdo" alt="Image" style="max-width: 100%;"></a><br>
<a target="_blank" rel="noopener noreferrer" href="https://private-user-images.githubusercontent.com/134489692/436512153-d8639c8b-efad-4ef4-8b52-302b17555e10.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDU1MjE1NzIsIm5iZiI6MTc0NTUyMTI3MiwicGF0aCI6Ii8xMzQ0ODk2OTIvNDM2NTEyMTUzLWQ4NjM5YzhiLWVmYWQtNGVmNC04YjUyLTMwMmIxNzU1NWUxMC5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNDI0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDQyNFQxOTAxMTJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1hYjQxYjRkYzIzMzRlNGQ4NWQ4MDIyOTFhYWJiNzdhOTQyNjEzZTk5ZWQ1MjFmYTY5ZTBkMDYwYTFlZWQ5NjVkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.n2xr3vtYVfx3QR1G4eT1jMaciKVZHguOh1K1ZE59fmg"><img src="https://private-user-images.githubusercontent.com/134489692/436512153-d8639c8b-efad-4ef4-8b52-302b17555e10.jpg?jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJnaXRodWIuY29tIiwiYXVkIjoicmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbSIsImtleSI6ImtleTUiLCJleHAiOjE3NDU1MjE1NzIsIm5iZiI6MTc0NTUyMTI3MiwicGF0aCI6Ii8xMzQ0ODk2OTIvNDM2NTEyMTUzLWQ4NjM5YzhiLWVmYWQtNGVmNC04YjUyLTMwMmIxNzU1NWUxMC5qcGc_WC1BbXotQWxnb3JpdGhtPUFXUzQtSE1BQy1TSEEyNTYmWC1BbXotQ3JlZGVudGlhbD1BS0lBVkNPRFlMU0E1M1BRSzRaQSUyRjIwMjUwNDI0JTJGdXMtZWFzdC0xJTJGczMlMkZhd3M0X3JlcXVlc3QmWC1BbXotRGF0ZT0yMDI1MDQyNFQxOTAxMTJaJlgtQW16LUV4cGlyZXM9MzAwJlgtQW16LVNpZ25hdHVyZT1hYjQxYjRkYzIzMzRlNGQ4NWQ4MDIyOTFhYWJiNzdhOTQyNjEzZTk5ZWQ1MjFmYTY5ZTBkMDYwYTFlZWQ5NjVkJlgtQW16LVNpZ25lZEhlYWRlcnM9aG9zdCJ9.n2xr3vtYVfx3QR1G4eT1jMaciKVZHguOh1K1ZE59fmg" alt="Image" style="max-width: 100%;"></a></p>]]></content>
        <author>
            <name>AimenNadeem</name>
            <email>AimenNadeem@noreply.github.com</email>
            <uri>https://github.com/AimenNadeem</uri>
        </author>
        <published>2025-04-23T11:41:40.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] Verify publisher identity for reused repository URLs]]></title>
        <id>https://github.com/npm/rfcs/issues/818</id>
        <link href="https://github.com/npm/rfcs/issues/818"/>
        <updated>2025-04-22T16:46:38.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/5212744?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>
<p dir="auto">Publishing to npm today allows anyone to set the <code class="notranslate">homepage</code> and <code class="notranslate">repository</code> fields in their package metadata without any verification. This gap makes it trivial for a malicious actor to impersonate popular packages by reusing their metadata, tricking users into installing modified or harmful code under a familiar name.</p>
<h3 dir="auto">Example</h3>
<p dir="auto">Consider these two packages:</p>
<ul dir="auto">
<li><strong>fs-extra</strong> (the legitimate package):<br>
<a href="https://npmjs.org/package/fs-extra" rel="nofollow">https://npmjs.org/package/fs-extra</a><br>
repository: <a href="https://github.com/jprichardson/node-fs-extra">https://github.com/jprichardson/node-fs-extra</a><br>
latest version: 11.3.0</li>
<li><strong>fs-extra2</strong> (imposter):<br>
<a href="https://npmjs.com/package/fs-extra2" rel="nofollow">https://npmjs.com/package/fs-extra2</a><br>
repository: <a href="https://github.com/jprichardson/node-fs-extra">https://github.com/jprichardson/node-fs-extra</a><br>
latest version: 1.0.1</li>
</ul>
<p dir="auto">At a glance, the metadata matches exactly—but the version (<code class="notranslate">1.0.1</code>) in the imposter does <strong>not</strong> correspond to any tagged release in the real <code class="notranslate">fs-extra</code> GitHub repo. A user who installs <code class="notranslate">fs-extra2</code> may assume they’re getting the genuine library, whereas they’re actually pulling unverified code.</p>
<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>
<ul dir="auto">
<li><strong>No metadata verification</strong><br>
npm does not check that the maintainer/publisher of a package matches the owner of the <code class="notranslate">homepage</code> or <code class="notranslate">repository</code> URLs specified in <code class="notranslate">package.json</code>.</li>
<li><strong>Unilateral package creation</strong><br>
Anyone can publish a new package whose metadata duplicates that of an existing package (aside from the package name).</li>
<li><strong>No notification to original maintainers</strong><br>
The legitimate publisher has no way of knowing when someone else reuses their repo URL or homepage in a different package.</li>
</ul>
<h4 dir="auto">Desired Behaviour</h4>
<ol dir="auto">
<li><strong>Metadata‑to‑publisher cross‑check</strong><br>
When publishing a package whose <code class="notranslate">repository</code> or <code class="notranslate">homepage</code> URL exactly matches that of a previously published package:
<ul dir="auto">
<li>Verify that the npm publisher account matches the GitHub (or other VCS) repo owner.</li>
</ul>
</li>
<li><strong>Provenance verification flow</strong><br>
If the publisher accounts don’t match:
<ul dir="auto">
<li>Prompt the uploader to prove they have rights to those URLs (for example via GitHub’s provenance or an ownership token).</li>
</ul>
</li>
<li><strong>Maintain transparency and safety</strong>
<ul dir="auto">
<li>Send an automated email to the original publisher(s) of the URL in question, informing them that another package is reusing their metadata.</li>
<li>Allow the original publisher to confirm or dispute:
<ul dir="auto">
<li>If <strong>confirmed</strong>: proceed with the publish.</li>
<li>If <strong>disputed</strong> or <strong>unconfirmed</strong> within a grace period: either block the publish or add a clear “<g-emoji class="g-emoji" alias="warning">⚠️</g-emoji> Unverified repository URL” label on the package’s npm page.</li>
</ul>
</li>
</ul>
</li>
<li><strong>Optional “fork” designation</strong>
<ul dir="auto">
<li>In cases where the author legitimately forks a project, allow a “fork” checkbox or CLI flag that marks the package as a fork of the original.</li>
</ul>
</li>
</ol>
<h3 dir="auto">References</h3>
<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>aqeelat</name>
            <email>aqeelat@noreply.github.com</email>
            <uri>https://github.com/aqeelat</uri>
        </author>
        <published>2025-04-22T16:46:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] Include a `globallink` install strategy]]></title>
        <id>https://github.com/npm/rfcs/issues/817</id>
        <link href="https://github.com/npm/rfcs/issues/817"/>
        <updated>2025-04-22T14:49:28.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/1498923?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>
<p dir="auto">There's no doubt that NPM is the butt of a lot of memes relating to how heavy the local <code class="notranslate">node_modules</code> folder can get. Especially on big projects, and whne working on multiple big projects over time, the duplication of the same packages across different project spaces can cause a significant impact on hard drive space. A tool already exists to address this issues: PNPM. However, PNPM is not a 1-for-1 replacement - there are some quirks with the commands, and while for the most part it works, these nuances can get in the way of efficient package management, including when sharing code among developers (especially in the Open Source community).</p>
<p dir="auto">A <code class="notranslate">globallink</code> install strategy should be included to address this and would work similar to how the <code class="notranslate">linked</code> strategy works now. However, instead of the packages being saved in <code class="notranslate">./node_modules/.store</code>, they would be saved in <code class="notranslate">/path/to/npm/global/node_modules/.store</code>.</p>
<p dir="auto">This will also cause an update to the <code class="notranslate">clean-install</code> command where the packages (and exact dependencies) for a project are <em>deleted</em> from the global store and re-installed.</p>
<p dir="auto">Of course, this install strategy can be overridden by specifying a different type at the command line or local config.</p>
<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>
<p dir="auto">The hoisting of packages to the root of the node modules folder helps to deduplicate packages across the project. However, this is only localised to the project. As an example, I work on many web apps that all use SvelteKit and I need to download and store the entire SvelteKit package every time for each project (<a href="https://pkg-size.dev/@sveltejs%2Fkit" rel="nofollow">36MB</a>). Add on the extra frameworks that I use, and that number starts to add up pretty quickly to a couple hundred megabytes.</p>
<h4 dir="auto">Desired Behaviour</h4>
<p dir="auto">By specifying the <code class="notranslate">install-strategy</code> as <code class="notranslate">globallink</code> all the packages would be installed into a global store. npm would resolve the package requirements of an install command, determine that a package exists within the store which meets the version criteria and links to it instead of downloading it again. If no package in the store meets the criteria, one is simply downloaded.</p>
<p dir="auto">I might be oversimplifying the complexity, but the implementation could be an increase in capability of the <code class="notranslate">linked</code> install strategy, in that the store that it points to is the global store, rather than the local one.</p>]]></content>
        <author>
            <name>TheBrenny</name>
            <email>TheBrenny@noreply.github.com</email>
            <uri>https://github.com/TheBrenny</uri>
        </author>
        <published>2025-04-22T14:49:28.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA["Accountaccess-securityissues"]]></title>
        <id>https://github.com/npm/rfcs/issues/816</id>
        <link href="https://github.com/npm/rfcs/issues/816"/>
        <updated>2025-04-21T14:14:38.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/208423862?v=4" width="64" height="64" alt=""/><br/><p dir="auto">Cloud. Integration<br>
Financial issues<br>
Educational courses<br>
Passkey  for Google accounts<br>
Google llc and Gmail no access<br>
Play store no access says that my device is not registered to any Google account<br>
Android  Linux [[[pci--xxxx]]] pull all -m "*" and "x" library  not necessarily a PCI violation however stupid and security risk involved with Java IBM and other AI generated llc plan designed for barmateshq project<br>
Broker accounts in teen accounts  cash llc 1 pull request and violation is needed<br>
Cash llc 1 square up payroll terrilynn_deeds iD confirmation<br>
8134323700 pull and restrict security breach<br>
Exchange account needs to be repaired and certificates reinstalled remove all other IT MISS CHAP and MISSIT abuse of power and unauthorized control illegally preformed</p>]]></content>
        <author>
            <name>terri-lynn6023973364</name>
            <email>terri-lynn6023973364@noreply.github.com</email>
            <uri>https://github.com/terri-lynn6023973364</uri>
        </author>
        <published>2025-04-21T14:14:38.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC]+<title>ac.genes]]></title>
        <id>https://github.com/npm/rfcs/issues/814</id>
        <link href="https://github.com/npm/rfcs/issues/814"/>
        <updated>2025-03-07T18:58:22.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/59098342?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>AKayy2020</name>
            <email>AKayy2020@noreply.github.com</email>
            <uri>https://github.com/AKayy2020</uri>
        </author>
        <published>2025-03-07T18:58:22.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC]+<title>]]></title>
        <id>https://github.com/npm/rfcs/issues/813</id>
        <link href="https://github.com/npm/rfcs/issues/813"/>
        <updated>2025-03-07T13:21:31.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/200528382?u=464babfcfd9bd5b46f64dd8b27090fbe9bac2641&v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>journey-110</name>
            <email>journey-110@noreply.github.com</email>
            <uri>https://github.com/journey-110</uri>
        </author>
        <published>2025-03-07T13:21:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC]+<title> is now]]></title>
        <id>https://github.com/npm/rfcs/issues/812</id>
        <link href="https://github.com/npm/rfcs/issues/812"/>
        <updated>2025-03-05T14:35:04.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/59098342?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a<br>
AC92,{bs/$€€+**^}</li>
</ul>]]></content>
        <author>
            <name>AKayy2020</name>
            <email>AKayy2020@noreply.github.com</email>
            <uri>https://github.com/AKayy2020</uri>
        </author>
        <published>2025-03-05T09:45:54.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[FEATURE] Support `npm version --interactive`]]></title>
        <id>https://github.com/npm/rfcs/issues/810</id>
        <link href="https://github.com/npm/rfcs/issues/810"/>
        <updated>2025-01-22T09:57:07.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/32255488?u=ffd79acd05d6d4c1b4f6efa889067f59af8601be&v=4" width="64" height="64" alt=""/><br/><h2 dir="auto">Why</h2>
<p dir="auto">Version bumping in npm currently requires explicitly specifying the version increment (e.g. <code class="notranslate">npm version minor</code>). This makes it challenging to create reusable release scripts in package.json, as the version increment needs to be hardcoded or passed as an argument.</p>
<h2 dir="auto">How</h2>
<h3 dir="auto">Current Behavior</h3>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="npm version minor  # Must specify version increment explicitly"><pre class="notranslate">npm version minor  <span class="pl-c"><span class="pl-c">#</span> Must specify version increment explicitly</span></pre></div>
<h3 dir="auto">Expected Behavior</h3>
<p dir="auto">Would like to add an interactive mode similar to <a href="https://github.com/antfu-collective/bumpp">bumpp</a>:</p>
<div class="highlight highlight-source-json notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="{
  &quot;scripts&quot;: {
    &quot;release&quot;: &quot;npm version --interactive&quot;
  }
}"><pre class="notranslate">{
  <span class="pl-ent">"scripts"</span>: {
    <span class="pl-ent">"release"</span>: <span class="pl-s"><span class="pl-pds">"</span>npm version --interactive<span class="pl-pds">"</span></span>
  }
}</pre></div>
<p dir="auto">Running <code class="notranslate">npm run release</code> would present an interactive CLI prompt:</p>
<div class="highlight highlight-source-shell notranslate position-relative overflow-auto" dir="auto" data-snippet-clipboard-copy-content="? Current version 0.1.0 »
            major 1.0.0
            minor 0.2.0
            patch 0.1.1
&gt;            next 0.1.1
        pre-patch 0.1.1-beta.0
        pre-minor 0.2.0-beta.0
        pre-major 1.0.0-beta.0
            as-is 0.1.0
           custom ..."><pre class="notranslate"><span class="pl-k">?</span> Current version 0.1.0 »
            major 1.0.0
            minor 0.2.0
            patch 0.1.1
<span class="pl-k">&gt;</span>            next 0.1.1
        pre-patch 0.1.1-beta.0
        pre-minor 0.2.0-beta.0
        pre-major 1.0.0-beta.0
            as-is 0.1.0
           custom ...</pre></div>
<p dir="auto">Benefits:</p>
<ul dir="auto">
<li>More intuitive version selection</li>
<li>Reusable release scripts without hardcoding versions</li>
</ul>
<p dir="auto">This would align npm's version bumping workflow with modern CLI tools while maintaining compatibility with existing npm version commands.</p>]]></content>
        <author>
            <name>pacexy</name>
            <email>pacexy@noreply.github.com</email>
            <uri>https://github.com/pacexy</uri>
        </author>
        <published>2025-01-22T09:57:07.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC]  Option to Unpublish Specific Package Versions, Including Those with Dependents]]></title>
        <id>https://github.com/npm/rfcs/issues/805</id>
        <link href="https://github.com/npm/rfcs/issues/805"/>
        <updated>2024-11-14T19:22:14.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/90748009?u=1704cfa80d62e9a232ea9405cf87183f8efb999d&v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<p dir="auto">Currently, npm does not provide maintainers with the ability to unpublish a specific version of a package if the package has dependents, even if the specific version itself has none. This limitation can create issues when a version was mistakenly published, has minimal downloads, or is no longer relevant. Providing maintainers with more control over individual versions would help maintain cleaner and more accurate package registries, reduce user confusion, and empower maintainers to manage their packages effectively without impacting the entire package.</p>
<h3 dir="auto">Example</h3>

<p dir="auto">For instance, in our case, version 5.0.0 of a package was mistakenly published instead of version 4. While the package as a whole has a few dependents, this specific version (5.0.0) has no active dependents, very few downloads(~2), and is no longer in use. If we could unpublish this specific version, it would help prevent unnecessary versions from cluttering the registry and make it easier for users to find the correct, active versions.</p>
<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<p dir="auto">Currently, npm restricts maintainers from unpublishing specific versions of a package when the package has dependents. The only available options are to unpublish the entire package or unpublish versions with no dependents and minimal downloads. This limitation forces maintainers to keep outdated or mistakenly published versions that clutter the registry and complicate package management.</p>
<h4 dir="auto">Desired Behaviour</h4>

<p dir="auto">Allow package maintainers to unpublish a specific version of a package, even if it has dependents, as long as it meets the following criteria:</p>
<ul dir="auto">
<li>The version has a low number of downloads (to be determined by npm’s current metrics).</li>
<li>The version itself has no dependents.</li>
</ul>
<p dir="auto">This change would give maintainers greater control over their packages, allowing them to remove unnecessary versions without affecting the entire package.</p>
<h3 dir="auto">References</h3>

<ul dir="auto">
<li><a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="2608185192" data-permission-text="Title is private" data-url="https://github.com/npm/cli/issues/7875" data-hovercard-type="issue" data-hovercard-url="/npm/cli/issues/7875/hovercard" href="https://github.com/npm/cli/issues/7875">npm/cli#7875</a></li>
</ul>]]></content>
        <author>
            <name>aryamohanan</name>
            <email>aryamohanan@noreply.github.com</email>
            <uri>https://github.com/aryamohanan</uri>
        </author>
        <published>2024-11-13T11:22:26.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC]+<title>]]></title>
        <id>https://github.com/npm/rfcs/issues/804</id>
        <link href="https://github.com/npm/rfcs/issues/804"/>
        <updated>2024-12-05T18:43:20.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/184959426?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>Neop288</name>
            <email>Neop288@noreply.github.com</email>
            <uri>https://github.com/Neop288</uri>
        </author>
        <published>2024-11-07T00:15:00.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Clydonight:codespace-refactored-parakeet-gxxjw7rr76rhgj54ec2a44712528feff6363051f78a77f4863b1004
]]></title>
        <id>https://github.com/npm/rfcs/issues/800</id>
        <link href="https://github.com/npm/rfcs/issues/800"/>
        <updated>2024-10-03T16:11:36.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/23508199?u=a202bd16f80da16e9fcd9de8855946b183760f58&v=4" width="64" height="64" alt=""/><br/><p dir="auto">Clydonight:codespace-refactored-parakeet-gxxjw7rr76rhgj5</p>
<p dir="auto"><em>Originally posted by <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/Clydonight/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/Clydonight">@Clydonight</a> in <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="2362857558" data-permission-text="Title is private" data-url="https://github.com/Clydo1976/Temu-Link-Bot/issues/1" data-hovercard-type="pull_request" data-hovercard-url="/Clydo1976/Temu-Link-Bot/pull/1/hovercard?comment_id=2179215244&amp;comment_type=issue_comment" href="https://github.com/Clydo1976/Temu-Link-Bot/pull/1#issuecomment-2179215244">Clydo1976/Temu-Link-Bot#1 (comment)</a></em></p>]]></content>
        <author>
            <name>Clydonight</name>
            <email>Clydonight@noreply.github.com</email>
            <uri>https://github.com/Clydonight</uri>
        </author>
        <published>2024-10-02T19:03:32.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[{   "stagedVersions": {     "whatever": "other",     "metadata": "we wanna",     "put": "here",     "versions": {       "1.2.3": { "manifest": "data..." },       "1.2.4": { "another": "staged manifest..." }     }   } }I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined.]]></title>
        <id>https://github.com/npm/rfcs/issues/799</id>
        <link href="https://github.com/npm/rfcs/issues/799"/>
        <updated>2024-10-03T16:11:15.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/23508199?u=a202bd16f80da16e9fcd9de8855946b183760f58&v=4" width="64" height="64" alt=""/><br/><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="          I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined."><pre class="notranslate"><code class="notranslate">          I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined.
</code></pre></div>
<p dir="auto"><em>Originally posted by <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/ljharb/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/ljharb">@ljharb</a> in <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="553729996" data-permission-text="Title is private" data-url="https://github.com/npm/rfcs/issues/92" data-hovercard-type="pull_request" data-hovercard-url="/npm/rfcs/pull/92/hovercard?comment_id=586609632&amp;comment_type=issue_comment" href="https://github.com/npm/rfcs/pull/92#issuecomment-586609632">#92 (comment)</a></em></p>]]></content>
        <author>
            <name>Clydonight</name>
            <email>Clydonight@noreply.github.com</email>
            <uri>https://github.com/Clydonight</uri>
        </author>
        <published>2024-09-15T18:37:52.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] Allow packages to declare a schema for what kind of versioning system it uses (Allow use of non-SemVer)]]></title>
        <id>https://github.com/npm/rfcs/issues/794</id>
        <link href="https://github.com/npm/rfcs/issues/794"/>
        <updated>2024-12-07T08:35:15.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/42429413?v=4" width="64" height="64" alt=""/><br/><p dir="auto"><em>Moved from <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="2426736245" data-permission-text="Title is private" data-url="https://github.com/nodejs/node/issues/54016" data-hovercard-type="issue" data-hovercard-url="/nodejs/node/issues/54016/hovercard" href="https://github.com/nodejs/node/issues/54016">nodejs/node#54016</a></em></p>
<h3 dir="auto">What is the problem this feature will solve?</h3>
<p dir="auto">Many popular projects do not use SemVer. Take Microsoft/TypeScript (<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="208164514" data-permission-text="Title is private" data-url="https://github.com/microsoft/TypeScript/issues/14116" data-hovercard-type="issue" data-hovercard-url="/microsoft/TypeScript/issues/14116/hovercard" href="https://github.com/microsoft/TypeScript/issues/14116">microsoft/TypeScript#14116</a>) or jashkenas's packages (<a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="35711853" data-permission-text="Title is private" data-url="https://github.com/jashkenas/underscore/issues/1684" data-hovercard-type="issue" data-hovercard-url="/jashkenas/underscore/issues/1684/hovercard" href="https://github.com/jashkenas/underscore/issues/1684">jashkenas/underscore#1684</a>). These package maintainers do not follow the implicit contract of using SemVer, sometimes due to fundamental opposition to SemVer itself (<a href="https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e">https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e</a>).<br>
This leads to friction among users:</p>
<blockquote>
<p dir="auto">I'm concerned that not following semver is creating unnecessary friction for TypeScript consumers who are opted in to having their builds broken whenever TypeScript releases a minor version as npm locks down to only major versions by default.<br>
– <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="208164514" data-permission-text="Title is private" data-url="https://github.com/microsoft/TypeScript/issues/14116" data-hovercard-type="issue" data-hovercard-url="/microsoft/TypeScript/issues/14116/hovercard?comment_id=292387172&amp;comment_type=issue_comment" href="https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292387172">microsoft/TypeScript#14116 (comment)</a></p>
</blockquote>
<p dir="auto">The obvious solution is just to go "not npn's problem - they should be using Semver!" - but that's not going to happen.<br>
We as package consumers are stuck with having to be aware that many critical packages do not follow the expected semantics of SemVer.</p>
<h3 dir="auto">What is the feature you are proposing to solve the problem?</h3>
<p dir="auto">Therefore, npm should have a built-in solution for allowing package maintainers to decouple themselves from SemVer.</p>
<p dir="auto">My proposal is to have an entry in <code class="notranslate">package.json</code> that defines what Versioning schema the package shall use.</p>
<p dir="auto">I have a drafted schema definition file<a href="https://github.com/Nixinova/VersioningSchema/blob/main/schema.json"> (schema.json)</a> that defines aspects such segment types, ordering, and which digit increments represent breaking changes.<br>
The default position of package.json would obviously be the use of SemVer, which I have a drafted schema for <a href="https://github.com/Nixinova/VersioningSchema/blob/main/examples/semver.schema.json">(semver.schema.json)</a>.<br>
These drafted schemas could be adapted and maintained by npm to allow an official API for package maintainers to create their own versioning schemas to use in their projects.</p>
<p dir="auto">This versioning schema would then be checked when installing a version from a range declared in the package.json (like <code class="notranslate">package@^2.3.0</code>), where the semantics for <code class="notranslate">^</code> are "the highest non-breaking version after or including 2.3.0", with what counts as "non-breaking" defined by the provided schema.</p>
<p dir="auto"><strong>Real world example:</strong></p>
<p dir="auto">If Microsoft declares  that for their <code class="notranslate">typescript</code> package, both the first and second digits represent breaking changes (declared using an in-house versioning schema linked to from package.json) -- then installing <code class="notranslate">^5.2</code> would <strong>not</strong> install version <code class="notranslate">5.5.2</code> (as expected from SemVer semantics), but only install the highest non-breaking version (which would be something like <code class="notranslate">5.2.3</code>).</p>
<h3 dir="auto">What alternatives have you considered?</h3>
<p dir="auto">"Just use SemVer", but this is not a realistic outcome as us consumers have no way of forcing maintainers like Microsoft to switch from their 'marketing versioning' to use SemVer.</p>
<hr>
<p dir="auto">This is similar in reason to this stale/unseen proposal <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="276430977" data-permission-text="Title is private" data-url="https://github.com/npm/npm/issues/19231" data-hovercard-type="issue" data-hovercard-url="/npm/npm/issues/19231/hovercard" href="https://github.com/npm/npm/issues/19231">npm/npm#19231</a> but goes quite further beyond by allowing the entire semantics of a version to be user-defined instead of just saying which digit is the breaking digit.<br>
Having this functionality be more complicated than just setting a string is better as it would discourage usage of non-semver versioning - this proposal is for package managers that really, really, really don't want to use semver for some reason or another.</p>]]></content>
        <author>
            <name>Nixinova</name>
            <email>Nixinova@noreply.github.com</email>
            <uri>https://github.com/Nixinova</uri>
        </author>
        <published>2024-07-24T12:46:34.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] <title>]]></title>
        <id>https://github.com/npm/rfcs/issues/793</id>
        <link href="https://github.com/npm/rfcs/issues/793"/>
        <updated>2024-12-05T18:55:27.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/91070567?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>harshlad49</name>
            <email>harshlad49@noreply.github.com</email>
            <uri>https://github.com/harshlad49</uri>
        </author>
        <published>2024-07-23T03:50:17.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?]]></title>
        <id>https://github.com/npm/rfcs/issues/790</id>
        <link href="https://github.com/npm/rfcs/issues/790"/>
        <updated>2024-07-16T12:07:55.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/175597890?v=4" width="64" height="64" alt=""/><br/><div class="snippet-clipboard-content notranslate position-relative overflow-auto" data-snippet-clipboard-copy-content="          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?"><pre class="notranslate"><code class="notranslate">          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?
</code></pre></div>
<p dir="auto"><em>Originally posted by <a class="user-mention notranslate" data-hovercard-type="user" data-hovercard-url="/users/dominykas/hovercard" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="https://github.com/dominykas">@dominykas</a> in <a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="553729996" data-permission-text="Title is private" data-url="https://github.com/npm/rfcs/issues/92" data-hovercard-type="pull_request" data-hovercard-url="/npm/rfcs/pull/92/hovercard?comment_id=578555614&amp;comment_type=issue_comment" href="https://github.com/npm/rfcs/pull/92#issuecomment-578555614">#92 (comment)</a></em></p>]]></content>
        <author>
            <name>Marcy336</name>
            <email>Marcy336@noreply.github.com</email>
            <uri>https://github.com/Marcy336</uri>
        </author>
        <published>2024-07-16T12:07:55.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] <title>]]></title>
        <id>https://github.com/npm/rfcs/issues/785</id>
        <link href="https://github.com/npm/rfcs/issues/785"/>
        <updated>2024-06-26T14:31:49.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/141217052?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>hustle-and-finesse</name>
            <email>hustle-and-finesse@noreply.github.com</email>
            <uri>https://github.com/hustle-and-finesse</uri>
        </author>
        <published>2024-06-26T14:31:31.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] <title>]]></title>
        <id>https://github.com/npm/rfcs/issues/784</id>
        <link href="https://github.com/npm/rfcs/issues/784"/>
        <updated>2024-06-26T14:23:25.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/141217052?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>hustle-and-finesse</name>
            <email>hustle-and-finesse@noreply.github.com</email>
            <uri>https://github.com/hustle-and-finesse</uri>
        </author>
        <published>2024-06-26T14:22:27.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] Populate `"engines"` field during `npm init`]]></title>
        <id>https://github.com/npm/rfcs/issues/781</id>
        <link href="https://github.com/npm/rfcs/issues/781"/>
        <updated>2024-06-23T15:15:16.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/79560998?u=1fbd5b05057c4198df9ddcd6218e98a813be0a45&v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<p dir="auto">When packages do not specify a minimum supported Node version, some people may assume that the package supports <em>any</em> version of Node--or at least the ones that their currently-installed version does not error out on.</p>
<p dir="auto">This can lead to semver hazards--a maintainer may inadvertently use a JavaScript builtin (as old as <code class="notranslate">Array#map</code> or as new as <code class="notranslate">Object.hasOwn</code>) or a Node standard library feature that is not supported across all versions of Node. This could be seen as a breaking change, and hence semver-major, but it is very hard for the maintainer to notice.</p>
<p dir="auto">In order to use features that are not supported across all releases of Node in a semver-compatible way, authors must include the <code class="notranslate">"engines"</code> field in their <code class="notranslate">package.json</code>. Currently, however, few do so--probably because it is not included by default.</p>
<h3 dir="auto">Example</h3>
<p dir="auto">See current semver hazard examples:</p>
<ul dir="auto">
<li><a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="2168412759" data-permission-text="Title is private" data-url="https://github.com/indutny/elliptic/issues/314" data-hovercard-type="issue" data-hovercard-url="/indutny/elliptic/issues/314/hovercard" href="https://github.com/indutny/elliptic/issues/314">indutny/elliptic#314</a></li>
<li><a class="issue-link js-issue-link" data-error-text="Failed to load title" data-id="1847341464" data-permission-text="Title is private" data-url="https://github.com/dequelabs/axe-core/issues/4127" data-hovercard-type="issue" data-hovercard-url="/dequelabs/axe-core/issues/4127/hovercard" href="https://github.com/dequelabs/axe-core/issues/4127">dequelabs/axe-core#4127</a></li>
</ul>
<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>
<p dir="auto"><code class="notranslate">npm init</code> does not currently specify any minimum supported Node version.</p>
<h4 dir="auto">Desired Behaviour</h4>
<p dir="auto"><code class="notranslate">npm init</code> should specify a reasonably recent Node version as the minimum supported one in the <code class="notranslate">"engines"</code> field, for some definition of "reasonably recent". The exact timeframe can be bikeshed over, but here are some ideas:</p>
<ul dir="auto">
<li>The version of Node released some number of years ago (this can be longer than the EOL timeframe, since people are sometimes slow to upgrade Node--but do we want to encourage that?)</li>
<li>The earliest LTS non-EOL version of Node</li>
<li>The latest LTS EOL version of Node</li>
</ul>
<h1 dir="auto">Unanswered Questions / Further Work?</h1>
<ul dir="auto">
<li>Does npm currently provide a warning when you depend on a package whose minimum Node version is <em>higher</em> than the one you specify? Could it?</li>
<li>Since the <code class="notranslate">engines</code> field consists of machine-readable semver, should the NPM registry require an <code class="notranslate">engines</code> bump to require a new major version number?</li>
<li>Other runtimes, like bun and deno, now exist as well. An argument could be made that since <em>those</em> engines are likewise not mentioned in <code class="notranslate">package.json</code>, all of their versions must be supported. While their Node compatibility is still work-in-progress and not officially stable (AFAIK), there may come a time when they <em>do</em> reach parity with Node.
<ul dir="auto">
<li>Should maintainers be required to keep up-to-date with all third-party runtimes and e.g. include <code class="notranslate">"bun"</code> and <code class="notranslate">"deno"</code> fields within <code class="notranslate">"engines"</code>? I see this as untenable, both because it is a lot to ask of maintainers and because npm would need an "official" list of all third-party runtimes.</li>
<li>They are the ones implementing APIs that Node is responsible for designing, so should it be their responsibility to map Node versions to the corresponding versions of their own runtimes?</li>
<li>ECMAScript features are another matter entirely. Third-party runtimes could support different subsets of new ECMAScript features from Node. Should they, again, be asked to map Node versions onto versions of their own runtime? Should a cross-runtime "JS support level" field be designed?</li>
</ul>
</li>
</ul>]]></content>
        <author>
            <name>valadaptive</name>
            <email>valadaptive@noreply.github.com</email>
            <uri>https://github.com/valadaptive</uri>
        </author>
        <published>2024-06-23T09:29:56.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] require authentication only once during one single npm publish using workspaces]]></title>
        <id>https://github.com/npm/rfcs/issues/778</id>
        <link href="https://github.com/npm/rfcs/issues/778"/>
        <updated>2024-06-02T20:42:08.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/1135267?u=82bf14abcf63152d090ca75748eb0984fabe911d&v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>
<p dir="auto">I have a lot of mono-repos, which want to be published every once in a while. When using the workspace option to publish multiple packages at once, I get multiple prompts for authentication.</p>
<p dir="auto">Yes, I can check the checkbox in the web-UI to not be prompted within the next 5 minutes, but that is not my intention in this case. I only want to publish the specified packages. The option to not be bothered for 5 minutes also seems like an unnecessary risk for this use-case.</p>
<p dir="auto">I remember, that at least some time ago, lerna was able to publish multiple packages with one OTP prompt. Not sure how they did it, but that was comfortable. Not sure if they still support it though, haven't used it in a while.</p>
<h3 dir="auto">Example</h3>
<p dir="auto">I have a mono-repo with 3 packages.</p>
<ul dir="auto">
<li>I adjust the versions on 2 of them and want to publish them via CLI.</li>
<li>I run <code class="notranslate">npm publish --access public -w pack1 -w pack2</code></li>
<li>I have published my packages successfully</li>
</ul>
<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>
<p dir="auto">When I run <code class="notranslate">npm publish --access public -w pack1 -w pack2</code>, I have two options for authentication:</p>
<ul dir="auto">
<li>open the web-UI authentication link once per package to be released</li>
<li>open the first web-UI authentication link and check the checkbox to not be bothered for the next 5 minutes</li>
</ul>
<h4 dir="auto">Desired Behaviour</h4>
<p dir="auto">When I run <code class="notranslate">npm publish --access public -w pack1 -w pack2</code>, I get only one web-UI authentication link, even if I don't check the checkbox to not be bothered for 5 minutes.</p>
<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>Lusito</name>
            <email>Lusito@noreply.github.com</email>
            <uri>https://github.com/Lusito</uri>
        </author>
        <published>2024-06-02T13:55:49.000Z</published>
    </entry>
    <entry>
        <title type="html"><![CDATA[[RRFC] <title>]]></title>
        <id>https://github.com/npm/rfcs/issues/774</id>
        <link href="https://github.com/npm/rfcs/issues/774"/>
        <updated>2024-12-05T18:55:56.000Z</updated>
        <content type="html"><![CDATA[<img src="https://avatars.githubusercontent.com/u/153218963?v=4" width="64" height="64" alt=""/><br/>
<h2 dir="auto">Motivation ("The Why")</h2>

<h3 dir="auto">Example</h3>

<h3 dir="auto">How</h3>
<h4 dir="auto">Current Behaviour</h4>

<h4 dir="auto">Desired Behaviour</h4>

<h3 dir="auto">References</h3>

<ul dir="auto">
<li>n/a</li>
</ul>]]></content>
        <author>
            <name>ibrahimkhled</name>
            <email>ibrahimkhled@noreply.github.com</email>
            <uri>https://github.com/ibrahimkhled</uri>
        </author>
        <published>2024-05-18T00:16:54.000Z</published>
    </entry>
</feed>