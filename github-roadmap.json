{
    "version": "https://jsonfeed.org/version/1",
    "title": "github/roadmap Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "feed_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "description": "github/roadmap Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions Hosted runners will now include the option to build your own virtual machine image to power your workflows that are run on GitHub Actions. This allows developers to gain control over their supply chain and reduce the average duration of their workflows by customizing the software, tools, and files on Actions Hosted runners before a workflow starts.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">33% of Actions people run are to set up tools/dependencies on their machine before they even start to download images/packages that their application is dependent on. This takes time on every run of that workflow. With custom images developers can now customize those pre-installed tools, saving time by creating a \"pre-warmed\" machine.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">GitHub's image customization allows developers to use their existing workflow YAML to produce images which can be used as the base for their different developer environments. Developers can use the new syntax to take the state of their current environment and save that to an image to be used in future workflows.</p>",
            "url": "https://github.com/github/roadmap/issues/826",
            "title": "Actions: Custom VM Images for GitHub-hosted runners (Beta)",
            "date_modified": "2023-09-14T16:01:58.000Z",
            "date_published": "2023-09-14T16:01:34.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">We are now shipping a few enhancements around Actions environments guarded by \"deployment protection rules\" to make it easy for admins to secure their deployment rollouts.</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><strong>Prevent self-reviews</strong> : Actions environments allows <a href=\"https://docs.github.com/en/actions/reference/environments#required-reviewers\">required reviewers</a> to provide manual approvals to control deployments across environments. Previously, a user could trigger a workflow and also self-approve a deployment that references an environment where they are one of the required reviewers. We are now introducing an option for environment admins to prevent self-reviews and secure their deployments targeting their critical environments. This would require a different approver to review and sign off the deployments, rather than the same user who triggered the run - making the deployments more secure.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Allow deployments only for selected Tag patterns</strong> - Previously we supported <a href=\"https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-branches\">Deployment Branches</a> with \"Selected Branches\" option. We are now enhancing this feature for controlling deployments to an environment based on “selected tag patterns”.</p>\n</li>\n<li>\n<p dir=\"auto\"><strong>Configurable timeout for protection rules</strong> - Currently required reviewers (manual approvals) and other deployment protection rules (including <a href=\"https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#custom-deployment-protection-rules\">custom protection rules</a> that are powered by GitHub Apps) configured on an environment have a default of 30 days, post which the deployments timeout and will be considered as \"failed\" deployments. We are now reducing this default to 5 days and allowing it to be configurable upto 15 days as it will help more controlled deployment rollouts.</p>\n</li>\n</ul>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">These enhancements will help admins to have more secure and controlled deployments across Environments</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Admins who want to have more controlled deployments can now prevent self-reviews, configure Tag patterns to say, allow only Releases/* Tags to deploy to their Production Environment. And also configure that if a reviewer doesn't approve a deployment beyond 5 days, then the deployment would just fail.</p>",
            "url": "https://github.com/github/roadmap/issues/825",
            "title": "Actions: More secure deployments to protected environments",
            "date_modified": "2023-09-14T16:01:57.000Z",
            "date_published": "2023-09-14T16:01:30.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Currently, all status checks configured as \"required\" for a branch in branch protections or repository rules must pass before a pull request can be merged or added to the queue. These same checks must also pass before a change is merged by the queue. Sometimes it's unnecessary to run certain checks in both places, but there's currently no way around this if the status check is required.</p>\n<p dir=\"auto\">There are also cases where different sets of status checks need to be run based on the changes made in the pull request. This is usually done to reduce CI time and cost and ensure only necessary status checks are run. However, a status check that does not always run cannot be configured as required since it would block merging of changes were the check wasn't run.</p>\n<p dir=\"auto\">The solution is giving teams more ways to configure which status checks are required in different contexts and without having to configure a fixed set of status checks upfront.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<ul dir=\"auto\">\n<li>Reduce CI costs by not running unnecessary checks</li>\n<li>Reduce time-to-merge</li>\n<li>Avoid requirement to use custom apps and workflows to rollup and report summary when the set of required checks is variable</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Admins have other options for choosing which status checks are required. For example, one option may be to require all reported status checks must pass.</p>",
            "url": "https://github.com/github/roadmap/issues/824",
            "title": "More control over required status checks for pull requests",
            "date_modified": "2023-09-06T18:09:38.000Z",
            "date_published": "2023-09-06T18:09:07.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">When a user accepts a code snippet that has a match to public code, we will now notify them via a pop-up message and an alert in their Visual Studio Code status bar. Upon clicking the notification, they'll be able to review the sets of repos where matching code exists as well as an aggregate count of the associated licenses.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Last year, we introduced a GitHub Copilot feature that allows developers to silently block suggestions greater than 150 characters that match public code. But the world’s developers have a diverse perspective of wants and needs when they’re building. While simply blocking public code can be useful, a number of developers told us they actually want to see code matches. Some want to learn from other’s code;  some may want to take a package dependency rather than introduce new business logic; still others want to give or receive credit for similar work. With this feature, we hope to enable them to review extra information about the match and make the decision best fit for them.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If GitHub Copilot makes a suggestion matching public code, it’ll share a list of the repositories where that code can be found, and their licenses – all right in the editor. If there’s a match, a pop-up window appears that shows you all of the code matches, what their repository licenses are, and how many repositories—including repositories without licenses—that code appears in, as well as links to those repositories.</p>",
            "url": "https://github.com/github/roadmap/issues/823",
            "title": "Code referencing for code completion in Visual Studio Code",
            "date_modified": "2023-09-06T18:09:37.000Z",
            "date_published": "2023-09-06T18:09:00.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Copilot for Business users will now be able to review updates and changes to their Copilot settings through the <a href=\"https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#accessing-the-audit-log\">audit log</a>.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">With any large organization or enterprise, it's important to be able to trace settings updates and purchases. We want to empower our organization and enterprise admins to be able to investigate any changes to their Copilot for Business account and settings without having to reach out to support.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We'll integrate with the existing audit log feature by emitting relevant events from the Copilot for Business service. These events will include but are not limited to:</p>\n<ul dir=\"auto\">\n<li>Adding Copilot access for a user/team</li>\n<li>Removing Copilot access for a user/team</li>\n<li>Updating the duplicate detection policy</li>\n<li>Updating the seat assignment policy (No members, all org members, select members)</li>\n<li>Updating the chat access policy</li>\n</ul>",
            "url": "https://github.com/github/roadmap/issues/822",
            "title": "Audit Log: Copilot for Business events",
            "date_modified": "2023-09-06T18:09:36.000Z",
            "date_published": "2023-09-06T18:08:58.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Customers can now configure a list of IP address or domains that are allowed to be accessible by GitHub-hosted runners.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">This feature allows platform administrators to control their Enterprise or org-owned GitHub-hosted runners to only access approved destinations while blocking access to everything else giving them control on the network security of their build machines. This also enables teams to run workflows on GitHub-hosted runners that require access to private resources (private artifact repository, on-prem test database, cloud-based storage etc.) as software is deployed.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Platform administrators can enter a range of allowed IPs or domains while configuring a runner group. All runners created as part of that runner group will inherit the outbound allow-list and will only be able to reach the approved destinations.</p>",
            "url": "https://github.com/github/roadmap/issues/821",
            "title": "Actions: Outbound network control for GitHub-hosted runners",
            "date_modified": "2023-09-14T16:01:55.000Z",
            "date_published": "2023-09-06T18:07:30.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">GitHub Actions Importer helps users plan, forecast, and automate the migration of their existing CI/CD pipelines to GitHub Actions. With this update, we will be adding support for Atlassian's CI/CD products: Bamboo Server, Bamboo Data Center, and BitBucket. Users can migrate their Bamboo and BitBucket pipelines to GitHub Actions easily and for free using the official GitHub CLI or our issue ops flow.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<ul dir=\"auto\">\n<li>Simplify the pipeline migration process for Bamboo Server, Bamboo Data Center &amp; BitBucket Pipeline users by automating manual and tedious steps</li>\n<li>Reduce the potential for errors during migration and speed up development teams</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Users will be able to migrate existing Bamboo &amp; BitBucket pipelines to GitHub Actions using the <code class=\"notranslate\">audit</code>, <code class=\"notranslate\">forecast</code>, <code class=\"notranslate\">dry-run</code>, and <code class=\"notranslate\">migrate</code> subcommands of gh actions-importer</p>",
            "url": "https://github.com/github/roadmap/issues/820",
            "title": "GitHub Actions Importer: Bamboo & BitBucket Support",
            "date_modified": "2023-09-19T16:19:37.000Z",
            "date_published": "2023-09-06T18:07:27.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">GitHub launched public betas for both Apple Silicon and more powerful Intel runners in the past calendar year. We are thrilled to announce that our latest macOS runners are now generally available to developers worldwide.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">GitHub Actions makes it easy for developers, teams, and enterprises who need the latest Mac hardware to run workflows on either Apple Silicon (M1) or the latest Intel hardware. Having multiple VM sizes provides the option to choose the right level of performance for your CI/CD workloads.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">To begin using larger macOS runners, you can update the \"runs-on\" key in your Actions workflow to the target runner images that are compatible with the larger runners.</p>",
            "url": "https://github.com/github/roadmap/issues/819",
            "title": "GitHub Actions: macOS Larger Runners (GA)",
            "date_modified": "2023-09-14T16:01:53.000Z",
            "date_published": "2023-09-06T18:07:24.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">We released our <a href=\"https://github.blog/changelog/2023-06-13-enterprise-managed-users-connector-support-for-ping-federate-is-now-in-public-beta\" rel=\"nofollow\">support for Ping Identity's GitHub EMU Connector for Ping Federate in June of this year</a>. We are on track for general availability on 2023-09-06.</p>\n<hr>",
            "url": "https://github.com/github/roadmap/issues/818",
            "title": "Ping Federate Connector for EMU enterprises",
            "date_modified": "2023-09-25T19:13:09.000Z",
            "date_published": "2023-09-06T18:07:21.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">We want to improve the experience for GitHub Enterprise Server administrators by offering a command line interface (CLI) for the <a href=\"https://docs.github.com/en/enterprise-server@latest/rest/enterprise-admin/manage-ghes?apiVersion=2022-11-28\">Manage GitHub Enterprise Server API</a>. This gives administrators control over their Enterprise Server instance without requiring SSH access.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Enterprise Server administrators will be able to manage their instance/s using the CLI, either from on the instance or from an external host.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We will extend the existing <code class=\"notranslate\">gh</code> CLI to include commands for all of the endpoints currently in the <a href=\"https://docs.github.com/en/enterprise-server@3.10/rest/enterprise-admin/manage-ghes?apiVersion=2022-11-28\">Manage GitHub Enterprise Server API</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/817",
            "title": "Create a command line interface for the Manage GitHub Enterprise Server API",
            "date_modified": "2023-09-14T16:01:51.000Z",
            "date_published": "2023-09-06T18:07:18.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Users will be able to view an activity history of their project so that they can view changes to their project items over time. Users will be able to see who performed the action, what the action was, and the timestamp details of when it was performed.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">By providing users with the ability to view an activity history of their project items, we can help them accomplish tasks such as</p>\n<ul dir=\"auto\">\n<li>Knowing what has changed in their project items</li>\n<li>Determining whether a project is still active, or if it is stale and out of date</li>\n<li>Referencing a history of how items have changed in a project, so that if an action was unintended or a mistake they can revert it on their own part</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Users will be able to access the activity history for a project from the project level <code class=\"notranslate\">...</code> menu. This will open a tab that has the events for item changes within a project.</p>",
            "url": "https://github.com/github/roadmap/issues/816",
            "title": "Projects: Activity History",
            "date_modified": "2023-09-14T16:01:51.000Z",
            "date_published": "2023-09-06T18:07:15.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><a href=\"https://projectlombok.org/\" rel=\"nofollow\">Lombok</a> is a commonly used Java framework that is currently not supported by CodeQL. CodeQL will support extracting and scanning projects that use the Lombok framework.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Users that have applications built with Lombok, will be able to extract and scan them.  During the extraction of Lombok code, CodeQL will also extract Java code located in the same files as the Lombok code. The extractions of additional code can lead to the discovery of new alerts.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a Java application is built with Lombok and the CodeQL configuration flag is enabled, CodeQL will automatically scan the application's Java and Lombok framework code.</p>",
            "url": "https://github.com/github/roadmap/issues/815",
            "title": "CodeQL support for Lombok (Java) framework (public beta)",
            "date_modified": "2023-09-06T18:11:25.000Z",
            "date_published": "2023-08-09T19:30:40.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions will add the ability to run your workflow jobs on the latest macOS version from Apple, Ventura.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Apple developers require the latest version of macOS and Xcode to build their software.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\"><strong>How will it work</strong><br>\nUpdate your workflows to include <code class=\"notranslate\">runs-on: macos-13</code> or <code class=\"notranslate\">runs-on: macos-13-xl</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jobs:\n  build:\n    runs-on: macos-13\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\"><pre class=\"notranslate\"><code class=\"notranslate\">jobs:\n  build:\n    runs-on: macos-13\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n</code></pre></div>",
            "url": "https://github.com/github/roadmap/issues/814",
            "title": "Actions: macOS 13 (Ventura) on GitHub-hosted runners (GA) ",
            "date_modified": "2023-09-06T18:11:24.000Z",
            "date_published": "2023-08-09T19:30:37.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions will add the ability to run your workflow jobs on the latest macOS version from Apple.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Apple developers require the latest version of macOS and Xcode to build their software.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Update your workflows to include <code class=\"notranslate\">runs-on: macos-14</code> or <code class=\"notranslate\">runs-on: macos-14-xl</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jobs:\n  build:\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\"><pre class=\"notranslate\"><code class=\"notranslate\">jobs:\n  build:\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n</code></pre></div>",
            "url": "https://github.com/github/roadmap/issues/813",
            "title": "Actions: macOS 14 on GitHub-hosted runners (Public Beta)",
            "date_modified": "2023-09-06T18:11:23.000Z",
            "date_published": "2023-08-09T19:30:34.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Code scanning default setup will automatically attempt to analyze all CodeQL supported languages in a repository. Repositories no longer need to manually choose to include compiled languages in the default setup configuration. If a language fails it will be automatically deselected from the configuration, and the  analysis and any alerts from the successful languages will be available.</p>\n<p dir=\"auto\">This will ship at the repository and organization level.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Code scanning default setup automatically sets up the best possible configuration for your repository to get started easily with CodeQL.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">All CodeQL supported languages will be selected automatically by code scanning default setup, and automatically removed from the configuration if they fail. The \"edit configuration\" page allows users to see which languages are included in the configuration and apply any customization if required.</p>",
            "url": "https://github.com/github/roadmap/issues/812",
            "title": "Code scanning default setup automatically includes all CodeQL supported languages",
            "date_modified": "2023-09-06T18:09:34.000Z",
            "date_published": "2023-08-09T19:28:58.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">New methods for threat modelling in CodeQL will allow any security-minded user to create CodeQL model packs containing models for libraries and frameworks, to help make sure code scanning alerts are relevant to them and their codebases.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">No individual SAST vendor can model all the world’s frameworks and libraries. The out-of-the-box CodeQL threat models provide great coverage for identifying large numbers of potential vulnerabilities in codebases using code scanning. However, there are cases which are not covered by CodeQL's models (e.g, custom-built web frameworks, database libraries) and when a framework is missing, or a taint source/sink is not recognised, then code scanning may miss important results.</p>\n<p dir=\"auto\">With CodeQL model packs, users who are familiar with their project's threat model will be able to add CodeQL support for any Java frameworks that aren't modeled by default to help overcome cases of missing results.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Users will be able to create CodeQL model packs containing data models of the their libraries and frameworks which can easily be included in their code scanning analyses.</p>",
            "url": "https://github.com/github/roadmap/issues/811",
            "title": "Use CodeQL model packs to easily add code scanning support for libraries and frameworks (Java)[beta]",
            "date_modified": "2023-09-25T19:07:40.000Z",
            "date_published": "2023-08-09T19:28:55.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">New CodeQL threat model settings will allow security-minded users to configure additional local sources of taint to use in code scanning if required by their codebase. The first language to support this functionality in CodeQL will be Java.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">No two codebases are the same and each has a different threat model, depending on it has been designed and how it's deployed. For example, one codebase might only consider remote HTTP requests tainted to be potentially untrusted, whereas another might also consider local files to be a source of tainted user data. CodeQL can perform security analysis on all such codebases, but it needs to behave slightly differently in each case. If we fail to include types of taint source that are relevant to a codebase, then we may miss important results (false negatives). Conversely, if we include types of taint source that are irrelevant, then we may generate too many results (false positives).</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">With CodeQL threat model settings, code scanning users will be able to configure which types of tainted data to use in code scanning in the UI. CodeQL CLI users will be able to specify threat model settings on the command line.</p>",
            "url": "https://github.com/github/roadmap/issues/810",
            "title": "CodeQL threat models are configurable in order to enable/disable sources of taint in code scanning (Java)[beta]",
            "date_modified": "2023-09-06T18:09:32.000Z",
            "date_published": "2023-08-09T19:28:52.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The audit log API endpoint will impose a rate limit of 15 queries per minute per enterprise or org starting August 1st, 2023. To prepare for this change, Enterprises and Organizations currently exceeding this limit should ensure individuals, applications and integrations querying the audit log API:</p>\n<ul dir=\"auto\">\n<li>Query at a maximum frequency of 15 queries per minute, and/or;</li>\n<li>Honor HTTP 429 and HTTP 403 responses, as outline in our documentation for <a href=\"https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limiting\">rate limits for requests from personal accounts</a> and <a href=\"https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/rate-limits-for-github-apps\">rate limits for GitHub Apps</a></li>\n</ul>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">A high-quality audit log is an essential tool used by enterprises to ensure compliance, maintain security, investigate issues, and promote accountability. To support these objectives, the audit log API needs to be highly reliable, consistently available, and extremely scalable. The new rate limit safeguards the audit log APIs availability and scalability by providing back pressure to individuals, applications, or integrations querying the audit log APIs.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">When the 15 query per minute rate limit is exceeded, the audit log API will return either a HTTP 429 or HTTP 403 response indicating that a rate limit has been reached. When these responses are received, the querying entity should wait at least 4 seconds before attempting to query the audit log API again.</p>",
            "url": "https://github.com/github/roadmap/issues/809",
            "title": "New rate limit for the audit log API endpoints",
            "date_modified": "2023-09-06T18:09:32.000Z",
            "date_published": "2023-08-09T19:24:22.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">SAML single sign-on (SSO) gives organization owners and enterprise owners a way to control and secure access to organization resources like repositories, issues, and pull requests. Organization owners can invite your personal account to join their organization that uses SAML SSO, which allows you to contribute to the organization and retain your existing identity and contributions on GitHub - while also enforcing a SAML SSO check to access the organization's resources.</p>\n<p dir=\"auto\">This feature augments existing audit log events with the SAML identity associated with the user who took the relevant action. In doing so, customers using GitHub Enterprise will be able to track activity associated with a specific SAML identity in the enterprise and organization audit logs.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Enterprise and Organization owners will be able to track audit log activity associated with specific SAML SSO identities. By providing the SAML SSO identity as part of the audit log, enterprise and organization owners can quickly and easily link logs from multiple sourcing using the same SAML SSO identity identifiers.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">external_identity_nameid</code> or <code class=\"notranslate\">external_identity_username</code>, depending on the IdP provider, will be displayed in all audit log events where the SAML SSO identity is associated with the actor in a SAML enabled organization or enterprise.</p>",
            "url": "https://github.com/github/roadmap/issues/808",
            "title": "SAML SSO identity displayed in enterprise audit log events (public beta)",
            "date_modified": "2023-10-02T18:29:03.000Z",
            "date_published": "2023-08-09T19:24:19.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">For git events in the enterprise audit log events where a personal access token (classic), fine-grained personal access token (FGP), OAuth token, SSH key or deploy key was used as the method of authentication, the audit log will contain a hashed rendering of the token or key used for authentication and the <code class=\"notranslate\">programmatic_access_type</code> field describing the type of token/key used for authentication. In doing so, customers will be able to query actions a specific token or key has been used to perform on enterprise assets.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Compromised tokens and keys have the potential to provide threat actors with access to private data. After learning of a compromise, administrators and security professionals want to understand the actions taken using the corrupted key or token. To support Enterprise customers to complete these investigations, we will enhance the audit log data by logging identifiable and queryable authentication  metadata in the audit log for events.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The audit log will display the authentication method using the <code class=\"notranslate\">programmatic_access_type</code> field, as well a SHA256 hash of the token or key used for authentication. Customers will be able to search for a specific <code class=\"notranslate\">hashed_token</code> to identify the specific actions taken using a specific key or token.  This data will be available in the GitHub enterprise account UI, the audit log API, exports and streaming.</p>",
            "url": "https://github.com/github/roadmap/issues/807",
            "title": "Display authentication metadata for git events in audit logs - [Public Beta]",
            "date_modified": "2023-09-06T18:09:29.000Z",
            "date_published": "2023-08-09T19:24:16.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        }
    ]
}