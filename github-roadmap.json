{
    "version": "https://jsonfeed.org/version/1",
    "title": "github/roadmap Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "feed_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "description": "github/roadmap Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Dependency caching is one of the most effective ways to make jobs faster on GitHub Actions.<br>\nHowever, there is no great way to clear caches or debug issues with them. Also while we evict caches at a certain threshold limit, the cache performance can take a hit when the storage is near its quota. This prevents the broad adoption of our caching capability.</p>\n<p dir=\"auto\">We are now enabling a management experience for users to view and monitor their current cache storage usage within a Repository.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<ul dir=\"auto\">\n<li>GitHub Actions enables customers to cache intermediate outputs and dependencies for their workflows. Caching is an effective way to make jobs faster and a management experience for cache usage would further promote its adoption.</li>\n<li>Cache Management makes it easier to debug caching issues and provides greater control over cache usage by enabling users to view and delete existing caches.</li>\n<li>As we expand caching to ES and AE, a self-serve way will reduce support tickets by providing better ways to troubleshoot and debug corrupted caches.</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We will enable cache users to view and monitor their cache usage across all the workflows in their repository using APIs. Org admins would also be able to view the cache usage for each of the repositories in their org using an API.</p>",
            "url": "https://github.com/github/roadmap/issues/472",
            "title": "Actions: Ability to view cache usage (Cloud)",
            "date_modified": "2022-02-09T18:29:42.000Z",
            "date_published": "2022-02-09T18:28:33.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Dependency caching is one of the most effective ways to make jobs faster on GitHub Actions.<br>\nHowever, caches can often go corrupt, and there is no great way to clear caches or debug issues with them. Also while we evict caches at a certain threshold limit, the cache performance can take a hit when the storage is near its quota. All this generates significant support requests and prevents the broad adoption of our caching capability.</p>\n<p dir=\"auto\">We are now enabling a management experience for users to view and delete their existing caches and monitor their current cache storage usage within a Repository.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<ul dir=\"auto\">\n<li>GitHub Actions enables customers to cache intermediate outputs and dependencies for their workflows. Caching is an effective way to make jobs faster and a management experience for cache usage would further promote its adoption.</li>\n<li>Cache Management makes it easier to debug caching issues and provides greater control over cache usage by enabling users to view and delete existing caches.</li>\n<li>As we start supporting caching in ES and AE, a self-serve way will reduce support tickets by providing better ways to troubleshoot and debug corrupted caches.</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Once we enable Cache support in GHES, We will also be enabling a new Management experience (API based) to help cache users to view and monitor their cache usage across all the workflows in their repository.</p>",
            "url": "https://github.com/github/roadmap/issues/471",
            "title": "Actions: Management experience for Cache (Server) ",
            "date_modified": "2022-02-09T18:29:41.000Z",
            "date_published": "2022-02-09T18:28:30.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">In addition to the text log actions will now be able to publish a markdown document that will be displayed on the run summary page.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Actions like test runners, and linters often want to provide a richer experience for their output than is possible with simple text.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">An action author will have a new method in the toolkit that will let them write markdown formatted content to a summary file that is automatically created per action in a job.  On completion of each action the summary file is automatically uploaded and will be displayed on as part of the run summary.</p>",
            "url": "https://github.com/github/roadmap/issues/470",
            "title": "Actions:  Publish custom summary documents (Cloud)",
            "date_modified": "2022-02-09T18:29:40.000Z",
            "date_published": "2022-02-09T18:28:09.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">In addition to the text log actions will now be able to publish a markdown document that will be displayed on the run summary page.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Actions like test runners, and linters often want to provide a richer experience for their output than is possible with simple text.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">An action author will have a new method in the toolkit that will let them write markdown formatted content to a summary file that is automatically created per action in a job. On completion of each action the summary file is automatically uploaded and will be displayed on as part of the run summary.</p>",
            "url": "https://github.com/github/roadmap/issues/469",
            "title": "Actions: Publish custom summary documents (Server)",
            "date_modified": "2022-02-09T18:27:11.000Z",
            "date_published": "2022-02-09T18:26:49.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Starting this February, Visual Studio developers will be able to use GitHub Copilot technical preview by installing an extension from the <a href=\"https://marketplace.visualstudio.com/\" rel=\"nofollow\">marketplace.</a> In all manners, this extension will provide AI-powered autocomplete similar to GitHub Copilot extension already available for <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.copilot\" rel=\"nofollow\">VS Code.</a></p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Using Visual Studio and GitHub Copilot, developers will be able to:</p>\n<ul dir=\"auto\">\n<li>Generate multi-line suggestions based relevant to the context of your file and project.</li>\n<li>Convert comments to code. Write a comment describing the logic you want, and let GitHub Copilot assemble the code for you.</li>\n<li>Cycle through multiple suggestions. Pick the suggestion that best suits your application.</li>\n<li>Work with a broad set of frameworks and languages. The technical preview does especially well for Python, JavaScript, TypeScript, Ruby, Java, and Go, but it understands dozens of languages and can help you find your way around almost anything.</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">After being admitted to the <a href=\"https://copilot.github.com\">GitHub Copilot technical preview</a>, Visual Studio developers should install the GitHub Copilot extension from the <a href=\"https://marketplace.visualstudio.com/\" rel=\"nofollow\">Marketplace.</a> Once installed, you'll be prompted to sign-in with your GitHub identity. After that, all you need to do is type in the code editor! GitHub Copilot will suggest multi-line code completions as you type. Hit \"tab\" to accept a suggestion.</p>\n<p dir=\"auto\">Illustration:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/16976466/151772017-5fd7d4f8-e7f2-46f3-abbf-744610561d82.gif\"><img src=\"https://user-images.githubusercontent.com/16976466/151772017-5fd7d4f8-e7f2-46f3-abbf-744610561d82.gif\" alt=\"Copilot_vs_UE_3\" style=\"max-width: 100%;\"></a><br>\n.</p>",
            "url": "https://github.com/github/roadmap/issues/468",
            "title": "GitHub Copilot extension for Visual Studio (technical preview)",
            "date_modified": "2022-03-08T21:52:41.000Z",
            "date_published": "2022-02-09T18:23:51.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">The dependency graph today uses manifest parsing to understand the set of dependencies in a repository. This approach has some shortcomings: we can't easily support complex dependency systems which use executable code in the build to resolve dependencies (like Gradle), and users of an ecosystem need to wait for GitHub to add support for it.</p>\n<p dir=\"auto\">The dependencies API will allow users to upload details of their dependencies directly, via an API request. It will be designed to work with the output of build tools and package managers. The dependency graph will store this data and, if an ecosystem is supported in the <a href=\"https://github.com/advisories\">advisory database</a>, GitHub will send alerts if/when a vulnerable dependency is present.</p>\n<p dir=\"auto\">This release will be a public beta.</p>",
            "url": "https://github.com/github/roadmap/issues/467",
            "title": "Dependency graph: Dependencies API (Public Beta)",
            "date_modified": "2022-02-09T18:24:19.000Z",
            "date_published": "2022-02-09T18:23:47.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">As part of our ongoing commitment to <a href=\"https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/\" rel=\"nofollow\">npm ecosystem security</a>, we have already rolled out enhanced login verification to all publishers on the npm registry. The next step in securing the accounts of publishers on the registry is to enforce the use of 2FA for all accounts with publishing rights to high-impact packages. The first phase of enforce will be the top 100 packages, by dependents, on February 1 2021.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">All publishers of the top-100 packages by dependents enrolled in mandatory 2FA.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Once mandatory 2FA is enforced accounts with publish rights to the top-100 packages on the registry, by dependents, will have limited access to the registry and npmjs.com until they register a 2FA device.</p>",
            "url": "https://github.com/github/roadmap/issues/466",
            "title": "npm: Mandatory 2FA for top 100 packages",
            "date_modified": "2022-02-15T00:08:49.000Z",
            "date_published": "2022-02-09T18:21:29.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">As part of our ongoing commitment to <a href=\"https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/\" rel=\"nofollow\">npm ecosystem security</a>, we have already rolled out enhanced login verification to all publishers on the npm registry. The next step in securing the accounts of publishers on the registry is to enforce the use of 2FA for all accounts with publishing rights to high-impact packages. The second phase of enforce will be the top 500 packages by dependents.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">All publishers of the top-500 packages by dependents enrolled in enforced 2FA</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Once mandatory 2FA is enforced accounts with publish rights to the top-500 packages on the registry, by dependents, will have limited access to the registry and npmjs.com until they register a 2FA device.</p>",
            "url": "https://github.com/github/roadmap/issues/465",
            "title": "npm: Enforcing 2FA for top 500 packages",
            "date_modified": "2022-02-09T18:29:08.000Z",
            "date_published": "2022-02-09T18:21:27.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">As part of our ongoing commitment to <a href=\"https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/\" rel=\"nofollow\">npm ecosystem security</a>, we have already rolled out enhanced login verification to all publishers on the npm registry. The next step in securing the accounts of publishers on the registry is to enforce the use of 2FA for all accounts with publishing rights to high-impact packages. The third phase in this is to roll out 2FA for all \"High-Impact Projects\".</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">All \"High-Impact Projects\" are enrolled in enforced 2FA</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Once mandatory 2FA is enforced accounts with publish rights to the top-100 packages on the registry, by dependents, will have limited access to the registry and npmjs.com until they register a 2FA device.</p>",
            "url": "https://github.com/github/roadmap/issues/464",
            "title": "npm: Enforcing 2FA for high-impact projects",
            "date_modified": "2022-02-09T18:29:08.000Z",
            "date_published": "2022-02-09T18:21:23.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">As part of our ongoing commitment to <a href=\"https://github.blog/2021-11-15-githubs-commitment-to-npm-ecosystem-security/\" rel=\"nofollow\">npm ecosystem security</a> we are expanding the options for 2FA by implementing <a href=\"https://webauthn.guide/\" rel=\"nofollow\">WebAuthn</a> support on npmjs.com.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">npm account holders will be able to use WebAuthn to add security keys and biometric devices as 2FA sources for authentication to the regisry, publishing of packages, and any other operations that require an addiional factor of authentication.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We will do a complete overhaul of 2FA management on npmjs.com adding support for a variety of 2FA authentication options in npmjs.com account settings. When authenticating through npmjs.com customers will be able to use registered security keys and biometric devices in addition to Authentication Applications, as part of the authentication flow. If an account has enabled 2FA for publishing pacakges they will be propted to visit a unique URL to go through the WebAuthN flow if they do not want to use an Authentication Device (TOTP).</p>\n<p dir=\"auto\">Customers will still be able to use authentication tokens to publish without 2FA if they desire for setting up automated workflows.</p>",
            "url": "https://github.com/github/roadmap/issues/463",
            "title": "npm: Add WebAuthn support",
            "date_modified": "2022-02-09T18:29:07.000Z",
            "date_published": "2022-02-09T18:21:20.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Many GitHub Enterprise Server customers have teams and CI farms located all around the world. The GitHub repository cache will mirror repositories near these clients, reducing latency and bandwidth required to support geographically-distributed teams while also reducing load on the primary instance.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Massive read load from very large CI farms can affect performance on the customer's GitHub Enterprise Server. This degrades the developer experience - fetches, pushes, merges, and even non-Git features can be slowed down when load is high. Also, there's no reason to transmit the same Git data over and over again via a long-haul network link. The repository cache helps customers reduce bandwidth consumed on long, possibly intercontinental networks. It also helps customers serve their CI and automation needs from a dedicated host, reducing the load on the primary GHES and improving the experience for users of the primary.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The repository cache listens to the primary instance (whether that's a single GHES server, a geo-replicated set of instances, or a cluster configuration) for changes to Git data. CI farms and other read-heavy consumers clone and fetch from the cache server instead of the primary instance. Changes are propagated across the network once per cache instance rather than once per client.</p>",
            "url": "https://github.com/github/roadmap/issues/462",
            "title": "Repository cache for GHES",
            "date_modified": "2022-02-09T18:22:30.000Z",
            "date_published": "2022-02-09T18:21:18.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects written in C# 10.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports builds and standard language features up to C# 9</a>. C# 10 has now been released publicly. Updating CodeQL support will allow customers who have adopted C# 10 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains C# 10 code, or if C# has been <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\">configured as a language to be analyzed</a> in the <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#about-code-scanning-configuration\">code scanning workflow</a>, CodeQL will pick up code using C# 10 language features automatically. No further configuration changes are needed. As soon as the analysis is finished, the CodeQL results will then become visible to you in the \"Security\" tab and on pull requests. C# 10 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/461",
            "title": "CodeQL supports C# 10 (Cloud)",
            "date_modified": "2022-02-28T21:51:45.000Z",
            "date_published": "2022-02-09T18:21:14.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> on GitHub Enterprise Server will be able to analyze projects written in C# 10.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports builds and standard language features up to C# 9</a>. C# 10 has now been released publicly. Updating CodeQL support will allow customers who have adopted C# 10 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains C# 10 code, or if C# has been <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#changing-the-languages-that-are-analyzed\">configured as a language to be analyzed</a> in the <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#about-code-scanning-configuration\">code scanning workflow</a>, CodeQL will pick up code using C# 10 language features automatically. No further configuration changes are needed. As soon as the analysis is finished, the CodeQL results will then become visible to you in the \"Security\" tab and on pull requests. C# 10 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> for use with local environments or third-party CI systems. Users of previous GitHub Enterprise Server versions can <a href=\"https://docs.github.com/en/enterprise-server@3.0/admin/advanced-security/configuring-code-scanning-for-your-appliance#configuring-codeql-analysis-on-a-server-without-internet-access\">upgrade CodeQL independently</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/460",
            "title": "CodeQL supports C# 10 (GHES)",
            "date_modified": "2022-02-09T18:22:28.000Z",
            "date_published": "2022-02-09T18:21:11.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://codeql.github.com/docs/codeql-cli/\">CodeQL CLI</a> is a tool used by security researchers and other users of CodeQL's security analysis to create databases and analyze code locally or on third-party CI systems. To ensure trust in the software that we ship, and to help our customers comply with recent executive orders and best practices concerning supply chain security, we are going to digitally sign first-party binaries included in the CodeQL CLI bundle.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Similar to other GitHub tools (e.g. GitHub Desktop), the CodeQL CLI first-party binaries are going to be signed on behalf of GitHub with a valid certificate on Windows systems.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">This change does not affect the functionality provided by the CodeQL CLI. Security checks put in place by customers on Windows systems should no longer flag first-party binaries as unsigned.</p>",
            "url": "https://github.com/github/roadmap/issues/459",
            "title": "The CodeQL CLI Binaries are Digitally Signed",
            "date_modified": "2022-02-09T18:22:27.000Z",
            "date_published": "2022-02-09T18:21:08.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/33528647/144440921-548b9123-b089-464f-93e2-84e64f38bea2.gif\"><img src=\"https://user-images.githubusercontent.com/33528647/144440921-548b9123-b089-464f-93e2-84e64f38bea2.gif\" alt=\"Simulation of Tritanopia colorblindness\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><em>(Simulation of Tritanopia color blindness. Colors are approximate as color blindness varies from person to person)</em></p>\n<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Varying by gender and geography, color blindness can affect on average 5-6% of men and up 0.4% of woman. Roughly 1 in 10,000 people experience Tritanopia color blindness, a condition where a person cannot distinguish between blue and yellow colors. When colorblind users are unable to distinguish between colors in an interface, they are forced to use shape and iconography to interpret meaning. This new theme swaps colors outside of the Tritanopia visible spectrum for alternative colors to make GitHub more inclusive for users with Tritanopia color blindness.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Users with Tritanopia color blindness are able to use github.com with a light and dark theme that uses more colors within their visible spectrum.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">From the <a href=\"https://github.com/settings/appearance\">appearance settings</a> page, a user is able to choose from the light and dark Tritanopia colorblind themes in their preferred theme settings.</p>\n<p dir=\"auto\"><strong>Note:</strong> Themes designed for users with Protanopia &amp; Deuteranopia color blindness are separately available.</p>",
            "url": "https://github.com/github/roadmap/issues/458",
            "title": "Tritanopia Colorblind Theme (beta)",
            "date_modified": "2022-02-09T18:22:26.000Z",
            "date_published": "2022-02-09T18:21:05.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Pull requests typically change multiple files, and understanding the scope of these changes and navigating between files can be difficult for reviewers in the current experience. A tree view will be added to help reviewers quickly navigate to all the files changed in a hierarchical view that reflects the directory structure.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/2503052/143882359-36229a93-36cf-4051-8672-dd821d2631cb.png\"><img src=\"https://user-images.githubusercontent.com/2503052/143882359-36229a93-36cf-4051-8672-dd821d2631cb.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">The goal is to improve the review experience and reduce review time by making it easier for users to quickly understand the scope of the changes before starting their review and by making it easier for users to navigate around the changes in the pull request.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Changed files will be presented in a hierarchical structure on the <strong>Files Changed</strong> tab of the pull request page (replacing the existing <strong>Jump to</strong> drop-down). Clicking a file will scroll to the file's \"diff\" so the user can review and comment.</p>",
            "url": "https://github.com/github/roadmap/issues/457",
            "title": "Tree view for changed files in a pull request (GHES)",
            "date_modified": "2022-02-09T18:22:25.000Z",
            "date_published": "2022-02-09T18:21:02.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Review comments are the primary way reviewers provide feedback to the author and other reviewers during the review phase of a pull request, but currently comments can only be added to the 3 lines before or after a changed line. We intend to allow users to add comments and suggest changes on any line in any file changed in the pull request.</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/2503052/144141747-af9a93b1-13c0-4a90-aa8a-97cca814ac08.png\"><img src=\"https://user-images.githubusercontent.com/2503052/144141747-af9a93b1-13c0-4a90-aa8a-97cca814ac08.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">This will improve the review experience and increase review quality by allowing users to comment on lines that were not changed (but maybe should have been). Users will no longer need to add a comment to a random changed line and reference a line number when providing feedback about missing a change.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">A users can add a comment, reply to a comment, or suggest changes to any line of a changed file, not just the 3 lines surrounding a change.</p>",
            "url": "https://github.com/github/roadmap/issues/456",
            "title": "Commenting on unchanged lines in a pull request (GHES)",
            "date_modified": "2022-02-09T18:22:24.000Z",
            "date_published": "2022-02-09T18:20:59.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Pull Request Merge Queues are already in beta for a select number of customers. With the release, we are making merge queues publicly available to all.</p>\n<p dir=\"auto\">Maintaining a green mainline development branch ensures developers always have a good starting point for bug fixes and new features and because in many workflows, releases are initiated from this branch. When this branch becomes broken, new development and downstream workflows (like release creation, integration testing, deployments, etc) can be disrupted. One of the simplest ways to avoid a broken branch today is by enabling the <code>Require branches to be up-to-date</code> branch protection setting. However, this forces developers to constantly update their pull request branch when another pull request gets merged, which triggers a new round of CI status checks. In a highly active branch, developers may be forced to repeat this process multiple times before they can merge, delaying the delivery of fixes and features.</p>\n<p dir=\"auto\">Pull Request Merge Queue ensures pull requests are merged efficiently, without requiring developers to update their pull request whenever another change lands, all while ensuring the branch remains green.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Improve developer productivity and increase the velocity of changes landing in your busiest branches.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">A developer can add their pull request to the merge queue when:</p>\n<ol dir=\"auto\">\n<li>Merge queue is enabled on a branch via a new branch protection setting, and...</li>\n<li>All merge requirements have been met (e.g. including required reviewer and status check)</li>\n</ol>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/2503052/123290447-48da6580-d4df-11eb-978e-5bda6978ccca.png\"><img src=\"https://user-images.githubusercontent.com/2503052/123290447-48da6580-d4df-11eb-978e-5bda6978ccca.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">Once in the queue, the pull request's changes will be:</p>\n<ol dir=\"auto\">\n<li>validated to ensure it passes all required checks before merging</li>\n<li>merged with the latest version of the branch along with any pull requests ahead of it in the queue</li>\n</ol>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/2503052/123289999-ea14ec00-d4de-11eb-8f85-be6326ad08eb.png\"><img src=\"https://user-images.githubusercontent.com/2503052/123289999-ea14ec00-d4de-11eb-8f85-be6326ad08eb.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>",
            "url": "https://github.com/github/roadmap/issues/455",
            "title": "Pull Request Merge Queue (GHES)",
            "date_modified": "2022-02-09T18:22:23.000Z",
            "date_published": "2022-02-09T18:20:56.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/33528647/151235883-c9dc0802-0f5f-4442-84ba-fe5746a7acaf.png\"><img src=\"https://user-images.githubusercontent.com/33528647/151235883-c9dc0802-0f5f-4442-84ba-fe5746a7acaf.png\" alt=\"GitHub in light high contrast theme\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">We are committed to making GitHub a more accessible and inclusive home for all developers. The new light high contrast theme will join the recently shipped dark high contrast theme. This theme was designed to increase the color contrast between background and foreground elements in order to exceed WCAG 2.1 contrast requirements across github.com.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Github.com is more inclusive to developers whether they experience low vision, another type of visual impairment, or simply prefer the increased legibility of higher contrast between elements.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">From the <a href=\"https://github.com/settings/appearance\">appearance settings</a> page, a user is able to choose the light high contrast theme either as their single theme, or as their day or night theme when synced with their system.</p>",
            "url": "https://github.com/github/roadmap/issues/454",
            "title": "Light high contrast theme",
            "date_modified": "2022-02-09T21:21:19.000Z",
            "date_published": "2022-02-09T18:20:53.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Security overview aggregates security and compliance results. This data is already visible at the organization level - the next step is to make it available at the <a href=\"https://docs.github.com/en/enterprise-cloud@latest/admin/overview/about-enterprise-accounts\">enterprise level</a>.</p>\n<p dir=\"auto\">In its initial (beta) release the enterprise-level security overview will include a repo-centric view of alert aggregates and an alert-centric view of all secret scanning alerts across an enterprise. We will add alert-centric views for Dependabot alerts and code scanning alerts before declaring the view generally available.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Security teams working across many organizations within an enterprise will have a single user interface that they can see all alerts in. In addition, teams that wish to automate actions at the enterprise level will be able to use enterprise-level security enterprise-level APIs for each alert type (e.g., the API already released for <a href=\"https://docs.github.com/en/rest/reference/secret-scanning#list-secret-scanning-alerts-for-an-enterprise\">secret scanning</a>).</p>",
            "url": "https://github.com/github/roadmap/issues/453",
            "title": "Enterprise-level security overview (Cloud)",
            "date_modified": "2022-03-02T21:24:53.000Z",
            "date_published": "2022-02-09T18:20:50.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        }
    ]
}