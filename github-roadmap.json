{
    "version": "https://jsonfeed.org/version/1",
    "title": "github/roadmap Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "feed_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "description": "github/roadmap Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">For repositories with Advanced Security enabled, secret scanning scans for a list of tokens after a push and alerts users of exposed secrets. As a push protection, secret scanning will scan high-confidence tokens (those with a low false positive rate) and block a remote push if secrets are detected, thereby flagging secrets before exposure.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">With a single setting, organizations will be able to scan every <code class=\"notranslate\">git push</code> to their repositories and protect against accidentally committed secrets prior to the push. This addition will help enterprises with Advanced Security enforce compliance and security workflows, more tightly integrate secret scanning services, and reduce the number of opened issues for exposed secrets.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">GitHub will provide a UI for organizations to enable pre-push scanning for high confidence tokens.<br>\nWith push protection enabled, developers within these organizations will have a CLI experience, or an equivalent in other popular developer environments, that notifies them of detected secrets during an attempted push.</p>\n<p dir=\"auto\">Note that this beta will not include support for custom patterns.</p>",
            "url": "https://github.com/github/roadmap/issues/530",
            "title": "Secret scanning as a push protection (server beta)",
            "date_modified": "2022-06-20T18:47:12.000Z",
            "date_published": "2022-06-15T19:44:02.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">In this quarter, the GitHub Mobile app is planning to ship following features:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> View and edit all project (Beta) custom fields</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Load more code lines in PR file changes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Lists on Android</li>\n</ul>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Mobile has the opportunity to become the fastest way to get work done on GitHub and serve as a platform that connects the world’s code with creative and collaborative developers. We would like to make it a more sophisticated experience in helping people get to their work and connect the right people together so that meaningful software is collaborated on Mobile.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<ul dir=\"auto\">\n<li><strong>View and edit project (Beta) custom fields</strong></li>\n</ul>\n<p dir=\"auto\">Continue to improve mobile support for the new GitHub Issues projects. Last quarter we have shipped to ability for users to view new project cards in the issues/PR detailed view and change the \"Status\" of a specific item. This quarter we are working to display all the remaining custom fields in the project card and users would be able to edit any of the fields when they are on the go!</p>\n<ul dir=\"auto\">\n<li><strong>Load more code lines in PR file changes</strong></li>\n</ul>\n<p dir=\"auto\">Mobile will support expanding more lines of code in a file patch to reach parity with dotcom.</p>\n<ul dir=\"auto\">\n<li><strong>Lists on Android</strong></li>\n</ul>\n<p dir=\"auto\">Following the ship on iOS, we will add Lists to Android to help people organize and re-discover their favorite projects on GitHub.</p>",
            "url": "https://github.com/github/roadmap/issues/529",
            "title": "Mobile: Feature updates Q2 2022",
            "date_modified": "2022-06-15T19:44:36.000Z",
            "date_published": "2022-06-15T19:43:45.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Apple developers will get the hardware and performance they need for their CI/CD operations with GitHub-hosted macOS runners powered by Apply silicone in an OSX arm64 runtime. The new runner options will make certain their apps are compatible with past, present, and future software requirements and have the performance they need to increase development velocity.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Developers that want to build and deploy their applications using the latest Apple technologies will be able to do so with ease using GitHub Actions.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">To get started using M1 powered GitHub-hosted macOS runners, create a new GitHub-hosted runner with the desired machine specifications. Then, update the <code class=\"notranslate\">runs-on:</code> key in your Actions workflow YAML to have those jobs target your larger runner.</p>",
            "url": "https://github.com/github/roadmap/issues/528",
            "title": "Actions: GitHub-hosted macOS runners now offer Apple M1 silicon options",
            "date_modified": "2022-06-15T19:43:01.000Z",
            "date_published": "2022-06-15T19:42:37.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">This feature seeks to help enterprise owners analyze how your team works, and help us improve our products by analysing server usage data and sharing this aggregate data with GitHub.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Our goal is to enable customers to get more out of GitHub Enterprise Server and to understand GHES usage using the same insight.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<ul dir=\"auto\">\n<li>GHES customers with GitHub Connect enabled opt into data sharing via the GitHub Connect page on GitHub Enterprise Server.</li>\n<li>Once enabled, Enterprise Server will aggregate high-level server metrics and transmit them to the customer's enterprise account for secure access and storage.</li>\n<li>An audit log entry will be created each time statistics are transmitted from Enterprise Server.</li>\n<li>Customers can access the data via a REST API endpoint or export the data via CSV/JSON via the GitHub Connect page on GitHub.com.</li>\n</ul>\n<p dir=\"auto\">No personally identifiable data or sensitive customer data will be transmitted via this feature.</p>",
            "url": "https://github.com/github/roadmap/issues/527",
            "title": "GitHub Enterprise Server Statistics [GA]",
            "date_modified": "2022-06-15T20:03:56.000Z",
            "date_published": "2022-06-15T19:39:18.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Automatic license sync enables you to manage license usage across your GitHub Enterprise deployments by automatically syncing user licenses from your GitHub Enterprise Server instance to GitHub Enterprise Cloud.</p>\n<p dir=\"auto\">In an effort to reduce enterprise administration of the license sync process, we are making improvements to the matching experience.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">The goal is to provide you with more clarity when viewing license sync results and total licenses consumed, as well as offer a better approach to identifying duplicate users between GitHub Enterprise Server and GitHub Enterprise Cloud.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We will provide the following improvements:</p>\n<ul dir=\"auto\">\n<li>a more robust consumed licenses dataset</li>\n<li>REST endpoints for querying license sync status and the more robust consumed licenses dataset mentioned above</li>\n<li>an enhancement to the license sync matching algorithm whereas the user's GitHub Enterprise Server email address will be compared with SAML metadata on a GitHub Enterprise Cloud user's account<sup><a href=\"#user-content-fn-1-e3a9aec3e929be3dc5bfb155872f9570\" id=\"user-content-fnref-1-e3a9aec3e929be3dc5bfb155872f9570\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>; this new matching logic will be in addition to the existing matching logic we have today</li>\n</ul>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\">Footnotes</h2>\n<ol dir=\"auto\">\n<li id=\"user-content-fn-1-e3a9aec3e929be3dc5bfb155872f9570\">\n<p dir=\"auto\">For customers that use SAML for GitHub Enterprise Cloud and store the user's primary email address as part of the user's SAML metadata, this new functionality will allow for one to one matching with the user's Enterprise Server account.  GitHub.com users will no longer need to add their work email address to their their user account. <a href=\"#user-content-fnref-1-e3a9aec3e929be3dc5bfb155872f9570\" data-footnote-backref=\"\" class=\"data-footnote-backref\" aria-label=\"Back to content\"><g-emoji class=\"g-emoji\" alias=\"leftwards_arrow_with_hook\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/21a9.png\">↩</g-emoji></a></p>\n</li>\n</ol>\n</section>",
            "url": "https://github.com/github/roadmap/issues/526",
            "title": "Automatic user license sync improvements [Public Beta]",
            "date_modified": "2022-06-15T20:03:55.000Z",
            "date_published": "2022-06-15T19:39:15.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Automatic license sync enables you to manage license usage across your GitHub Enterprise deployments by automatically syncing user licenses from your GitHub Enterprise Server instance to GitHub Enterprise Cloud.  Syncing happens on a weekly basis.</p>\n<p dir=\"auto\">In an effort to reduce enterprise administration, we are adding a re-sync button to GitHub Enterprise Server so that enterprise owners can sync license data on demand.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">The goal is to enable enterprise owners to deduplicate users between GitHub Enterprise Server and GitHub Enterprise Cloud by kicking off the license sync process whenever it is convenient.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Enterprise owners can click the re-sync button in GitHub Enterprise Server to transmit license data and run the matching algorithm that deduplicates licenses.</p>",
            "url": "https://github.com/github/roadmap/issues/525",
            "title": "Automatic user license sync re-sync button",
            "date_modified": "2022-06-15T20:03:54.000Z",
            "date_published": "2022-06-15T19:39:12.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">In the UI for a secret scanning alert, users can view a timeline of actions taken on the alert, e.g. if the alert has been closed or reopened.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Admins and security teams can better understand the history of an alert over time.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">When a user changes the state of an alert, the timeline in the UI will update with a new event for that action. Previous state changes will be persisted in the timeline. The <a href=\"https://docs.github.com/en/enterprise-cloud@latest/rest/secret-scanning#list-secret-scanning-alerts-for-a-repository--parameters\">secret scanning API</a> will still show the latest state in the <code class=\"notranslate\">resolution</code> field.</p>",
            "url": "https://github.com/github/roadmap/issues/524",
            "title": "Secret scanning historical timeline for alerts",
            "date_modified": "2022-06-15T20:03:53.000Z",
            "date_published": "2022-06-15T19:39:09.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Users can add a comment when closing a secret scanning alert.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Users can record the context of an alert closure, which security teams can view when auditing resolved alerts.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Users will be able to add an optional comment when closing a secret scanning alert. The secret scanning timeline and REST API will display the comment.</p>",
            "url": "https://github.com/github/roadmap/issues/523",
            "title": "Secret scanning users can comment when closing an alert",
            "date_modified": "2022-06-15T20:03:52.000Z",
            "date_published": "2022-06-15T19:39:06.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Many GitHub Enterprise customers leverages <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/overview\" rel=\"nofollow\">Azure AD Conditional Access</a> to ensure access to their Enterprise SaaS applications are compliant with corporate policies. These access policies include but are not limited to trusted networks, trusted devices, time of day, and geography. Today, AAD already enforces Conditional Access upon web Single Sign-On (SSO) where the user's authentication context is evaluated before completing the SSO exchange. However, GitHub has its own set of credentials that are not managed by AAD: PATs and SSH. These credentials are not subject to CAP evaluation and pose a security gap for our enterprise customers.</p>\n<p dir=\"auto\"><a href=\"https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/configuring-oidc-for-enterprise-managed-users\">This feature is currently in public beta</a> - this issue tracks the GA of the feature.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">This initiative enables customers to centralize their Conditional Access Policy management into their Identity Provider, so that they do not need to manage such policies separately in GitHub. This will both simplify policy management, and greatly extend the scope of policies that can be applied to a GitHub Enterprise - providing them with new security controls out of the box.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Enterprise customers will migrate to or start with the OpenID Connect-based EMU application in the AAD App Gallery, which allows GitHub to trigger CA policy for PATs and SSH keys using the issued refresh token. Once configuration and/or migration has completed, AAD admins can validate their <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/conditional-access/concept-conditional-access-policy-common\" rel=\"nofollow\">Conditional Access policies</a> in their tenant.</p>\n<p dir=\"auto\">Supported conditions are:</p>\n<ul dir=\"auto\">\n<li>IP conditions</li>\n<li>User, group, and application permissions</li>\n</ul>\n<p dir=\"auto\">Due to the nature of PAT and SSH usage, the following condition types will not be considered when re-evaluating CAP:</p>\n<ul dir=\"auto\">\n<li>Device compliance</li>\n<li>Geographic location (GPS)</li>\n<li>Browser or device type</li>\n</ul>",
            "url": "https://github.com/github/roadmap/issues/522",
            "title": "Azure AD (AAD) Conditional Access Support for GHEC EMUs (GA)",
            "date_modified": "2022-06-15T20:03:51.000Z",
            "date_published": "2022-06-15T19:39:03.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><a href=\"https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-saml-single-sign-on-for-your-organization/managing-team-synchronization-for-your-organization\">Team Sync</a> allows you to keep your GitHub Enterprise Cloud teams in sync with security groups managed by your IdP, based on the SAML identities linked to the GitHub personal accounts in your organizations or enterprise.</p>\n<p dir=\"auto\">We will be changing this feature to no longer invite users to orgs in order to add them to the team.  Going forward, <a href=\"https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-saml-single-sign-on-for-your-organization/about-scim-for-organizations\">SCIM</a> will be the management tool for organization memberships, while Team Sync will be used to organize org members into teams.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Enterprise and organization admins should be able to cleanly separate management of organization membership and team membership.  This change will fix the \"unescapable org\" issue that some admins report, where a user who has left an org is constantly re-invited to it because Team Sync is still indicating that they are a member of a team in that org.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Team Sync will check for organization membership before adding a user to a team.  If they are not a member of the organization that owns the team, then they will not receive an invitation to the organization, nor be added to the team.  If they are invited to the org later, via SCIM, then they will be added to the team automatically.</p>",
            "url": "https://github.com/github/roadmap/issues/521",
            "title": "GHEC Team Sync will no longer send out invitations to users removed from an organization",
            "date_modified": "2022-06-15T20:03:50.000Z",
            "date_published": "2022-06-15T19:39:00.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Today, GitHub Enterprise Cloud <a href=\"https://docs.github.com/en/enterprise-cloud@latest/organizations/managing-saml-single-sign-on-for-your-organization/managing-team-synchronization-for-your-organization\">Team Sync</a> for Azure AD requests the <code class=\"notranslate\">Directory.Read.All</code> application permission in order to read the group and user information needed to sync group state into GitHub.  This is an overly broad permission, and Microsoft has released better-scoped <a href=\"https://docs.microsoft.com/en-us/graph/permissions-reference#group-permissions\" rel=\"nofollow\">group permissions</a> that we can use.  For new installations of Team Sync in Azure AD, Team Sync will only request the <code class=\"notranslate\">GroupMember.Read.All</code> application permission, which is restricted to listing group members and their basic information.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Many companies have least-privilege requirements that flag <code class=\"notranslate\">Directory.Read.All</code> as over-privileged, as it grants access to many more resources than just group memberships.  To help GitHub admins comply with these directives, and improve the security posture of our product, we're migrating to this reduced privilege permission.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The required resource access for the Team Sync app will be updated to request the new lower permission.  New installations will request the <code class=\"notranslate\">GroupMember.Read.All</code> while existing installations will continue to work without interruption.  Administrators who wish to reduce the permissions of their existing installation can reinstall the application, or use the <a href=\"https://docs.microsoft.com/en-us/graph/api/serviceprincipal-post-approleassignments?view=graph-rest-1.0&amp;tabs=http\" rel=\"nofollow\">App Role Assignments API</a> to modify the permissions of their existing service principal in place.</p>",
            "url": "https://github.com/github/roadmap/issues/520",
            "title": "GHEC Team Sync with Azure AD requires lesser permissions",
            "date_modified": "2022-06-15T20:03:49.000Z",
            "date_published": "2022-06-15T19:38:57.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Starting with GHES 3.7, enterprise administrators can use SCIM to manage user accounts in their Enterprise Server instance.  Using the API, administrators can create, update, and delete user accounts, and sync group information to map GitHub Team memberships.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Automated user provisioning and group membership management is critical for large-scale installations of GitHub Enterprise Server.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The GHES SCIM API is tested for compatibility with the Azure AD SCIM implementation. Flexible SCIM providers that can match the Azure AD dialect will also be supported, and a Swagger for the API will be published for testing.</p>",
            "url": "https://github.com/github/roadmap/issues/519",
            "title": "GHES: SCIM support for user provisioning and group management",
            "date_modified": "2022-06-15T20:03:48.000Z",
            "date_published": "2022-06-15T19:38:54.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Today, enterprises using the <a href=\"https://docs.github.com/en/enterprise-cloud@latest/admin/identity-and-access-management/using-enterprise-managed-users-for-iam/about-enterprise-managed-users\">Enterprise Managed Users (EMU)</a> feature are hidden entirely on GitHub.com.  Visiting a URL for their repos, orgs, and enterprise pages all result in a 404 if you are not signed in to the EMU enterprise already.</p>\n<p dir=\"auto\">This improvement allows an administrator to replace that 404 page with a redirect to the enterprise's linked IdP in order to SSO.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">The existing 404 behavior prevents unwanted accidental discovery of enterprise resources, but can also make it harder for users to sign in.  By automatically redirecting the user to the linked IdP for SSO, it'll be easier and faster for enterprise users to get access to GitHub.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Enterprise administrators will be able to opt-in to the authentication redirect using their GitHub enterprise settings. The redirect will occur for all of the resources within the enterprise, once enabled. Setting this flag will not change the results of any API responses, whether authenticated or not.</p>",
            "url": "https://github.com/github/roadmap/issues/518",
            "title": "Enterprise Managed Users: Optionally redirect users to SSO when not authenticated",
            "date_modified": "2022-06-15T20:03:47.000Z",
            "date_published": "2022-06-15T19:38:51.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">GitHub will release substantial improvements to searching code, including flexible search syntax, filtering by language and path, smart ranking of results, and rich symbol information and navigation.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Developers frequently need to pause their work to search, discover, navigate, and understand other code. This is particularly challenging when the answers are spread across multiple organizations and repositories. The longer it takes for developers to find what they need, the more context they lose about their work in progress and the more difficult it is to get back into a flow state. GitHub's vision for this roadmap item is to help developers find what they need quickly and intuitively to sustain their context and productivity.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">In December 2021, we released a technology preview of these new capabilities, now with a search index of over 12 million repositories. We encourage you to <a href=\"https://cs.github.com/about\">sign up for it now</a> and <a href=\"https://github.com/github/feedback/discussions/categories/code-search-and-navigation-feedback\">give us your feedback</a>. Using what we're learning from the technology preview, our next step is to graduate its capabilities to GitHub.com proper, replacing its current code search experience. This roadmap item represents the culmination of that effort. Here are a few of the anticipated features:</p>\n<ul dir=\"auto\">\n<li>Easily find what you’re looking for among the top results, with smart ranking and an index that is optimized for code.</li>\n<li>Search for an exact string, with support for substring matches and special characters, or use regular expressions (enclosed in <code class=\"notranslate\">/</code> separators).</li>\n<li>Scope your searches with <code class=\"notranslate\">org:</code> or <code class=\"notranslate\">repo:</code> qualifiers, with auto-completion suggestions in the search box.</li>\n<li>Refine your results using filters like <code class=\"notranslate\">language:</code>, <code class=\"notranslate\">path:</code>, <code class=\"notranslate\">extension:</code>, and Boolean operators (<code class=\"notranslate\">OR</code>, <code class=\"notranslate\">NOT</code>). Search for definitions of a symbol with <code class=\"notranslate\">symbol:</code>.</li>\n<li>Get your bearings quickly with additional features like symbol information for the active scope, find references, jump-to-definition, select-to-search, and more!</li>\n</ul>\n<p dir=\"auto\">This mockup image shows how certain features might look:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/167199532-1c9e3fe1-a6ce-4205-a122-58f766f33a69.png\"><img src=\"https://user-images.githubusercontent.com/1767415/167199532-1c9e3fe1-a6ce-4205-a122-58f766f33a69.png\" alt=\"A mockup image that shows how some of the features might look\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">For more details, visit <a href=\"https://cs.github.com/about/faq\">frequently asked questions</a> of the technology preview and check out the preview's <a href=\"https://cs.github.com/about/syntax\">search syntax</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/517",
            "title": "Powerful new code search capabilities",
            "date_modified": "2022-06-15T19:44:35.000Z",
            "date_published": "2022-05-18T19:27:17.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Pull requests are an important way to keep repositories safe from untrusted code. Using a <a href=\"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule\">branch protection rule</a>, admins can require pull requests and approving reviews before changes can be merged into a target branch. That setup is shown here:</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/163292820-8d7aeba3-29c0-4243-bf40-d88cbbc83827.png\"><img width=\"776\" alt=\"Require pull requests with at least two approvals\" src=\"https://user-images.githubusercontent.com/1767415/163292820-8d7aeba3-29c0-4243-bf40-d88cbbc83827.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">But what if the threat is from someone reviewing the pull request? A bad actor with the right permissions could patch a pull request with malicious code and leave an approving review <em>themselves</em>. Their approval may be all that's needed to merge the code into a mainline branch where it can find its way into production.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">A new branch protection setting will prevent users who push changes to a pull request from being able to approve that pull request (or have their existing approval count). That helps ensure that changes are reviewed by someone other than the person who made them. GitHub initially built this protection for itself to meet <a href=\"https://en.wikipedia.org/wiki/FedRAMP\" rel=\"nofollow\">FedRAMP</a> security requirements. Now that it's baked, we're making it available to customers. This is part of GitHub's overall effort to strengthen repository security.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">To use the feature, <a href=\"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/managing-a-branch-protection-rule\">create or edit a branch protection rule</a>. While editing the rule's settings, it's a best practice to enable the top option, <strong>Require a pull request before merging</strong>, and choose a number of required approvals. Then, enable the new feature by selecting <strong>Ignore approving reviews from pull request contributors</strong>, shown below. Be sure to save the settings.</p>\n<p><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/163297750-e2cf2598-4971-4384-af2a-e708170dab0b.png\"><img width=\"773\" alt=\"image\" src=\"https://user-images.githubusercontent.com/1767415/163297750-e2cf2598-4971-4384-af2a-e708170dab0b.png\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\"><strong>Tip:</strong> it can be frustrating for developers to contribute to a pull request and then discover that they can no longer approve it. To help avoid this, make everyone aware of the policy and ensure that enough people are available to meet the required number of approvals.</p>",
            "url": "https://github.com/github/roadmap/issues/516",
            "title": "Admins can require PR approvals to be from people who didn't contribute to the PR",
            "date_modified": "2022-06-15T19:44:34.000Z",
            "date_published": "2022-05-18T19:27:14.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<h4 dir=\"auto\">Background</h4>\n<p dir=\"auto\">With <a href=\"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/defining-the-mergeability-of-pull-requests/about-protected-branches\">branch protection rules</a>, you can enforce certain workflows or requirements before a collaborator can push changes to a branch in your repository, including merging a pull request into the branch. Some branch protection settings allow exempting certain users, teams, or <strong>GitHub Apps</strong> from specific requirements. This image shows the Hubot GitHub App being enabled to bypass a branch protection setting:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/166243534-88105d99-0ceb-4a65-a3e9-06acf6328619.png\"><img src=\"https://user-images.githubusercontent.com/1767415/166243534-88105d99-0ceb-4a65-a3e9-06acf6328619.png\" alt=\"Image of a GitHub App being enabled to bypass a branch protection setting\" style=\"max-width: 100%;\"></a></p>\n<h4 dir=\"auto\">Problem</h4>\n<p dir=\"auto\">Currently, some branch protection settings allow exempting users and teams, but not GitHub Apps, as shown here:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/166244604-0e04c8e9-ca20-489b-bee6-8ef0b5f3f252.png\"><img src=\"https://user-images.githubusercontent.com/1767415/166244604-0e04c8e9-ca20-489b-bee6-8ef0b5f3f252.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This doesn't allow a repository's automation - often in the form of a GitHub App - to be configured as an exception. For example, when pull requests are required of users, a project's automation would not be able to bypass pull requests to perform a Git <code class=\"notranslate\">push</code>.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">This feature will add support for GitHub Apps as exceptions to any branch protection setting that allows exceptions.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">As shown in the top image above, you will be able to add GitHub Apps to the exception list of any branch protection setting that supports exceptions.</p>\n<p dir=\"auto\">We appreciate feedback on this and other topics in GitHub's <a href=\"https://github.com/github/feedback/discussions/\">public feedback discussions</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/515",
            "title": "GitHub Apps can be added to all branch protection setting exception lists",
            "date_modified": "2022-06-15T19:44:33.000Z",
            "date_published": "2022-05-18T19:27:11.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">This feature will let admins require developers to sign off on commits made through GitHub's web interface, such as when editing a file or merging a pull request. It will also make it easier for developers to complete those signoffs.</p>\n<p dir=\"auto\"><strong>Note:</strong> Signing off on a commit is different than <a href=\"https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits\">signing a commit</a>, such as with a GPG key.</p>\n<h4 dir=\"auto\">Background</h4>\n<p dir=\"auto\">The Git command line interface has a <a href=\"https://git-scm.com/docs/git-commit#Documentation/git-commit.txt--s\" rel=\"nofollow\"><code class=\"notranslate\">--signoff</code></a> option that developers use to sign off on their commits. Many open-source organizations require developers to sign off on changes to affirm their compliance with repository rules and licensing. Git's <code class=\"notranslate\">--signoff</code> option appends a specially formatted line to the commit message, as shown here:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Signed-off-by: Mona Lisa &lt;mona@github.com&gt;\"><pre class=\"notranslate\"><code>Signed-off-by: Mona Lisa &lt;mona@github.com&gt;\n</code></pre></div>\n<p dir=\"auto\">This text is often called a “DCO signoff” because the most common signoff agreement is the <a href=\"https://developercertificate.org/\" rel=\"nofollow\">Developer Certificate of Origin (DCO)</a> from the Linux Foundation.</p>\n<h4 dir=\"auto\">Problems</h4>\n<p dir=\"auto\">Open-source projects often use pull request checks to block commits from being merged unless they're signed off. Here’s an example of a commit being blocked in the open-source <a href=\"https://github.com/gradle/gradle-profiler/\">Gradle Profiler</a> repository which requires DCO signoffs:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/166159897-49cfbbc0-c7be-4efb-ab14-15d5a7bf5659.png\"><img src=\"https://user-images.githubusercontent.com/1767415/166159897-49cfbbc0-c7be-4efb-ab14-15d5a7bf5659.png\" alt=\"A pull request check that failed because a commit was not signed off\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">This problem is more likely when committing from GitHub's web interface where Git’s <code class=\"notranslate\">--signoff</code> option isn't available. To sign off there, developers must manually add the <code class=\"notranslate\">Signed-off-by:</code> text to their commit message. That's easy to overlook or misformat, resulting in the commit being blocked from merging. Resolving this situation can be complicated and slow developers down, as shown in these instructions to fix one commit:</p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/166236147-8ae48936-5cf4-45be-9429-372900e7ff09.png\"><img src=\"https://user-images.githubusercontent.com/1767415/166236147-8ae48936-5cf4-45be-9429-372900e7ff09.png\" alt=\"Instructions for amending a commit that is not signed off\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">In the words of an open-source contributor:</p>\n<blockquote>\n<p dir=\"auto\">As a pull request reviewer, this is my biggest pain point. If someone forgets to manually sign off on a commit in the web UI, the pull request check fails, and the only resolution is to rebase or squash and force push to fix the commit message. Either way, the review history becomes unclear. This is high friction for new/infrequent contributors and people forget.</p>\n</blockquote>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">This feature will simplify signing off on commits made in GitHub's web interface so that it's easier for developers, fewer commits are blocked from merging, and less time is spent resolving the blocked commits.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<ul dir=\"auto\">\n<li>Admins will be able to toggle a setting that requires developers to sign off on commits made through GitHub's web interface.</li>\n<li>When the setting is enabled, the web interface will inform developers that their action of committing will also constitute signing off. It will look similar to the mocked-up image below. Like using Git's <code class=\"notranslate\">--signoff</code> option on the command line, signing off in GitHub's web interface will automatically append the <code class=\"notranslate\">Signed-off-by:</code> text to the developer's commit message.</li>\n</ul>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/1767415/166171381-b70438c7-928a-4429-8947-610e74178eec.png\"><img src=\"https://user-images.githubusercontent.com/1767415/166171381-b70438c7-928a-4429-8947-610e74178eec.png\" alt=\"GitHub's web interface for committing will inform developers that they are also signing off when they commit\" style=\"max-width: 100%;\"></a></p>\n<h3 dir=\"auto\">Other information</h3>\n<p dir=\"auto\">Related to this feature, GitHub is planning a repository protection that blocks commits that aren't signed off, whether the commits are made in GitHub's web interface or pushed from the command line or another Git client.</p>\n<p dir=\"auto\">We appreciate feedback on this and other topics in GitHub's <a href=\"https://github.com/github/feedback/discussions/\">public feedback discussions</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/514",
            "title": "Admins can require that developers sign off on commits made in the web interface",
            "date_modified": "2022-06-15T19:44:32.000Z",
            "date_published": "2022-05-18T19:27:08.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions will add the ability to run your workflow jobs on the latest macOS version from Apple, Monterey.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Run your Actions workflow jobs on the latest iteration of Apple's macOS platform.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Update your workflow jobs to include <code class=\"notranslate\">runs-on: macos-12</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jobs:\n  build:\n    runs-on: macos-12\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\"><pre class=\"notranslate\"><code>jobs:\n  build:\n    runs-on: macos-12\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n</code></pre></div>",
            "url": "https://github.com/github/roadmap/issues/513",
            "title": "Actions: macOS 12 (Monterey) is now generally available for GitHub-hosted runners ",
            "date_modified": "2022-06-15T19:44:31.000Z",
            "date_published": "2022-05-18T19:27:05.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Currently, users can choose to archive a project they are no longer using, we're adding the ability to delete a project.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">When built, this feature will allow users to permanently delete a project.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The ability to delete a project will be available through the project's settings page.</p>",
            "url": "https://github.com/github/roadmap/issues/512",
            "title": "Ability to delete an existing GitHub Project",
            "date_modified": "2022-06-15T19:44:30.000Z",
            "date_published": "2022-05-18T19:27:02.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">We're releasing an explorable archive for all items archived within your GitHub project.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Added the ability to ...</p>\n<ul dir=\"auto\">\n<li>See when an item was archived and by whom</li>\n<li>Explore their archive quickly and easily with the filter bar</li>\n<li>View previously archived draft issues</li>\n<li>Bulk restore or delete items in the archive</li>\n</ul>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Check out a walkthrough of the explorable archive below!</p>\n<details open=\"\" class=\"details-reset border rounded-2\">\n  <summary class=\"px-3 py-2\">\n    <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-device-camera-video\">\n    <path fill-rule=\"evenodd\" d=\"M16 3.75a.75.75 0 00-1.136-.643L11 5.425V4.75A1.75 1.75 0 009.25 3h-7.5A1.75 1.75 0 000 4.75v6.5C0 12.216.784 13 1.75 13h7.5A1.75 1.75 0 0011 11.25v-.675l3.864 2.318A.75.75 0 0016 12.25v-8.5zm-5 5.075l3.5 2.1v-5.85l-3.5 2.1v1.65zM9.5 6.75v-2a.25.25 0 00-.25-.25h-7.5a.25.25 0 00-.25.25v6.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-4.5z\"></path>\n</svg>\n    <span aria-label=\"Video description Archive.Walkthrough.mov\" class=\"m-1\">Archive.Walkthrough.mov</span>\n    <span class=\"dropdown-caret\"></span>\n  </summary>\n\n  <video src=\"https://user-images.githubusercontent.com/16281246/162990380-23748538-bbe6-48fd-991e-1527abc17d92.mov\" data-canonical-src=\"https://user-images.githubusercontent.com/16281246/162990380-23748538-bbe6-48fd-991e-1527abc17d92.mov\" controls=\"controls\" muted=\"muted\" class=\"d-block rounded-bottom-2 border-top width-fit\" style=\"max-height:640px;\">\n\n  </video>\n</details>\n",
            "url": "https://github.com/github/roadmap/issues/511",
            "title": "Explorable archive for Projects ",
            "date_modified": "2022-06-15T19:44:29.000Z",
            "date_published": "2022-05-18T19:26:59.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        }
    ]
}