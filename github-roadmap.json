{
    "version": "https://jsonfeed.org/version/1",
    "title": "github/roadmap Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "feed_url": "https://azu.github.io/github-search-rss/github-roadmap.json",
    "description": "github/roadmap Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\"><a href=\"https://projectlombok.org/\" rel=\"nofollow\">Lombok</a> is a commonly used Java framework that is currently not supported by CodeQL. CodeQL will support extracting and scanning projects that use the Lombok framework.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Users that have applications built with Lombok, will be able to extract and scan them.  During the extraction of Lombok code, CodeQL will also extract Java code located in the same files as the Lombok code. The extractions of additional code can lead to the discovery of new alerts.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a Java application is built with Lombok and the CodeQL configuration flag is enabled, CodeQL will automatically scan the application's Java and Lombok framework code.</p>",
            "url": "https://github.com/github/roadmap/issues/815",
            "title": "CodeQL support for Lombok (Java) framework (public beta)",
            "date_modified": "2023-08-09T19:31:25.000Z",
            "date_published": "2023-08-09T19:30:40.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions will add the ability to run your workflow jobs on the latest macOS version from Apple, Ventura.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Apple developers require the latest version of macOS and Xcode to build their software.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\"><strong>How will it work</strong><br>\nUpdate your workflows to include <code class=\"notranslate\">runs-on: macos-13</code> or <code class=\"notranslate\">runs-on: macos-13-xl</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jobs:\n  build:\n    runs-on: macos-13\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\"><pre class=\"notranslate\"><code class=\"notranslate\">jobs:\n  build:\n    runs-on: macos-13\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n</code></pre></div>",
            "url": "https://github.com/github/roadmap/issues/814",
            "title": "Actions: macOS 13 (Ventura) on GitHub-hosted runners (GA) ",
            "date_modified": "2023-08-09T19:31:23.000Z",
            "date_published": "2023-08-09T19:30:37.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Actions will add the ability to run your workflow jobs on the latest macOS version from Apple.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Apple developers require the latest version of macOS and Xcode to build their software.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Update your workflows to include <code class=\"notranslate\">runs-on: macos-14</code> or <code class=\"notranslate\">runs-on: macos-14-xl</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jobs:\n  build:\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\"><pre class=\"notranslate\"><code class=\"notranslate\">jobs:\n  build:\n    runs-on: macos-14\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build\n        run: swift build\n      - name: Run tests\n        run: swift test\n</code></pre></div>",
            "url": "https://github.com/github/roadmap/issues/813",
            "title": "Actions: macOS 14 on GitHub-hosted runners (Public Beta)",
            "date_modified": "2023-08-09T19:31:22.000Z",
            "date_published": "2023-08-09T19:30:34.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Code scanning default setup will automatically attempt to analyze all CodeQL supported languages in a repository. Repositories no longer need to manually choose to include compiled languages in the default setup configuration. If a language fails it will be automatically deselected from the configuration, and the  analysis and any alerts from the successful languages will be available.</p>\n<p dir=\"auto\">This will ship at the repository and organization level.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Code scanning default setup automatically sets up the best possible configuration for your repository to get started easily with CodeQL.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">All CodeQL supported languages will be selected automatically by code scanning default setup, and automatically removed from the configuration if they fail. The \"edit configuration\" page allows users to see which languages are included in the configuration and apply any customization if required.</p>",
            "url": "https://github.com/github/roadmap/issues/812",
            "title": "Code scanning default setup automatically includes all CodeQL supported languages",
            "date_modified": "2023-08-09T19:29:31.000Z",
            "date_published": "2023-08-09T19:28:58.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">New methods for threat modelling in CodeQL will allow any security-minded user to create CodeQL model packs containing models for libraries and frameworks, to help make sure code scanning alerts are relevant to them and their codebases.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">No individual SAST vendor can model all the worldâ€™s frameworks and libraries. The out-of-the-box CodeQL threat models provide great coverage for identifying large numbers of potential vulnerabilities in codebases using code scanning. However, there are cases which are not covered by CodeQL's models (e.g, custom-built web frameworks, database libraries) and when a framework is missing, or a taint source/sink is not recognised, then code scanning may miss important results.</p>\n<p dir=\"auto\">With CodeQL model packs, users who are familiar with their project's threat model will be able to add CodeQL support for any Java frameworks that aren't modeled by default to help overcome cases of missing results.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Users will be able to create CodeQL model packs containing data models of the their libraries and frameworks which can easily be included in their code scanning analyses.</p>",
            "url": "https://github.com/github/roadmap/issues/811",
            "title": "Use CodeQL model packs to easily add code scanning support for libraries and frameworks (Java)[beta]",
            "date_modified": "2023-08-09T19:29:29.000Z",
            "date_published": "2023-08-09T19:28:55.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">New CodeQL threat model settings will allow security-minded users to configure additional local sources of taint to use in code scanning if required by their codebase. The first language to support this functionality in CodeQL will be Java.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">No two codebases are the same and each has a different threat model, depending on it has been designed and how it's deployed. For example, one codebase might only consider remote HTTP requests tainted to be potentially untrusted, whereas another might also consider local files to be a source of tainted user data. CodeQL can perform security analysis on all such codebases, but it needs to behave slightly differently in each case. If we fail to include types of taint source that are relevant to a codebase, then we may miss important results (false negatives). Conversely, if we include types of taint source that are irrelevant, then we may generate too many results (false positives).</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">With CodeQL threat model settings, code scanning users will be able to configure which types of tainted data to use in code scanning in the UI. CodeQL CLI users will be able to specify threat model settings on the command line.</p>",
            "url": "https://github.com/github/roadmap/issues/810",
            "title": "CodeQL threat models are configurable in order to enable/disable sources of taint in code scanning (Java)[beta]",
            "date_modified": "2023-08-09T19:29:28.000Z",
            "date_published": "2023-08-09T19:28:52.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The audit log API endpoint will impose a rate limit of 15 queries per minute per enterprise or org starting August 1st, 2023. To prepare for this change, Enterprises and Organizations currently exceeding this limit should ensure individuals, applications and integrations querying the audit log API:</p>\n<ul dir=\"auto\">\n<li>Query at a maximum frequency of 15 queries per minute, and/or;</li>\n<li>Honor HTTP 429 and HTTP 403 responses, as outline in our documentation for <a href=\"https://docs.github.com/en/rest/overview/resources-in-the-rest-api?apiVersion=2022-11-28#rate-limiting\">rate limits for requests from personal accounts</a> and <a href=\"https://docs.github.com/en/apps/creating-github-apps/registering-a-github-app/rate-limits-for-github-apps\">rate limits for GitHub Apps</a></li>\n</ul>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">A high-quality audit log is an essential tool used by enterprises to ensure compliance, maintain security, investigate issues, and promote accountability. To support these objectives, the audit log API needs to be highly reliable, consistently available, and extremely scalable. The new rate limit safeguards the audit log APIs availability and scalability by providing back pressure to individuals, applications, or integrations querying the audit log APIs.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">When the 15 query per minute rate limit is exceeded, the audit log API will return either a HTTP 429 or HTTP 403 response indicating that a rate limit has been reached. When these responses are received, the querying entity should wait at least 4 seconds before attempting to query the audit log API again.</p>",
            "url": "https://github.com/github/roadmap/issues/809",
            "title": "New rate limit for the audit log API endpoints",
            "date_modified": "2023-08-09T19:49:22.000Z",
            "date_published": "2023-08-09T19:24:22.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">SAML single sign-on (SSO) gives organization owners and enterprise owners a way to control and secure access to organization resources like repositories, issues, and pull requests. Organization owners can invite your personal account to join their organization that uses SAML SSO, which allows you to contribute to the organization and retain your existing identity and contributions on GitHub - while also enforcing a SAML SSO check to access the organization's resources.</p>\n<p dir=\"auto\">This feature augments existing audit log events with the SAML identity associated with the user who took the relevant action. In doing so, customers using GitHub Enterprise will be able to track activity associated with a specific SAML identity in the enterprise and organization audit logs.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Enterprise and Organization owners will be able to track audit log activity associated with specific SAML SSO identities. By providing the SAML SSO identity as part of the audit log, enterprise and organization owners can quickly and easily link logs from multiple sourcing using the same SAML SSO identity identifiers.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The <code class=\"notranslate\">external_identity_nameid</code> or <code class=\"notranslate\">external_identity_username</code>, depending on the IdP provider, will be displayed in all audit log events where the SAML SSO identity is associated with the actor in a SAML enabled organization or enterprise.</p>",
            "url": "https://github.com/github/roadmap/issues/808",
            "title": "SAML SSO identity displayed in enterprise audit log events (public beta)",
            "date_modified": "2023-08-09T19:25:08.000Z",
            "date_published": "2023-08-09T19:24:19.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">For git events in the enterprise audit log events where a personal access token (classic), fine-grained personal access token (FGP), OAuth token, SSH key or deploy key was used as the method of authentication, the audit log will contain a hashed rendering of the token or key used for authentication and the <code class=\"notranslate\">programmatic_access_type</code> field describing the type of token/key used for authentication. In doing so, customers will be able to query actions a specific token or key has been used to perform on enterprise assets.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Compromised tokens and keys have the potential to provide threat actors with access to private data. After learning of a compromise, administrators and security professionals want to understand the actions taken using the corrupted key or token. To support Enterprise customers to complete these investigations, we will enhance the audit log data by logging identifiable and queryable authentication  metadata in the audit log for events.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">The audit log will display the authentication method using the <code class=\"notranslate\">programmatic_access_type</code> field, as well a SHA256 hash of the token or key used for authentication. Customers will be able to search for a specific <code class=\"notranslate\">hashed_token</code> to identify the specific actions taken using a specific key or token.  This data will be available in the GitHub enterprise account UI, the audit log API, exports and streaming.</p>",
            "url": "https://github.com/github/roadmap/issues/807",
            "title": "Display authentication metadata for git events in audit logs - [Public Beta]",
            "date_modified": "2023-08-09T19:25:06.000Z",
            "date_published": "2023-08-09T19:24:16.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with Go 1.21.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports Go language features up to Go 1.20</a>. Go version 1.21 is due to be released before the end of 2023. Adding support to CodeQL will allow users of Go 1.21 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses Go 1.21 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. Go 1.21 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/806",
            "title": "Code scanning with CodeQL supports Go 1.21",
            "date_modified": "2023-08-09T19:25:05.000Z",
            "date_published": "2023-08-09T19:24:13.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Many of our GHES customers have complained about the amount of time it takes to run backup and restores. These long running backups/restores have impacted our customer's ability to test upcoming releases, and upgrade to a newer version of GHES on a regular cadence.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Our goal with this epic is to identify 2-3 areas that we can tweak/update to show reductions in overall backup/restore times. The exact improvement will vary by customers, based on the size of their data.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">We are going to make improvements in three areas:</p>\n<ol dir=\"auto\">\n<li><strong>Performance environment</strong> - Establish an internal GitHub Enterprise Server environment with datasets large enough to mimic our largest customers' behavior. We will use this to evaluate the performance improvements of specific changes.</li>\n<li><strong>Incremental backups</strong> - Add support for incremental MySQL backups in backup-utils.</li>\n<li><strong>Separate snapshot pruning</strong> - Currently snapshot pruning happens as part of a backup. We are giving customers the option to perform this pruning <em>after</em> a backup completes.</li>\n</ol>",
            "url": "https://github.com/github/roadmap/issues/805",
            "title": "Improve Performance for Backups/Restores of GitHub Enterprise Server",
            "date_modified": "2023-08-30T18:25:21.000Z",
            "date_published": "2023-08-09T19:24:10.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with Java 21.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports Java language features up to Java 20</a>. Java version 21 is due to be released before the end of 2023. Adding support to CodeQL will allow users of Java 21 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses Java 21 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. Java 21 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/804",
            "title": "Code scanning with CodeQL supports Java 21",
            "date_modified": "2023-08-09T19:25:02.000Z",
            "date_published": "2023-08-09T19:24:07.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with Kotlin 2.0.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports Kotlin language features up to Kotlin 1.9</a>. Kotlin version 2.0 is due to be released before the end of 2023. Adding support to CodeQL will allow users of Kotlin 2.0 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses Kotlin 2.0 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. Kotlin 2.0 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/803",
            "title": "Code scanning with CodeQL supports Kotlin 2.0",
            "date_modified": "2023-08-09T19:25:00.000Z",
            "date_published": "2023-08-09T19:24:04.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with Ruby 3.3.</p>\n<p dir=\"auto\">Note: Ruby 3.3 is currently in preview and start of this work is pending a stable release.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports Ruby language features up to and including Ruby 3.2</a> (the latest stable release of the language). Adding support to CodeQL will allow users of Ruby 3.3 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses Ruby 3.3 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. Ruby 3.3 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/802",
            "title": "Code scanning with CodeQL supports Ruby 3.3",
            "date_modified": "2023-08-09T19:24:59.000Z",
            "date_published": "2023-08-09T19:24:01.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with TypeScript 5.2.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports TypeScript language features up to and including TypeScript 5.1</a>. TypeScript version 5.2 is due to be released before the end of 2023. Adding support to CodeQL will allow users of TypeScript 5.2 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses TypeScript 5.2 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. TypeScript 5.2 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/801",
            "title": "Code scanning with CodeQL supports TypeScript 5.2",
            "date_modified": "2023-08-09T19:24:58.000Z",
            "date_published": "2023-08-09T19:23:58.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">The <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning-with-codeql\">CodeQL analysis engine</a> for <a href=\"https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/about-code-scanning\">GitHub code scanning</a> will be able to analyze projects built with Swift 5.9.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Currently, <a href=\"https://codeql.github.com/docs/codeql-overview/supported-languages-and-frameworks/\">CodeQL supports Swift language features up to and including Swift 5.8.1</a>. Swift version 5.9 is due to be released before the end of 2023. Adding support to CodeQL will allow users of Swift 5.9 to benefit from CodeQL's comprehensive security analysis.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">If a project contains code that uses Swift 5.9 language features, CodeQL will be able to scan the code. As soon as the analysis is finished, the CodeQL results will become visible to you in the \"Security\" tab and on pull requests. Swift 5.9 support will also be available through the <a href=\"https://codeql.github.com/docs/codeql-cli/about-the-codeql-cli/\">CodeQL CLI</a> and <a href=\"https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-codeql\" rel=\"nofollow\">CodeQL VS Code extension</a>.</p>",
            "url": "https://github.com/github/roadmap/issues/800",
            "title": "Code scanning with CodeQL supports Swift 5.9",
            "date_modified": "2023-08-09T19:24:57.000Z",
            "date_published": "2023-08-09T19:23:55.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">We are introducing a new feature for repositories called Custom Properties. Think of it as a key-value property store for each repository in which you can store arbitrary data about the repository.</p>\n<ul dir=\"auto\">\n<li>Organization admins can assign key-value metadata to repositories called custom properties</li>\n<li>Properties can be viewed and edited using the UI or API</li>\n<li>Users can search and filter lists of repositories using custom properties</li>\n<li>Organization admins can create rulesets targeting repositories matching custom property queries</li>\n<li>GitHub Advanced Security (GHAS) dashboards (including security risk and coverage) can be filtered using custom properties</li>\n</ul>",
            "url": "https://github.com/github/roadmap/issues/799",
            "title": "Repository Properties",
            "date_modified": "2023-08-09T19:39:32.000Z",
            "date_published": "2023-07-10T19:01:23.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Security teams need more configurability over who can bypass push protection to balance security and developer productivity effectively. By integrating secret scanning's push protection into <a href=\"https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/about-rulesets\">repository rulesets</a>, Application Security teams can provide fine-grained control over which users can approve requested bypasses. Developers will have the ability to request approval from authorized users to push a blocked secret.</p>",
            "url": "https://github.com/github/roadmap/issues/798",
            "title": "Secret scanning push protection bypass rules (beta)",
            "date_modified": "2023-08-09T19:31:21.000Z",
            "date_published": "2023-07-10T18:56:39.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">With ISO 27001 as a foundation, GitHub is able to register as a participant in the Trusted Information Security Assessment Exchange (TISAX).</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">GitHub will achieve TISAX Assessment Level 2 for the assessment objectives and resulting TISAX labels of \"Handling of information with high protection needs\" and \"Data protection\". The outcome of this work is that GitHub Enterprise Cloud customers will be able to use GitHub to develop software while meeting TISAX compliance obligations.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">GitHub GRC has already begun the registration process by registering as a TISAX Participant and we have defined an assessment scope. Next up, GRC is working with to identify a TISAX audit provider and will then undergo a TISAX assessment. The results of GitHub's assessment will then be made available to TISAX partners. Once certified, GitHub will add TISAX to customer facing documentation portals.</p>",
            "url": "https://github.com/github/roadmap/issues/797",
            "title": "TISAX Compliance for Dotcom and GHEC",
            "date_modified": "2023-08-09T19:29:26.000Z",
            "date_published": "2023-07-10T18:54:20.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/67656570?u=71034939d8d88be6d9b9068038dfdc8158fa69c0&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Automatically enable the detection of transitive dependencies for Maven with a one-click set up through a repository's settings.</p>\n<h3 dir=\"auto\">Intended Outcome</h3>\n<p dir=\"auto\">Dependency graph currently does not automatically detect transitive dependencies for Maven. Users can use a GitHub Action to detect and submit these dependencies to the dependency graph, but the discoverability of this action is low and the configuration hurdle can be high. A one-click enablement eliminates these hurdles for users and provides the dependency information they need.</p>\n<h3 dir=\"auto\">How will it work?</h3>\n<p dir=\"auto\">Enabling Maven transitive dependency detection through a repository's settings page will run the <a href=\"https://github.com/marketplace/actions/maven-dependency-tree-dependency-submission\">Maven Dependency Submission Action</a> using dynamic workflows. The repository will show the complete Maven dependencies in the dependency graph, and users will received Dependabot alerts for any known vulnerabilities. Users do not need to configure their own workflow files.</p>\n<p dir=\"auto\">The initial release will be enablement at the repository level only. Future ships will include leveraging other detectors for other ecosystems and organisation-level enablement.</p>",
            "url": "https://github.com/github/roadmap/issues/796",
            "title": "One-click enablement for Maven transitive dependency detection (beta)",
            "date_modified": "2023-08-09T19:29:25.000Z",
            "date_published": "2023-07-10T18:54:17.000Z",
            "author": {
                "name": "github-product-roadmap",
                "url": "https://github.com/github-product-roadmap"
            }
        }
    ]
}