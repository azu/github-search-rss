{
    "version": "https://jsonfeed.org/version/1",
    "title": "npm/rfcs Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/npm-rfcs.json",
    "feed_url": "https://azu.github.io/github-search-rss/npm-rfcs.json",
    "description": "npm/rfcs Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/90748009?u=1704cfa80d62e9a232ea9405cf87183f8efb999d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<p dir=\"auto\">Currently, npm does not provide maintainers with the ability to unpublish a specific version of a package if the package has dependents, even if the specific version itself has none. This limitation can create issues when a version was mistakenly published, has minimal downloads, or is no longer relevant. Providing maintainers with more control over individual versions would help maintain cleaner and more accurate package registries, reduce user confusion, and empower maintainers to manage their packages effectively without impacting the entire package.</p>\n<h3 dir=\"auto\">Example</h3>\n\n<p dir=\"auto\">For instance, in our case, version 5.0.0 of a package was mistakenly published instead of version 4. While the package as a whole has a few dependents, this specific version (5.0.0) has no active dependents, very few downloads(~2), and is no longer in use. If we could unpublish this specific version, it would help prevent unnecessary versions from cluttering the registry and make it easier for users to find the correct, active versions.</p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<p dir=\"auto\">Currently, npm restricts maintainers from unpublishing specific versions of a package when the package has dependents. The only available options are to unpublish the entire package or unpublish versions with no dependents and minimal downloads. This limitation forces maintainers to keep outdated or mistakenly published versions that clutter the registry and complicate package management.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<p dir=\"auto\">Allow package maintainers to unpublish a specific version of a package, even if it has dependents, as long as it meets the following criteria:</p>\n<ul dir=\"auto\">\n<li>The version has a low number of downloads (to be determined by npm’s current metrics).</li>\n<li>The version itself has no dependents.</li>\n</ul>\n<p dir=\"auto\">This change would give maintainers greater control over their packages, allowing them to remove unnecessary versions without affecting the entire package.</p>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2608185192\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/cli/issues/7875\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/cli/issues/7875/hovercard\" href=\"https://github.com/npm/cli/issues/7875\">npm/cli#7875</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/805",
            "title": "[RRFC]  Option to Unpublish Specific Package Versions, Including Those with Dependents",
            "date_modified": "2024-11-14T19:22:14.000Z",
            "date_published": "2024-11-13T11:22:26.000Z",
            "author": {
                "name": "aryamohanan",
                "url": "https://github.com/aryamohanan"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/184959426?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/804",
            "title": "[RRFC]+<title>",
            "date_modified": "2024-11-07T00:15:00.000Z",
            "date_published": "2024-11-07T00:15:00.000Z",
            "author": {
                "name": "Neop288",
                "url": "https://github.com/Neop288"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/23508199?u=a202bd16f80da16e9fcd9de8855946b183760f58&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Clydonight:codespace-refactored-parakeet-gxxjw7rr76rhgj5</p>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Clydonight/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Clydonight\">@Clydonight</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2362857558\" data-permission-text=\"Title is private\" data-url=\"https://github.com/Clydo1976/Temu-Link-Bot/issues/1\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/Clydo1976/Temu-Link-Bot/pull/1/hovercard?comment_id=2179215244&amp;comment_type=issue_comment\" href=\"https://github.com/Clydo1976/Temu-Link-Bot/pull/1#issuecomment-2179215244\">Clydo1976/Temu-Link-Bot#1 (comment)</a></em></p>",
            "url": "https://github.com/npm/rfcs/issues/800",
            "title": "Clydonight:codespace-refactored-parakeet-gxxjw7rr76rhgj54ec2a44712528feff6363051f78a77f4863b1004\n",
            "date_modified": "2024-10-03T16:11:36.000Z",
            "date_published": "2024-10-02T19:03:32.000Z",
            "author": {
                "name": "Clydonight",
                "url": "https://github.com/Clydonight"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/23508199?u=a202bd16f80da16e9fcd9de8855946b183760f58&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"          I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined.\"><pre class=\"notranslate\"><code class=\"notranslate\">          I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined.\n</code></pre></div>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/ljharb/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/ljharb\">@ljharb</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"553729996\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/92\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/92/hovercard?comment_id=586609632&amp;comment_type=issue_comment\" href=\"https://github.com/npm/rfcs/pull/92#issuecomment-586609632\">#92 (comment)</a></em></p>",
            "url": "https://github.com/npm/rfcs/issues/799",
            "title": "{   \"stagedVersions\": {     \"whatever\": \"other\",     \"metadata\": \"we wanna\",     \"put\": \"here\",     \"versions\": {       \"1.2.3\": { \"manifest\": \"data...\" },       \"1.2.4\": { \"another\": \"staged manifest...\" }     }   } }I don’t think it should be possible for anyone but an owner to install a staged build; and ideally with the restrictions Wes outlined.",
            "date_modified": "2024-10-03T16:11:15.000Z",
            "date_published": "2024-09-15T18:37:52.000Z",
            "author": {
                "name": "Clydonight",
                "url": "https://github.com/Clydonight"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/155325576?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h1 dir=\"auto\">installs nvm (Node Version Manager)</h1>\n<p dir=\"auto\">curl -o- <a href=\"https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh\" rel=\"nofollow\">https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.0/install.sh</a> | bash</p>\n<h1 dir=\"auto\">download and install Node.js (you may need to restart the terminal)</h1>\n<p dir=\"auto\">nvm install 20</p>\n<h1 dir=\"auto\">verifies the right Node.js version is in the environment</h1>\n<p dir=\"auto\">node -v # should print <code class=\"notranslate\">v20.17.0</code></p>\n<h1 dir=\"auto\">verifies the right npm version is in the environment</h1>\n<p dir=\"auto\">npm -v # should print <code class=\"notranslate\">10.8.2</code></p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/798",
            "title": "[RRFC] <title>",
            "date_modified": "2024-09-11T09:38:08.000Z",
            "date_published": "2024-09-09T20:39:41.000Z",
            "author": {
                "name": "Johnson1s",
                "url": "https://github.com/Johnson1s"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/42429413?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><em>Moved from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2426736245\" data-permission-text=\"Title is private\" data-url=\"https://github.com/nodejs/node/issues/54016\" data-hovercard-type=\"issue\" data-hovercard-url=\"/nodejs/node/issues/54016/hovercard\" href=\"https://github.com/nodejs/node/issues/54016\">nodejs/node#54016</a></em></p>\n<h3 dir=\"auto\">What is the problem this feature will solve?</h3>\n<p dir=\"auto\">Many popular projects do not use SemVer. Take Microsoft/TypeScript (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"208164514\" data-permission-text=\"Title is private\" data-url=\"https://github.com/microsoft/TypeScript/issues/14116\" data-hovercard-type=\"issue\" data-hovercard-url=\"/microsoft/TypeScript/issues/14116/hovercard\" href=\"https://github.com/microsoft/TypeScript/issues/14116\">microsoft/TypeScript#14116</a>) or jashkenas's packages (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"35711853\" data-permission-text=\"Title is private\" data-url=\"https://github.com/jashkenas/underscore/issues/1684\" data-hovercard-type=\"issue\" data-hovercard-url=\"/jashkenas/underscore/issues/1684/hovercard\" href=\"https://github.com/jashkenas/underscore/issues/1684\">jashkenas/underscore#1684</a>). These package maintainers do not follow the implicit contract of using SemVer, sometimes due to fundamental opposition to SemVer itself (<a href=\"https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e\">https://gist.github.com/jashkenas/cbd2b088e20279ae2c8e</a>).<br>\nThis leads to friction among users:</p>\n<blockquote>\n<p dir=\"auto\">I'm concerned that not following semver is creating unnecessary friction for TypeScript consumers who are opted in to having their builds broken whenever TypeScript releases a minor version as npm locks down to only major versions by default.<br>\n– <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"208164514\" data-permission-text=\"Title is private\" data-url=\"https://github.com/microsoft/TypeScript/issues/14116\" data-hovercard-type=\"issue\" data-hovercard-url=\"/microsoft/TypeScript/issues/14116/hovercard?comment_id=292387172&amp;comment_type=issue_comment\" href=\"https://github.com/microsoft/TypeScript/issues/14116#issuecomment-292387172\">microsoft/TypeScript#14116 (comment)</a></p>\n</blockquote>\n<p dir=\"auto\">The obvious solution is just to go \"not npn's problem - they should be using Semver!\" - but that's not going to happen.<br>\nWe as package consumers are stuck with having to be aware that many critical packages do not follow the expected semantics of SemVer.</p>\n<h3 dir=\"auto\">What is the feature you are proposing to solve the problem?</h3>\n<p dir=\"auto\">Therefore, npm should have a built-in solution for allowing package maintainers to decouple themselves from SemVer.</p>\n<p dir=\"auto\">My proposal is to have an entry in <code class=\"notranslate\">package.json</code> that defines what Versioning schema the package shall use.</p>\n<p dir=\"auto\">I have a drafted schema definition file<a href=\"https://github.com/Nixinova/VersioningSchema/blob/main/schema.json\"> (schema.json)</a> that defines aspects such segment types, ordering, and which digit increments represent breaking changes.<br>\nThe default position of package.json would obviously be the use of SemVer, which I have a drafted schema for <a href=\"https://github.com/Nixinova/VersioningSchema/blob/main/examples/semver.schema.json\">(semver.schema.json)</a>.<br>\nThese drafted schemas could be adapted and maintained by npm to allow an official API for package maintainers to create their own versioning schemas to use in their projects.</p>\n<p dir=\"auto\">This versioning schema would then be checked when installing a version from a range declared in the package.json (like <code class=\"notranslate\">package@^2.3.0</code>), where the semantics for <code class=\"notranslate\">^</code> are \"the highest non-breaking version after or including 2.3.0\", with what counts as \"non-breaking\" defined by the provided schema.</p>\n<p dir=\"auto\"><strong>Real world example:</strong></p>\n<p dir=\"auto\">If Microsoft declares  that for their <code class=\"notranslate\">typescript</code> package, both the first and second digits represent breaking changes (declared using an in-house versioning schema linked to from package.json) -- then installing <code class=\"notranslate\">^5.2</code> would <strong>not</strong> install version <code class=\"notranslate\">5.5.2</code> (as expected from SemVer semantics), but only install the highest non-breaking version (which would be something like <code class=\"notranslate\">5.2.3</code>).</p>\n<h3 dir=\"auto\">What alternatives have you considered?</h3>\n<p dir=\"auto\">\"Just use SemVer\", but this is not a realistic outcome as us consumers have no way of forcing maintainers like Microsoft to switch from their 'marketing versioning' to use SemVer.</p>\n<hr>\n<p dir=\"auto\">This is similar in reason to this stale/unseen proposal <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"276430977\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/npm/issues/19231\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/npm/issues/19231/hovercard\" href=\"https://github.com/npm/npm/issues/19231\">npm/npm#19231</a> but goes quite further beyond by allowing the entire semantics of a version to be user-defined instead of just saying which digit is the breaking digit.<br>\nHaving this functionality be more complicated than just setting a string is better as it would discourage usage of non-semver versioning - this proposal is for package managers that really, really, really don't want to use semver for some reason or another.</p>",
            "url": "https://github.com/npm/rfcs/issues/794",
            "title": "[RRFC] Allow packages to declare a schema for what kind of versioning system it uses (Allow use of non-SemVer)",
            "date_modified": "2024-07-24T12:46:34.000Z",
            "date_published": "2024-07-24T12:46:34.000Z",
            "author": {
                "name": "Nixinova",
                "url": "https://github.com/Nixinova"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/91070567?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/793",
            "title": "[RRFC] <title>",
            "date_modified": "2024-07-23T03:50:17.000Z",
            "date_published": "2024-07-23T03:50:17.000Z",
            "author": {
                "name": "harshlad49",
                "url": "https://github.com/harshlad49"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/175597890?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?\"><pre class=\"notranslate\"><code class=\"notranslate\">          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?\n</code></pre></div>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dominykas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dominykas\">@dominykas</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"553729996\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/92\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/92/hovercard?comment_id=578555614&amp;comment_type=issue_comment\" href=\"https://github.com/npm/rfcs/pull/92#issuecomment-578555614\">#92 (comment)</a></em></p>",
            "url": "https://github.com/npm/rfcs/issues/790",
            "title": "Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?",
            "date_modified": "2024-07-16T12:07:55.000Z",
            "date_published": "2024-07-16T12:07:55.000Z",
            "author": {
                "name": "Marcy336",
                "url": "https://github.com/Marcy336"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141217052?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/785",
            "title": "[RRFC] <title>",
            "date_modified": "2024-06-26T14:31:49.000Z",
            "date_published": "2024-06-26T14:31:31.000Z",
            "author": {
                "name": "hustle-and-finesse",
                "url": "https://github.com/hustle-and-finesse"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/141217052?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/784",
            "title": "[RRFC] <title>",
            "date_modified": "2024-06-26T14:23:25.000Z",
            "date_published": "2024-06-26T14:22:27.000Z",
            "author": {
                "name": "hustle-and-finesse",
                "url": "https://github.com/hustle-and-finesse"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/79560998?u=1fbd5b05057c4198df9ddcd6218e98a813be0a45&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<p dir=\"auto\">When packages do not specify a minimum supported Node version, some people may assume that the package supports <em>any</em> version of Node--or at least the ones that their currently-installed version does not error out on.</p>\n<p dir=\"auto\">This can lead to semver hazards--a maintainer may inadvertently use a JavaScript builtin (as old as <code class=\"notranslate\">Array#map</code> or as new as <code class=\"notranslate\">Object.hasOwn</code>) or a Node standard library feature that is not supported across all versions of Node. This could be seen as a breaking change, and hence semver-major, but it is very hard for the maintainer to notice.</p>\n<p dir=\"auto\">In order to use features that are not supported across all releases of Node in a semver-compatible way, authors must include the <code class=\"notranslate\">\"engines\"</code> field in their <code class=\"notranslate\">package.json</code>. Currently, however, few do so--probably because it is not included by default.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">See current semver hazard examples:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2168412759\" data-permission-text=\"Title is private\" data-url=\"https://github.com/indutny/elliptic/issues/314\" data-hovercard-type=\"issue\" data-hovercard-url=\"/indutny/elliptic/issues/314/hovercard\" href=\"https://github.com/indutny/elliptic/issues/314\">indutny/elliptic#314</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1847341464\" data-permission-text=\"Title is private\" data-url=\"https://github.com/dequelabs/axe-core/issues/4127\" data-hovercard-type=\"issue\" data-hovercard-url=\"/dequelabs/axe-core/issues/4127/hovercard\" href=\"https://github.com/dequelabs/axe-core/issues/4127\">dequelabs/axe-core#4127</a></li>\n</ul>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\"><code class=\"notranslate\">npm init</code> does not currently specify any minimum supported Node version.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\"><code class=\"notranslate\">npm init</code> should specify a reasonably recent Node version as the minimum supported one in the <code class=\"notranslate\">\"engines\"</code> field, for some definition of \"reasonably recent\". The exact timeframe can be bikeshed over, but here are some ideas:</p>\n<ul dir=\"auto\">\n<li>The version of Node released some number of years ago (this can be longer than the EOL timeframe, since people are sometimes slow to upgrade Node--but do we want to encourage that?)</li>\n<li>The earliest LTS non-EOL version of Node</li>\n<li>The latest LTS EOL version of Node</li>\n</ul>\n<h1 dir=\"auto\">Unanswered Questions / Further Work?</h1>\n<ul dir=\"auto\">\n<li>Does npm currently provide a warning when you depend on a package whose minimum Node version is <em>higher</em> than the one you specify? Could it?</li>\n<li>Since the <code class=\"notranslate\">engines</code> field consists of machine-readable semver, should the NPM registry require an <code class=\"notranslate\">engines</code> bump to require a new major version number?</li>\n<li>Other runtimes, like bun and deno, now exist as well. An argument could be made that since <em>those</em> engines are likewise not mentioned in <code class=\"notranslate\">package.json</code>, all of their versions must be supported. While their Node compatibility is still work-in-progress and not officially stable (AFAIK), there may come a time when they <em>do</em> reach parity with Node.\n<ul dir=\"auto\">\n<li>Should maintainers be required to keep up-to-date with all third-party runtimes and e.g. include <code class=\"notranslate\">\"bun\"</code> and <code class=\"notranslate\">\"deno\"</code> fields within <code class=\"notranslate\">\"engines\"</code>? I see this as untenable, both because it is a lot to ask of maintainers and because npm would need an \"official\" list of all third-party runtimes.</li>\n<li>They are the ones implementing APIs that Node is responsible for designing, so should it be their responsibility to map Node versions to the corresponding versions of their own runtimes?</li>\n<li>ECMAScript features are another matter entirely. Third-party runtimes could support different subsets of new ECMAScript features from Node. Should they, again, be asked to map Node versions onto versions of their own runtime? Should a cross-runtime \"JS support level\" field be designed?</li>\n</ul>\n</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/781",
            "title": "[RRFC] Populate `\"engines\"` field during `npm init`",
            "date_modified": "2024-06-23T15:15:16.000Z",
            "date_published": "2024-06-23T09:29:56.000Z",
            "author": {
                "name": "valadaptive",
                "url": "https://github.com/valadaptive"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1135267?u=82bf14abcf63152d090ca75748eb0984fabe911d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">I have a lot of mono-repos, which want to be published every once in a while. When using the workspace option to publish multiple packages at once, I get multiple prompts for authentication.</p>\n<p dir=\"auto\">Yes, I can check the checkbox in the web-UI to not be prompted within the next 5 minutes, but that is not my intention in this case. I only want to publish the specified packages. The option to not be bothered for 5 minutes also seems like an unnecessary risk for this use-case.</p>\n<p dir=\"auto\">I remember, that at least some time ago, lerna was able to publish multiple packages with one OTP prompt. Not sure how they did it, but that was comfortable. Not sure if they still support it though, haven't used it in a while.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">I have a mono-repo with 3 packages.</p>\n<ul dir=\"auto\">\n<li>I adjust the versions on 2 of them and want to publish them via CLI.</li>\n<li>I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code></li>\n<li>I have published my packages successfully</li>\n</ul>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">When I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code>, I have two options for authentication:</p>\n<ul dir=\"auto\">\n<li>open the web-UI authentication link once per package to be released</li>\n<li>open the first web-UI authentication link and check the checkbox to not be bothered for the next 5 minutes</li>\n</ul>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">When I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code>, I get only one web-UI authentication link, even if I don't check the checkbox to not be bothered for 5 minutes.</p>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/778",
            "title": "[RRFC] require authentication only once during one single npm publish using workspaces",
            "date_modified": "2024-06-02T20:42:08.000Z",
            "date_published": "2024-06-02T13:55:49.000Z",
            "author": {
                "name": "Lusito",
                "url": "https://github.com/Lusito"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/153218963?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/774",
            "title": "[RRFC] <title>",
            "date_modified": "2024-05-18T00:16:54.000Z",
            "date_published": "2024-05-18T00:16:54.000Z",
            "author": {
                "name": "ibrahimkhled",
                "url": "https://github.com/ibrahimkhled"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/76838083?u=b2e85d104410195aaebb49b483c514d1ab07eb16&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\"><code class=\"notranslate\">npm completion</code> has worked under Git for Windows <a href=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6\">since 2015</a>. Digging around a bit leads me to believe that back when the decision to explicitly not support Cygwin was made, <a href=\"https://github.com/emigenix/npm_on_cygwin\">it was due to Cygwin behavior with paths</a>. However, <a href=\"https://www.msys2.org/docs/who-is-using-msys2/\" rel=\"nofollow\">Git for Windows is based on MSYS2</a>, which has <a href=\"https://www.msys2.org/docs/filesystem-paths/\" rel=\"nofollow\">automatic path conversion</a> to avoid Win32 programs seeing Unix paths. Cygwin/MSYS programs generally handle Win32 paths fine, but Win32 programs generally need the Unix paths converted before being passed to them. If my research was correct and the reason Cygwin was explicitly not supported was due to path problems, that reason is now gone with MSYS2. Thus, perhaps support for upstream MSYS2 can be considered (Cygwin still doesn't do automatic path conversions AFAICT, users still have to do that manually when passing paths between Cygwin and Win32 programs).</p>\n<h3 dir=\"auto\">Example</h3>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"username@hostname UCRT64 ~\n$ npm completion &gt;&gt; ~/.zshrc\n\nusername@hostname UCRT64 ~\n$\"><pre class=\"notranslate\"><span class=\"pl-c1\">username@hostname UCRT64 ~</span>\n$ <span class=\"pl-s1\">npm completion <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-k\">~</span>/.zshrc</span>\n\n<span class=\"pl-c1\">username@hostname UCRT64 ~</span>\n$</pre></div>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Currently, the Windows check only checks for Git for Windows:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n\nexports.isWindowsShell = isWindowsShell\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">isWindowsShell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">platform</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'win32'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span>\n  <span class=\"pl-c1\">!</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>^MINGW(32|64)$<span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MSYSTEM</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">TERM</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'cygwin'</span>\n\n<span class=\"pl-s1\">exports</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">isWindowsShell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">isWindowsShell</span></pre></div>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">Given that the completion works under Git for Windows, it should also work against its direct upstream, so check for <a href=\"https://www.msys2.org/docs/environments/\" rel=\"nofollow\">its environments</a> as well:</p>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --color -Naur a/lib/utils/is-windows.js b/lib/utils/is-windows.js\n--- a/lib/utils/is-windows.js   2024-05-12 10:11:24.285665400 +0000\n+++ b/lib/utils/is-windows.js   2024-05-12 10:11:36.695333600 +0000\n@@ -1,4 +1,4 @@\n const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n-  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n+  !/^((MSYS)|(MINGW|UCRT|CLANG|CLANGARM)(32|64))$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n\n exports.isWindowsShell = isWindowsShell\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --color -Naur a/lib/utils/is-windows.js b/lib/utils/is-windows.js</span>\n<span class=\"pl-md\">--- a/lib/utils/is-windows.js   2024-05-12 10:11:24.285665400 +0000</span>\n<span class=\"pl-mi1\">+++ b/lib/utils/is-windows.js   2024-05-12 10:11:36.695333600 +0000</span>\n<span class=\"pl-mdr\">@@ -1,4 +1,4 @@</span>\n const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  !/^((MSYS)|(MINGW|UCRT|CLANG|CLANGARM)(32|64))$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'</span>\n\n exports.isWindowsShell = isWindowsShell</pre></div>\n<p dir=\"auto\">As per <a href=\"https://github.com/npm/npm/pull/12366#issuecomment-212160226\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/npm/pull/12366/hovercard\">an old comment</a>:</p>\n<blockquote>\n<p dir=\"auto\">won't merge any patch that's intended to solely change the behavior of npm for Cygwin.</p>\n</blockquote>\n<p dir=\"auto\">I believe this change isn't a change for Cygwin in particular, its merely expanding an existing support a bit. In terms of path handling, there is less difference between Git for Windows and its upstream MSYS2 than there is between MSYS2 and its upstream Cygwin.</p>\n<p dir=\"auto\">As a side note, the current support for Git for Windows does mean that MSYS2 users can already use the completion, but only if they're running the MINGW environment, which uses the MSVCRT runtime. Recently they've <a href=\"https://github.com/msys2/MINGW-packages/issues/13371\" data-hovercard-type=\"issue\" data-hovercard-url=\"/msys2/MINGW-packages/issues/13371/hovercard\">changed the primary suggested environment from MINGW64 to UCRT64</a>, which uses the newer UCRT runtime. An overall harmless change, but it does mean that the completion no longer works.</p>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6/hovercard\" href=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6\">npm/cli@<tt>09498e4</tt></a></li>\n<li><a href=\"https://github.com/emigenix/npm_on_cygwin\">https://github.com/emigenix/npm_on_cygwin</a></li>\n<li><a href=\"https://www.msys2.org/docs/who-is-using-msys2/\" rel=\"nofollow\">https://www.msys2.org/docs/who-is-using-msys2/</a></li>\n<li><a href=\"https://www.msys2.org/docs/filesystem-paths/\" rel=\"nofollow\">https://www.msys2.org/docs/filesystem-paths/</a></li>\n<li><a href=\"https://www.msys2.org/docs/environments/\" rel=\"nofollow\">https://www.msys2.org/docs/environments/</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1393840003\" data-permission-text=\"Title is private\" data-url=\"https://github.com/msys2/MINGW-packages/issues/13371\" data-hovercard-type=\"issue\" data-hovercard-url=\"/msys2/MINGW-packages/issues/13371/hovercard\" href=\"https://github.com/msys2/MINGW-packages/issues/13371\">msys2/MINGW-packages#13371</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/771",
            "title": "[RRFC] Allow `npm completion` under MSYS2",
            "date_modified": "2024-05-12T10:16:44.000Z",
            "date_published": "2024-05-03T14:46:17.000Z",
            "author": {
                "name": "500-internal-server-error",
                "url": "https://github.com/500-internal-server-error"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6381507?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">package.json allows us to use <a href=\"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#engines\" rel=\"nofollow\">engines</a> where we can limit node version.</p>\n<p dir=\"auto\">In CI/CD we often use the pattern when we clone some projects and try to run some tasks from it which requires npm install.</p>\n<p dir=\"auto\">Let's say our pipeline also can accept some parameter such as node version but at the same time we want to enforce a certain rule, when node verrsion of that image should match some version condition.</p>\n<p dir=\"auto\">Currently it is also possible to enforce node version check by use of engines parameter directly in our package.json ( or indirectly via dependent packages ). However let's say if we want to run <code class=\"notranslate\">npm install</code> as it would have something like <code class=\"notranslate\">engines: { node: &gt;20 }</code> we need to  set it manually or at least via <code class=\"notranslate\">npm pkg set engines.node</code> which will modify package.json and it's not perfect for CI/CD procedures where upstream project ideally should stay not touched.</p>\n<p dir=\"auto\">I thought if we would have an option to run something like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npm_config_engines_node='&gt;=18.8` npm i\"><pre class=\"notranslate\"><code class=\"notranslate\">npm_config_engines_node='&gt;=18.8` npm i\n</code></pre></div>\n<p dir=\"auto\">which would enforce engine check as it's declared in package.json<br>\nthen we could enforce engine from command line</p>\n<p dir=\"auto\">What do you think of this?</p>\n<p dir=\"auto\">Thanks!</p>",
            "url": "https://github.com/npm/rfcs/issues/769",
            "title": "[RRFC] allowing to use engines as config variable",
            "date_modified": "2024-04-18T08:32:43.000Z",
            "date_published": "2024-04-18T08:32:43.000Z",
            "author": {
                "name": "ThePlenkov",
                "url": "https://github.com/ThePlenkov"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/153218963?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/768",
            "title": "[RRFC] <title>",
            "date_modified": "2024-04-18T06:04:37.000Z",
            "date_published": "2024-04-18T06:04:37.000Z",
            "author": {
                "name": "ibrahimkhled",
                "url": "https://github.com/ibrahimkhled"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1358764?u=1ad362c0c5a575d7445096391b528283722ce412&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<p dir=\"auto\">Currently, deprecated packages show a short string with some information from the <code class=\"notranslate\">deprecated</code> property. This often includes information about another package to migrate to, either due to a package rename or a fork. Unfortunately, this makes it hard or impossible to automate any sort of migration, in the same way that tools like Dependabot or Renovate can for version upgrades.</p>\n<p dir=\"auto\">Allowing structured data in the <code class=\"notranslate\">deprecated</code> property, with information about a replacement package or packages, would allow these tools to perform package migrations as well as package upgrades.</p>\n<h3 dir=\"auto\">Example</h3>\n\n<p dir=\"auto\">Renovate currently has a manually curated list of these package migrations<sup><a href=\"#user-content-fn-1-1179a2c1a2d5f68d55083d5e8e13351d\" id=\"user-content-fnref-1-1179a2c1a2d5f68d55083d5e8e13351d\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>, and I am discussing whether or not this addition makes sense as part of the Open Source Vulnerability schema<sup><a href=\"#user-content-fn-2-1179a2c1a2d5f68d55083d5e8e13351d\" id=\"user-content-fnref-2-1179a2c1a2d5f68d55083d5e8e13351d\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>. I think there are definitely security applications for deprecated packages that have CVEs, it would also be useful for general package migrations.</p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<p dir=\"auto\">The <code class=\"notranslate\">deprecated</code> property in <code class=\"notranslate\">package.json</code> currently only allows a string or boolean to show some information about what package to migrate to. For example:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  &quot;deprecated&quot;: &quot;No longer supported. Migrate to @example/package-name&quot;\"><pre class=\"notranslate\">  <span class=\"pl-ent\">\"deprecated\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No longer supported. Migrate to @example/package-name<span class=\"pl-pds\">\"</span></span></pre></div>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<p dir=\"auto\">Allowing for structured data in the <code class=\"notranslate\">deprecated</code> property would allow for automation to perform migrations in users code. For example:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  &quot;deprecated&quot;: {\n    &quot;description&quot;: &quot;No longer supported. Migrate to @example/package-name&quot;,\n    &quot;migration&quot;: {\n      &quot;name&quot;: &quot;@example/package-name&quot;,\n      &quot;version&quot;: &quot;2.0.0&quot;\n    }\n  }\"><pre class=\"notranslate\">  <span class=\"pl-ent\">\"deprecated\"</span>: {\n    <span class=\"pl-ent\">\"description\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No longer supported. Migrate to @example/package-name<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"migration\"</span>: {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@example/package-name<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.0.0<span class=\"pl-pds\">\"</span></span>\n    }\n  }</pre></div>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\" dir=\"auto\">Footnotes</h2>\n<ol dir=\"auto\">\n<li id=\"user-content-fn-1-1179a2c1a2d5f68d55083d5e8e13351d\">\n<p dir=\"auto\"><a href=\"https://github.com/renovatebot/renovate/blob/main/lib/config/presets/internal/replacements.ts\">https://github.com/renovatebot/renovate/blob/main/lib/config/presets/internal/replacements.ts</a> <a href=\"#user-content-fnref-1-1179a2c1a2d5f68d55083d5e8e13351d\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2-1179a2c1a2d5f68d55083d5e8e13351d\">\n<p dir=\"auto\"><a href=\"https://github.com/ossf/osv-schema/issues/230\">https://github.com/ossf/osv-schema/issues/230</a> <a href=\"#user-content-fnref-2-1179a2c1a2d5f68d55083d5e8e13351d\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>",
            "url": "https://github.com/npm/rfcs/issues/766",
            "title": "[RRFC] Structured data for `deprecated` packages about migration paths",
            "date_modified": "2024-04-15T22:07:18.000Z",
            "date_published": "2024-04-15T22:07:18.000Z",
            "author": {
                "name": "JamieMagee",
                "url": "https://github.com/JamieMagee"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/7018576?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Npm does not log a line for http redirects on package download, so it is not possible to determine whether failures occur before or after being redirected to make a second request.</p>\n<p dir=\"auto\">Azure Artifacts for example responds with a 303 redirect to Azure blob storage when npm requests a tgz file. If npm were to log a line with a 303 redirect and then another line for the subsequent request to storage, this would significantly improve debugging and allow users to determine if they are having connectivity/availability issues with the package repository or the underlying storage that is getting redirected to.</p>\n<p dir=\"auto\">Example failure that cannot differentiate whether package repo or storage failed:</p>\n<blockquote>\n<p dir=\"auto\">npm ERR! code ETIMEDOUT<br>\nnpm ERR! errno ETIMEDOUT<br>\nnpm ERR! network request to <a href=\"https://pkgs.dev.azure.com/myOrg/project/_packaging/myPackageFeed/npm/registry/ansi-regex/-/ansi-regex-4.2.0.tgz\" rel=\"nofollow\">https://pkgs.dev.azure.com/myOrg/project/_packaging/myPackageFeed/npm/registry/ansi-regex/-/ansi-regex-4.2.0.tgz</a> failed, reason:<br>\nnpm ERR! network This is a problem related to network connectivity.<br>\nnpm ERR! network In most cases you are behind a proxy or have bad network settings.<br>\nnpm ERR! network<br>\nnpm ERR! network If you are behind a proxy, please make sure that the<br>\nnpm ERR! network 'proxy' config is set properly.  See: 'npm help config'</p>\n</blockquote>",
            "url": "https://github.com/npm/rfcs/issues/762",
            "title": "Add Logging for Http Redirects to Package Content",
            "date_modified": "2024-03-26T21:02:27.000Z",
            "date_published": "2024-03-26T21:00:11.000Z",
            "author": {
                "name": "magleaso",
                "url": "https://github.com/magleaso"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/95893742?u=a1f5de8a06a6cc9aa1f929aa13163a479c70c876&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Brief:<br>\nThere are several tags in markdown includes</p>\n<ul dir=\"auto\">\n<li>[!IMPORTANT]</li>\n<li>[!WARNING]</li>\n<li>[!TIP]</li>\n<li>[!NOTE]</li>\n<li>[!CAUTION]</li>\n</ul>\n<p dir=\"auto\">They can be renderred into some beautiful headers, can we have this feature for each homepage of package in <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npmjs.com</a>?</p>\n<p dir=\"auto\">Related issue:</p>\n<p dir=\"auto\"><a href=\"https://github.com/orgs/community/discussions/16925\">[Markdown] An option to highlight a \"Note\" and \"Warning\" using blockquote (Beta)</a></p>",
            "url": "https://github.com/npm/rfcs/issues/760",
            "title": "[RRFC] Add syntaxs support for [!TIP] blockquotes in markdown files in npmjs.com",
            "date_modified": "2024-03-18T12:30:41.000Z",
            "date_published": "2024-03-18T12:30:41.000Z",
            "author": {
                "name": "polarove",
                "url": "https://github.com/polarove"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3742559?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">Locally computed integrity values would allow projects to use the strongest available cryptographic hash for all the dependencies they have. In particular, when a registry doesn't support strong integrity values (i.e. <code class=\"notranslate\">sha1</code>) a locally computed integrity value (e.g. using <code class=\"notranslate\">sha512</code>) could improve the project's security.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">Currently, installing any package from GitLab's npm registry always results in a <code class=\"notranslate\">sha1</code> integrity value (<a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/333588\" rel=\"nofollow\">source</a>). A concrete example:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ npm --version                 \n10.1.0\n\n$ echo &quot;@gitlab-org:registry=https://gitlab.com/api/v4/packages/npm/&quot; &gt;&gt;.npmrc\n\n$ npm install @gitlab-org/jsfuzz\n[...]\"><pre class=\"notranslate\">$ npm --version                 \n10.1.0\n\n$ <span class=\"pl-c1\">echo</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@gitlab-org:registry=https://gitlab.com/api/v4/packages/npm/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&gt;&gt;</span>.npmrc\n\n$ npm install @gitlab-org/jsfuzz\n[...]</pre></div>\n<p dir=\"auto\">results in the following entry in <code class=\"notranslate\">package-lock.json</code>:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  //...\n  &quot;node_modules/@gitlab-org/jsfuzz&quot;: {\n    &quot;version&quot;: &quot;1.2.3&quot;,\n    &quot;resolved&quot;: &quot;https://gitlab.com/api/v4/projects/19871264/packages/npm/@gitlab-org/jsfuzz/-/@gitlab-org/jsfuzz-1.2.3.tgz&quot;,\n\n    // NOTICE: a 'sha1' integrity value\n    &quot;integrity&quot;: &quot;sha1-QoDvllUJn7N7jMRUpYBSOmUGiwE=&quot;,\n\n    &quot;dependencies&quot;: {\n      &quot;deep-equal&quot;: &quot;^1.1.0&quot;,\n      &quot;istanbul-lib-hook&quot;: &quot;^3.0.0&quot;,\n      &quot;istanbul-lib-instrument&quot;: &quot;^3.3.0&quot;,\n      &quot;nyc&quot;: &quot;^15.1.0&quot;,\n      &quot;pidusage&quot;: &quot;^2.0.17&quot;,\n      &quot;reflect-metadata&quot;: &quot;^0.1.13&quot;,\n      &quot;yargs&quot;: &quot;^14.2.0&quot;\n    },\n    &quot;bin&quot;: {\n      &quot;jsfuzz&quot;: &quot;build/src/index.js&quot;\n    }\n  },\n  //...\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">//...</span>\n  <span class=\"pl-s\">\"node_modules/@gitlab-org/jsfuzz\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"version\"</span>: <span class=\"pl-s\">\"1.2.3\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"resolved\"</span>: <span class=\"pl-s\">\"https://gitlab.com/api/v4/projects/19871264/packages/npm/@gitlab-org/jsfuzz/-/@gitlab-org/jsfuzz-1.2.3.tgz\"</span><span class=\"pl-kos\">,</span>\n\n    <span class=\"pl-c\">// NOTICE: a 'sha1' integrity value</span>\n    <span class=\"pl-s\">\"integrity\"</span>: <span class=\"pl-s\">\"sha1-QoDvllUJn7N7jMRUpYBSOmUGiwE=\"</span><span class=\"pl-kos\">,</span>\n\n    <span class=\"pl-s\">\"dependencies\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"deep-equal\"</span>: <span class=\"pl-s\">\"^1.1.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"istanbul-lib-hook\"</span>: <span class=\"pl-s\">\"^3.0.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"istanbul-lib-instrument\"</span>: <span class=\"pl-s\">\"^3.3.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"nyc\"</span>: <span class=\"pl-s\">\"^15.1.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"pidusage\"</span>: <span class=\"pl-s\">\"^2.0.17\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"reflect-metadata\"</span>: <span class=\"pl-s\">\"^0.1.13\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"yargs\"</span>: <span class=\"pl-s\">\"^14.2.0\"</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"bin\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"jsfuzz\"</span>: <span class=\"pl-s\">\"build/src/index.js\"</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">//...</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">There is, as far as I'm aware no mechanism for npm to instead put a <code class=\"notranslate\">sha512</code> hash in the lockfile.</p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Whenever the npm CLI puts integrity values in the lockfile, it uses the integrity value provided by registry.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<h5 dir=\"auto\">High level</h5>\n<p dir=\"auto\">The npm CLI should put locally computed integrity values -- computed using the \"strongest\" available, or a specified, hashing algorithm -- in the lockfile.</p>\n<h5 dir=\"auto\">Flow</h5>\n<ol dir=\"auto\">\n<li>The npm CLI performs the installation process as it currently works (including, presumably, checking if the registry provided integrity value matches the package content).</li>\n<li>The npm CLI recomputes the integrity value using the \"strongest\" available or the specified hashing algorithm and puts that value in the lockfile.\n<ul dir=\"auto\">\n<li>Of course, if the registry provided value is already using that algorithm, the implementation could skip recomputing it.</li>\n</ul>\n</li>\n</ol>\n<h5 dir=\"auto\">Configuration</h5>\n<p dir=\"auto\">At a minimum I would like to see an option that allows users to specify what hashing algorithm to use when installing.</p>\n<p dir=\"auto\">I personally think it would make sense for the npm CLI to default to a \"stronger\" algorithm when no such option is provided. In the current state, where <code class=\"notranslate\">sha1</code> and <code class=\"notranslate\">sha512</code> are supported, this would mean defaulting to <code class=\"notranslate\">sha512</code>. But, in case there's any concerns about this point, I don't think it's crucial.</p>\n<h5 dir=\"auto\">Miscellaneous</h5>\n<ul dir=\"auto\">\n<li>I want to point out that this change opens the npm CLI up to cryptography <a href=\"https://en.wikipedia.org/wiki/Downgrade_attack\" rel=\"nofollow\">downgrade attacks</a> (i.e. a project could end up with only \"weak\" <code class=\"notranslate\">sha1</code> hashes even when only fetching packages from a registry that provides \"strong\" <code class=\"notranslate\">sha512</code> hashes). I personally think the trade-off (being able to use stronger hashes when the registry only provides weak ones) is worth it, particularly since the option value is not the result of a negotiation (like in networking).</li>\n<li>I'm not suggesting any of this should automatically be applied to pre-existing, say <code class=\"notranslate\">sha1</code>, integrity values in the lockfile (though I wouldn't mind it if there was some mechanism in the CLI to upgrade pre-existing integrity values). Though I would note that it might confuse users if they specify that <code class=\"notranslate\">sha512</code> hashes should be used only to find out that there's still (pre-existing) <code class=\"notranslate\">sha1</code> hashes in their lockfile.</li>\n</ul>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2108691489\" data-permission-text=\"Title is private\" data-url=\"https://github.com/lirantal/lockfile-lint/issues/187\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lirantal/lockfile-lint/issues/187/hovercard\" href=\"https://github.com/lirantal/lockfile-lint/issues/187\">lirantal/lockfile-lint#187</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/757",
            "title": "[RRFC] Locally computed integrity values in the lockfile",
            "date_modified": "2024-02-15T09:32:09.000Z",
            "date_published": "2024-02-15T09:32:09.000Z",
            "author": {
                "name": "ericcornelissen",
                "url": "https://github.com/ericcornelissen"
            }
        }
    ]
}