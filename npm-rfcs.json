{
    "version": "https://jsonfeed.org/version/1",
    "title": "npm/rfcs Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/npm-rfcs.json",
    "feed_url": "https://azu.github.io/github-search-rss/npm-rfcs.json",
    "description": "npm/rfcs Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1135267?u=82bf14abcf63152d090ca75748eb0984fabe911d&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">I have a lot of mono-repos, which want to be published every once in a while. When using the workspace option to publish multiple packages at once, I get multiple prompts for authentication.</p>\n<p dir=\"auto\">Yes, I can check the checkbox in the web-UI to not be prompted within the next 5 minutes, but that is not my intention in this case. I only want to publish the specified packages. The option to not be bothered for 5 minutes also seems like an unnecessary risk for this use-case.</p>\n<p dir=\"auto\">I remember, that at least some time ago, lerna was able to publish multiple packages with one OTP prompt. Not sure how they did it, but that was comfortable. Not sure if they still support it though, haven't used it in a while.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">I have a mono-repo with 3 packages.</p>\n<ul dir=\"auto\">\n<li>I adjust the versions on 2 of them and want to publish them via CLI.</li>\n<li>I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code></li>\n<li>I have published my packages successfully</li>\n</ul>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">When I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code>, I have two options for authentication:</p>\n<ul dir=\"auto\">\n<li>open the web-UI authentication link once per package to be released</li>\n<li>open the first web-UI authentication link and check the checkbox to not be bothered for the next 5 minutes</li>\n</ul>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">When I run <code class=\"notranslate\">npm publish --access public -w pack1 -w pack2</code>, I get only one web-UI authentication link, even if I don't check the checkbox to not be bothered for 5 minutes.</p>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/778",
            "title": "[RRFC] require authentication only once during one single npm publish using workspaces",
            "date_modified": "2024-06-02T16:09:35.000Z",
            "date_published": "2024-06-02T13:55:49.000Z",
            "author": {
                "name": "Lusito",
                "url": "https://github.com/Lusito"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/153218963?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/774",
            "title": "[RRFC] <title>",
            "date_modified": "2024-05-18T00:16:54.000Z",
            "date_published": "2024-05-18T00:16:54.000Z",
            "author": {
                "name": "ibrahimkhled",
                "url": "https://github.com/ibrahimkhled"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/76838083?u=b2e85d104410195aaebb49b483c514d1ab07eb16&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\"><code class=\"notranslate\">npm completion</code> has worked under Git for Windows <a href=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6\">since 2015</a>. Digging around a bit leads me to believe that back when the decision to explicitly not support Cygwin was made, <a href=\"https://github.com/emigenix/npm_on_cygwin\">it was due to Cygwin behavior with paths</a>. However, <a href=\"https://www.msys2.org/docs/who-is-using-msys2/\" rel=\"nofollow\">Git for Windows is based on MSYS2</a>, which has <a href=\"https://www.msys2.org/docs/filesystem-paths/\" rel=\"nofollow\">automatic path conversion</a> to avoid Win32 programs seeing Unix paths. Cygwin/MSYS programs generally handle Win32 paths fine, but Win32 programs generally need the Unix paths converted before being passed to them. If my research was correct and the reason Cygwin was explicitly not supported was due to path problems, that reason is now gone with MSYS2. Thus, perhaps support for upstream MSYS2 can be considered (Cygwin still doesn't do automatic path conversions AFAICT, users still have to do that manually when passing paths between Cygwin and Win32 programs).</p>\n<h3 dir=\"auto\">Example</h3>\n<div class=\"highlight highlight-text-shell-session notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"username@hostname UCRT64 ~\n$ npm completion &gt;&gt; ~/.zshrc\n\nusername@hostname UCRT64 ~\n$\"><pre class=\"notranslate\"><span class=\"pl-c1\">username@hostname UCRT64 ~</span>\n$ <span class=\"pl-s1\">npm completion <span class=\"pl-k\">&gt;&gt;</span> <span class=\"pl-k\">~</span>/.zshrc</span>\n\n<span class=\"pl-c1\">username@hostname UCRT64 ~</span>\n$</pre></div>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Currently, the Windows check only checks for Git for Windows:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n\nexports.isWindowsShell = isWindowsShell\"><pre class=\"notranslate\"><span class=\"pl-k\">const</span> <span class=\"pl-s1\">isWindowsShell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-kos\">(</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">platform</span> <span class=\"pl-c1\">===</span> <span class=\"pl-s\">'win32'</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span>\n  <span class=\"pl-c1\">!</span><span class=\"pl-pds\"><span class=\"pl-c1\">/</span>^MINGW(32|64)$<span class=\"pl-c1\">/</span></span><span class=\"pl-kos\">.</span><span class=\"pl-en\">test</span><span class=\"pl-kos\">(</span><span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">MSYSTEM</span><span class=\"pl-kos\">)</span> <span class=\"pl-c1\">&amp;&amp;</span> <span class=\"pl-s1\">process</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">env</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">TERM</span> <span class=\"pl-c1\">!==</span> <span class=\"pl-s\">'cygwin'</span>\n\n<span class=\"pl-s1\">exports</span><span class=\"pl-kos\">.</span><span class=\"pl-c1\">isWindowsShell</span> <span class=\"pl-c1\">=</span> <span class=\"pl-s1\">isWindowsShell</span></pre></div>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">Given that the completion works under Git for Windows, it should also work against its direct upstream, so check for <a href=\"https://www.msys2.org/docs/environments/\" rel=\"nofollow\">its environments</a> as well:</p>\n<div class=\"highlight highlight-source-diff notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"diff --color -Naur a/lib/utils/is-windows.js b/lib/utils/is-windows.js\n--- a/lib/utils/is-windows.js   2024-05-12 10:11:24.285665400 +0000\n+++ b/lib/utils/is-windows.js   2024-05-12 10:11:36.695333600 +0000\n@@ -1,4 +1,4 @@\n const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n-  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n+  !/^((MSYS)|(MINGW|UCRT|CLANG|CLANGARM)(32|64))$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'\n\n exports.isWindowsShell = isWindowsShell\"><pre class=\"notranslate\"><span class=\"pl-c1\">diff --color -Naur a/lib/utils/is-windows.js b/lib/utils/is-windows.js</span>\n<span class=\"pl-md\">--- a/lib/utils/is-windows.js   2024-05-12 10:11:24.285665400 +0000</span>\n<span class=\"pl-mi1\">+++ b/lib/utils/is-windows.js   2024-05-12 10:11:36.695333600 +0000</span>\n<span class=\"pl-mdr\">@@ -1,4 +1,4 @@</span>\n const isWindowsShell = (process.platform === 'win32') &amp;&amp;\n<span class=\"pl-md\"><span class=\"pl-md\">-</span>  !/^MINGW(32|64)$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'</span>\n<span class=\"pl-mi1\"><span class=\"pl-mi1\">+</span>  !/^((MSYS)|(MINGW|UCRT|CLANG|CLANGARM)(32|64))$/.test(process.env.MSYSTEM) &amp;&amp; process.env.TERM !== 'cygwin'</span>\n\n exports.isWindowsShell = isWindowsShell</pre></div>\n<p dir=\"auto\">As per <a href=\"https://github.com/npm/npm/pull/12366#issuecomment-212160226\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/npm/pull/12366/hovercard\">an old comment</a>:</p>\n<blockquote>\n<p dir=\"auto\">won't merge any patch that's intended to solely change the behavior of npm for Cygwin.</p>\n</blockquote>\n<p dir=\"auto\">I believe this change isn't a change for Cygwin in particular, its merely expanding an existing support a bit. In terms of path handling, there is less difference between Git for Windows and its upstream MSYS2 than there is between MSYS2 and its upstream Cygwin.</p>\n<p dir=\"auto\">As a side note, the current support for Git for Windows does mean that MSYS2 users can already use the completion, but only if they're running the MINGW environment, which uses the MSVCRT runtime. Recently they've <a href=\"https://github.com/msys2/MINGW-packages/issues/13371\" data-hovercard-type=\"issue\" data-hovercard-url=\"/msys2/MINGW-packages/issues/13371/hovercard\">changed the primary suggested environment from MINGW64 to UCRT64</a>, which uses the newer UCRT runtime. An overall harmless change, but it does mean that the completion no longer works.</p>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6/hovercard\" href=\"https://github.com/npm/cli/commit/09498e45c5c9e683f092ab1372670f81db4762b6\">npm/cli@<tt>09498e4</tt></a></li>\n<li><a href=\"https://github.com/emigenix/npm_on_cygwin\">https://github.com/emigenix/npm_on_cygwin</a></li>\n<li><a href=\"https://www.msys2.org/docs/who-is-using-msys2/\" rel=\"nofollow\">https://www.msys2.org/docs/who-is-using-msys2/</a></li>\n<li><a href=\"https://www.msys2.org/docs/filesystem-paths/\" rel=\"nofollow\">https://www.msys2.org/docs/filesystem-paths/</a></li>\n<li><a href=\"https://www.msys2.org/docs/environments/\" rel=\"nofollow\">https://www.msys2.org/docs/environments/</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1393840003\" data-permission-text=\"Title is private\" data-url=\"https://github.com/msys2/MINGW-packages/issues/13371\" data-hovercard-type=\"issue\" data-hovercard-url=\"/msys2/MINGW-packages/issues/13371/hovercard\" href=\"https://github.com/msys2/MINGW-packages/issues/13371\">msys2/MINGW-packages#13371</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/771",
            "title": "[RRFC] Allow `npm completion` under MSYS2",
            "date_modified": "2024-05-12T10:16:44.000Z",
            "date_published": "2024-05-03T14:46:17.000Z",
            "author": {
                "name": "500-internal-server-error",
                "url": "https://github.com/500-internal-server-error"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/6381507?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">package.json allows us to use <a href=\"https://docs.npmjs.com/cli/v10/configuring-npm/package-json#engines\" rel=\"nofollow\">engines</a> where we can limit node version.</p>\n<p dir=\"auto\">In CI/CD we often use the pattern when we clone some projects and try to run some tasks from it which requires npm install.</p>\n<p dir=\"auto\">Let's say our pipeline also can accept some parameter such as node version but at the same time we want to enforce a certain rule, when node verrsion of that image should match some version condition.</p>\n<p dir=\"auto\">Currently it is also possible to enforce node version check by use of engines parameter directly in our package.json ( or indirectly via dependent packages ). However let's say if we want to run <code class=\"notranslate\">npm install</code> as it would have something like <code class=\"notranslate\">engines: { node: &gt;20 }</code> we need to  set it manually or at least via <code class=\"notranslate\">npm pkg set engines.node</code> which will modify package.json and it's not perfect for CI/CD procedures where upstream project ideally should stay not touched.</p>\n<p dir=\"auto\">I thought if we would have an option to run something like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npm_config_engines_node='&gt;=18.8` npm i\"><pre class=\"notranslate\"><code class=\"notranslate\">npm_config_engines_node='&gt;=18.8` npm i\n</code></pre></div>\n<p dir=\"auto\">which would enforce engine check as it's declared in package.json<br>\nthen we could enforce engine from command line</p>\n<p dir=\"auto\">What do you think of this?</p>\n<p dir=\"auto\">Thanks!</p>",
            "url": "https://github.com/npm/rfcs/issues/769",
            "title": "[RRFC] allowing to use engines as config variable",
            "date_modified": "2024-04-18T08:32:43.000Z",
            "date_published": "2024-04-18T08:32:43.000Z",
            "author": {
                "name": "ThePlenkov",
                "url": "https://github.com/ThePlenkov"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/153218963?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/768",
            "title": "[RRFC] <title>",
            "date_modified": "2024-04-18T06:04:37.000Z",
            "date_published": "2024-04-18T06:04:37.000Z",
            "author": {
                "name": "ibrahimkhled",
                "url": "https://github.com/ibrahimkhled"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1358764?u=1ad362c0c5a575d7445096391b528283722ce412&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<p dir=\"auto\">Currently, deprecated packages show a short string with some information from the <code class=\"notranslate\">deprecated</code> property. This often includes information about another package to migrate to, either due to a package rename or a fork. Unfortunately, this makes it hard or impossible to automate any sort of migration, in the same way that tools like Dependabot or Renovate can for version upgrades.</p>\n<p dir=\"auto\">Allowing structured data in the <code class=\"notranslate\">deprecated</code> property, with information about a replacement package or packages, would allow these tools to perform package migrations as well as package upgrades.</p>\n<h3 dir=\"auto\">Example</h3>\n\n<p dir=\"auto\">Renovate currently has a manually curated list of these package migrations<sup><a href=\"#user-content-fn-1-6fe708148b502cf8d0c24a7d9739f1a8\" id=\"user-content-fnref-1-6fe708148b502cf8d0c24a7d9739f1a8\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">1</a></sup>, and I am discussing whether or not this addition makes sense as part of the Open Source Vulnerability schema<sup><a href=\"#user-content-fn-2-6fe708148b502cf8d0c24a7d9739f1a8\" id=\"user-content-fnref-2-6fe708148b502cf8d0c24a7d9739f1a8\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">2</a></sup>. I think there are definitely security applications for deprecated packages that have CVEs, it would also be useful for general package migrations.</p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<p dir=\"auto\">The <code class=\"notranslate\">deprecated</code> property in <code class=\"notranslate\">package.json</code> currently only allows a string or boolean to show some information about what package to migrate to. For example:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  &quot;deprecated&quot;: &quot;No longer supported. Migrate to @example/package-name&quot;\"><pre class=\"notranslate\">  <span class=\"pl-ent\">\"deprecated\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No longer supported. Migrate to @example/package-name<span class=\"pl-pds\">\"</span></span></pre></div>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<p dir=\"auto\">Allowing for structured data in the <code class=\"notranslate\">deprecated</code> property would allow for automation to perform migrations in users code. For example:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"  &quot;deprecated&quot;: {\n    &quot;description&quot;: &quot;No longer supported. Migrate to @example/package-name&quot;,\n    &quot;migration&quot;: {\n      &quot;name&quot;: &quot;@example/package-name&quot;,\n      &quot;version&quot;: &quot;2.0.0&quot;\n    }\n  }\"><pre class=\"notranslate\">  <span class=\"pl-ent\">\"deprecated\"</span>: {\n    <span class=\"pl-ent\">\"description\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>No longer supported. Migrate to @example/package-name<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"migration\"</span>: {\n      <span class=\"pl-ent\">\"name\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@example/package-name<span class=\"pl-pds\">\"</span></span>,\n      <span class=\"pl-ent\">\"version\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>2.0.0<span class=\"pl-pds\">\"</span></span>\n    }\n  }</pre></div>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>\n<section data-footnotes=\"\" class=\"footnotes\"><h2 id=\"footnote-label\" class=\"sr-only\" dir=\"auto\">Footnotes</h2>\n<ol dir=\"auto\">\n<li id=\"user-content-fn-1-6fe708148b502cf8d0c24a7d9739f1a8\">\n<p dir=\"auto\"><a href=\"https://github.com/renovatebot/renovate/blob/main/lib/config/presets/internal/replacements.ts\">https://github.com/renovatebot/renovate/blob/main/lib/config/presets/internal/replacements.ts</a> <a href=\"#user-content-fnref-1-6fe708148b502cf8d0c24a7d9739f1a8\" data-footnote-backref=\"\" aria-label=\"Back to reference 1\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n<li id=\"user-content-fn-2-6fe708148b502cf8d0c24a7d9739f1a8\">\n<p dir=\"auto\"><a href=\"https://github.com/ossf/osv-schema/issues/230\">https://github.com/ossf/osv-schema/issues/230</a> <a href=\"#user-content-fnref-2-6fe708148b502cf8d0c24a7d9739f1a8\" data-footnote-backref=\"\" aria-label=\"Back to reference 2\" class=\"data-footnote-backref\">↩</a></p>\n</li>\n</ol>\n</section>",
            "url": "https://github.com/npm/rfcs/issues/766",
            "title": "[RRFC] Structured data for `deprecated` packages about migration paths",
            "date_modified": "2024-04-15T22:07:18.000Z",
            "date_published": "2024-04-15T22:07:18.000Z",
            "author": {
                "name": "JamieMagee",
                "url": "https://github.com/JamieMagee"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/7018576?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Npm does not log a line for http redirects on package download, so it is not possible to determine whether failures occur before or after being redirected to make a second request.</p>\n<p dir=\"auto\">Azure Artifacts for example responds with a 303 redirect to Azure blob storage when npm requests a tgz file. If npm were to log a line with a 303 redirect and then another line for the subsequent request to storage, this would significantly improve debugging and allow users to determine if they are having connectivity/availability issues with the package repository or the underlying storage that is getting redirected to.</p>\n<p dir=\"auto\">Example failure that cannot differentiate whether package repo or storage failed:</p>\n<blockquote>\n<p dir=\"auto\">npm ERR! code ETIMEDOUT<br>\nnpm ERR! errno ETIMEDOUT<br>\nnpm ERR! network request to <a href=\"https://pkgs.dev.azure.com/myOrg/project/_packaging/myPackageFeed/npm/registry/ansi-regex/-/ansi-regex-4.2.0.tgz\" rel=\"nofollow\">https://pkgs.dev.azure.com/myOrg/project/_packaging/myPackageFeed/npm/registry/ansi-regex/-/ansi-regex-4.2.0.tgz</a> failed, reason:<br>\nnpm ERR! network This is a problem related to network connectivity.<br>\nnpm ERR! network In most cases you are behind a proxy or have bad network settings.<br>\nnpm ERR! network<br>\nnpm ERR! network If you are behind a proxy, please make sure that the<br>\nnpm ERR! network 'proxy' config is set properly.  See: 'npm help config'</p>\n</blockquote>",
            "url": "https://github.com/npm/rfcs/issues/762",
            "title": "Add Logging for Http Redirects to Package Content",
            "date_modified": "2024-03-26T21:02:27.000Z",
            "date_published": "2024-03-26T21:00:11.000Z",
            "author": {
                "name": "magleaso",
                "url": "https://github.com/magleaso"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/95893742?u=a1f5de8a06a6cc9aa1f929aa13163a479c70c876&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Brief:<br>\nThere are several tags in markdown includes</p>\n<ul dir=\"auto\">\n<li>[!IMPORTANT]</li>\n<li>[!WARNING]</li>\n<li>[!TIP]</li>\n<li>[!NOTE]</li>\n<li>[!CAUTION]</li>\n</ul>\n<p dir=\"auto\">They can be renderred into some beautiful headers, can we have this feature for each homepage of package in <a href=\"https://www.npmjs.com/\" rel=\"nofollow\">npmjs.com</a>?</p>\n<p dir=\"auto\">Related issue:</p>\n<p dir=\"auto\"><a href=\"https://github.com/orgs/community/discussions/16925\">[Markdown] An option to highlight a \"Note\" and \"Warning\" using blockquote (Beta)</a></p>",
            "url": "https://github.com/npm/rfcs/issues/760",
            "title": "[RRFC] Add syntaxs support for [!TIP] blockquotes in markdown files in npmjs.com",
            "date_modified": "2024-03-18T12:30:41.000Z",
            "date_published": "2024-03-18T12:30:41.000Z",
            "author": {
                "name": "polarove",
                "url": "https://github.com/polarove"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3742559?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">Locally computed integrity values would allow projects to use the strongest available cryptographic hash for all the dependencies they have. In particular, when a registry doesn't support strong integrity values (i.e. <code class=\"notranslate\">sha1</code>) a locally computed integrity value (e.g. using <code class=\"notranslate\">sha512</code>) could improve the project's security.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">Currently, installing any package from GitLab's npm registry always results in a <code class=\"notranslate\">sha1</code> integrity value (<a href=\"https://gitlab.com/gitlab-org/gitlab/-/issues/333588\" rel=\"nofollow\">source</a>). A concrete example:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ npm --version                 \n10.1.0\n\n$ echo &quot;@gitlab-org:registry=https://gitlab.com/api/v4/packages/npm/&quot; &gt;&gt;.npmrc\n\n$ npm install @gitlab-org/jsfuzz\n[...]\"><pre class=\"notranslate\">$ npm --version                 \n10.1.0\n\n$ <span class=\"pl-c1\">echo</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>@gitlab-org:registry=https://gitlab.com/api/v4/packages/npm/<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">&gt;&gt;</span>.npmrc\n\n$ npm install @gitlab-org/jsfuzz\n[...]</pre></div>\n<p dir=\"auto\">results in the following entry in <code class=\"notranslate\">package-lock.json</code>:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n  //...\n  &quot;node_modules/@gitlab-org/jsfuzz&quot;: {\n    &quot;version&quot;: &quot;1.2.3&quot;,\n    &quot;resolved&quot;: &quot;https://gitlab.com/api/v4/projects/19871264/packages/npm/@gitlab-org/jsfuzz/-/@gitlab-org/jsfuzz-1.2.3.tgz&quot;,\n\n    // NOTICE: a 'sha1' integrity value\n    &quot;integrity&quot;: &quot;sha1-QoDvllUJn7N7jMRUpYBSOmUGiwE=&quot;,\n\n    &quot;dependencies&quot;: {\n      &quot;deep-equal&quot;: &quot;^1.1.0&quot;,\n      &quot;istanbul-lib-hook&quot;: &quot;^3.0.0&quot;,\n      &quot;istanbul-lib-instrument&quot;: &quot;^3.3.0&quot;,\n      &quot;nyc&quot;: &quot;^15.1.0&quot;,\n      &quot;pidusage&quot;: &quot;^2.0.17&quot;,\n      &quot;reflect-metadata&quot;: &quot;^0.1.13&quot;,\n      &quot;yargs&quot;: &quot;^14.2.0&quot;\n    },\n    &quot;bin&quot;: {\n      &quot;jsfuzz&quot;: &quot;build/src/index.js&quot;\n    }\n  },\n  //...\n}\"><pre class=\"notranslate\"><span class=\"pl-kos\">{</span>\n  <span class=\"pl-c\">//...</span>\n  <span class=\"pl-s\">\"node_modules/@gitlab-org/jsfuzz\"</span>: <span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"version\"</span>: <span class=\"pl-s\">\"1.2.3\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"resolved\"</span>: <span class=\"pl-s\">\"https://gitlab.com/api/v4/projects/19871264/packages/npm/@gitlab-org/jsfuzz/-/@gitlab-org/jsfuzz-1.2.3.tgz\"</span><span class=\"pl-kos\">,</span>\n\n    <span class=\"pl-c\">// NOTICE: a 'sha1' integrity value</span>\n    <span class=\"pl-s\">\"integrity\"</span>: <span class=\"pl-s\">\"sha1-QoDvllUJn7N7jMRUpYBSOmUGiwE=\"</span><span class=\"pl-kos\">,</span>\n\n    <span class=\"pl-s\">\"dependencies\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"deep-equal\"</span>: <span class=\"pl-s\">\"^1.1.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"istanbul-lib-hook\"</span>: <span class=\"pl-s\">\"^3.0.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"istanbul-lib-instrument\"</span>: <span class=\"pl-s\">\"^3.3.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"nyc\"</span>: <span class=\"pl-s\">\"^15.1.0\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"pidusage\"</span>: <span class=\"pl-s\">\"^2.0.17\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"reflect-metadata\"</span>: <span class=\"pl-s\">\"^0.1.13\"</span><span class=\"pl-kos\">,</span>\n      <span class=\"pl-s\">\"yargs\"</span>: <span class=\"pl-s\">\"^14.2.0\"</span>\n    <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"bin\"</span>: <span class=\"pl-kos\">{</span>\n      <span class=\"pl-s\">\"jsfuzz\"</span>: <span class=\"pl-s\">\"build/src/index.js\"</span>\n    <span class=\"pl-kos\">}</span>\n  <span class=\"pl-kos\">}</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c\">//...</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">There is, as far as I'm aware no mechanism for npm to instead put a <code class=\"notranslate\">sha512</code> hash in the lockfile.</p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Whenever the npm CLI puts integrity values in the lockfile, it uses the integrity value provided by registry.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<h5 dir=\"auto\">High level</h5>\n<p dir=\"auto\">The npm CLI should put locally computed integrity values -- computed using the \"strongest\" available, or a specified, hashing algorithm -- in the lockfile.</p>\n<h5 dir=\"auto\">Flow</h5>\n<ol dir=\"auto\">\n<li>The npm CLI performs the installation process as it currently works (including, presumably, checking if the registry provided integrity value matches the package content).</li>\n<li>The npm CLI recomputes the integrity value using the \"strongest\" available or the specified hashing algorithm and puts that value in the lockfile.\n<ul dir=\"auto\">\n<li>Of course, if the registry provided value is already using that algorithm, the implementation could skip recomputing it.</li>\n</ul>\n</li>\n</ol>\n<h5 dir=\"auto\">Configuration</h5>\n<p dir=\"auto\">At a minimum I would like to see an option that allows users to specify what hashing algorithm to use when installing.</p>\n<p dir=\"auto\">I personally think it would make sense for the npm CLI to default to a \"stronger\" algorithm when no such option is provided. In the current state, where <code class=\"notranslate\">sha1</code> and <code class=\"notranslate\">sha512</code> are supported, this would mean defaulting to <code class=\"notranslate\">sha512</code>. But, in case there's any concerns about this point, I don't think it's crucial.</p>\n<h5 dir=\"auto\">Miscellaneous</h5>\n<ul dir=\"auto\">\n<li>I want to point out that this change opens the npm CLI up to cryptography <a href=\"https://en.wikipedia.org/wiki/Downgrade_attack\" rel=\"nofollow\">downgrade attacks</a> (i.e. a project could end up with only \"weak\" <code class=\"notranslate\">sha1</code> hashes even when only fetching packages from a registry that provides \"strong\" <code class=\"notranslate\">sha512</code> hashes). I personally think the trade-off (being able to use stronger hashes when the registry only provides weak ones) is worth it, particularly since the option value is not the result of a negotiation (like in networking).</li>\n<li>I'm not suggesting any of this should automatically be applied to pre-existing, say <code class=\"notranslate\">sha1</code>, integrity values in the lockfile (though I wouldn't mind it if there was some mechanism in the CLI to upgrade pre-existing integrity values). Though I would note that it might confuse users if they specify that <code class=\"notranslate\">sha512</code> hashes should be used only to find out that there's still (pre-existing) <code class=\"notranslate\">sha1</code> hashes in their lockfile.</li>\n</ul>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"2108691489\" data-permission-text=\"Title is private\" data-url=\"https://github.com/lirantal/lockfile-lint/issues/187\" data-hovercard-type=\"issue\" data-hovercard-url=\"/lirantal/lockfile-lint/issues/187/hovercard\" href=\"https://github.com/lirantal/lockfile-lint/issues/187\">lirantal/lockfile-lint#187</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/757",
            "title": "[RRFC] Locally computed integrity values in the lockfile",
            "date_modified": "2024-02-15T09:32:09.000Z",
            "date_published": "2024-02-15T09:32:09.000Z",
            "author": {
                "name": "ericcornelissen",
                "url": "https://github.com/ericcornelissen"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/181523?u=eb057157876ac412b4e3fdb2e48e76eb8a190804&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">The result of running <code class=\"notranslate\">npm completion</code> is a monolithic function for the entirety of the <code class=\"notranslate\">npm</code> command. Contrast this with <code class=\"notranslate\">git</code> which allows a definition like:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"alias gp='git push'\n__git_complete gp _git_push\"><pre class=\"notranslate\"><span class=\"pl-c1\">alias</span> gp=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>git push<span class=\"pl-pds\">'</span></span>\n__git_complete gp _git_push</pre></div>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">The current <code class=\"notranslate\">npm completion</code> only works for the base command.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">I could define:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"alias nr='npm run'\n__npm_complete nr _npm_run\"><pre class=\"notranslate\"><span class=\"pl-c1\">alias</span> nr=<span class=\"pl-s\"><span class=\"pl-pds\">'</span>npm run<span class=\"pl-pds\">'</span></span>\n__npm_complete nr _npm_run</pre></div>\n<p dir=\"auto\">And when I double tab after <code class=\"notranslate\">nr</code> it would show me the available tasks <em>(the behavior when double tabbing after <code class=\"notranslate\">npm run</code> when completions are loaded)</em> rather than listing the files in the current directory.</p>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://github.com/git/git/blob/master/contrib/completion/git-completion.bash\"><code class=\"notranslate\">git</code> <code class=\"notranslate\">bash</code> completions</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/756",
            "title": "[RRFC] Decompose `bash` completions",
            "date_modified": "2024-01-30T07:35:42.000Z",
            "date_published": "2024-01-30T07:30:25.000Z",
            "author": {
                "name": "dysbulic",
                "url": "https://github.com/dysbulic"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/2325730?u=7d246fd9763bc26480b998b2be6e5c8955c44a78&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">When new and inexperienced users are installing packages with <code class=\"notranslate\">npm</code>, they may accidentally open a new terminal to their home directory and then run <code class=\"notranslate\">npm install</code>. This can occur if they are installing a package globally and forget to add <code class=\"notranslate\">-g</code> or it can be the case that they weren't aware of their present working directory. In either case, the result is a <code class=\"notranslate\">~/node_modules</code> directory which can cause unexpected behaviors in other node projects on their machine.</p>\n<h3 dir=\"auto\">Example</h3>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ cd ~\n$ npm install lodash\n\nadded 1 package in 943ms\"><pre class=\"notranslate\">$ <span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>\n$ npm install lodash\n\nadded 1 package <span class=\"pl-k\">in</span> 943ms</pre></div>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">At this time, there is no warning regarding this situation so when the user performs this action accidentally it occurs silently only to cause problems in the future. Let's consider the following scenario:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ cd ~\n$ node -v\nv18.13.0\n$ npm install node@12\n\nadded 2 packages, and audited 422 packages in 10s\n\n52 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\"><pre class=\"notranslate\">$ <span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>\n$ node -v\nv18.13.0\n$ npm install node@12\n\nadded 2 packages, and audited 422 packages <span class=\"pl-k\">in</span> 10s\n\n52 packages are looking <span class=\"pl-k\">for</span> funding\n  run <span class=\"pl-s\"><span class=\"pl-pds\">`</span>npm fund<span class=\"pl-pds\">`</span></span> <span class=\"pl-k\">for</span> details\n\nfound 0 vulnerabilities</pre></div>\n<p dir=\"auto\">The current terminal environment is running NodeJS 18.13.0 and NPM 9.2.0 and the user has now asked NPM to install the <code class=\"notranslate\">node</code> version 12 package in their home directory. Realistically this scenario more likely to occur if installing a package which references <code class=\"notranslate\">node</code> as a dependency. Now, running <code class=\"notranslate\">~/node_modules/.bin/node  -v</code> in this example will output \"v12.22.12\".</p>\n<p dir=\"auto\">What will happen now is if the user makes any reference to <code class=\"notranslate\">node</code> or <code class=\"notranslate\">npm</code> within the <a href=\"https://docs.npmjs.com/cli/v10/commands/npm-run-script\" rel=\"nofollow\">npm-run-script section</a> of any <code class=\"notranslate\">package.json</code> file located within a subdirectory of the home directory (which will typically be the case for most people), NPM will use the <em>other</em> version of NodeJS because <code class=\"notranslate\">./node_modules/.bin</code> of the current directory as well as all parent directories is added to <code class=\"notranslate\">PATH</code> by NPM when running script commands:</p>\n<p dir=\"auto\"><code class=\"notranslate\">~/projects/some_node_app/package.json</code>:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"{\n    ...\n    &quot;scripts&quot;: {\n        &quot;which&quot;: &quot;which node&quot;,\n        &quot;test&quot;: &quot;jest&quot;,\n        &quot;lint&quot;: &quot;eslint \\&quot;**/*.js\\&quot;&quot;,\n        &quot;build&quot;: &quot;npm run lint &amp;&amp; npm test&quot;\n    }\n    ...\n}\"><pre class=\"notranslate\">{\n    <span class=\"pl-ii\">...</span>\n    <span class=\"pl-ent\">\"scripts\"</span>: {\n        <span class=\"pl-ent\">\"which\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>which node<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"test\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>jest<span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"lint\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>eslint <span class=\"pl-cce\">\\\"</span>**/*.js<span class=\"pl-cce\">\\\"</span><span class=\"pl-pds\">\"</span></span>,\n        <span class=\"pl-ent\">\"build\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>npm run lint &amp;&amp; npm test<span class=\"pl-pds\">\"</span></span>\n    }\n    <span class=\"pl-ii\">...</span>\n}</pre></div>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ cd ~/projects/some_node_app\n$ npm run which\n\n/home/user/node_modules/.bin/node\"><pre class=\"notranslate\">$ <span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>/projects/some_node_app\n$ npm run which\n\n/home/user/node_modules/.bin/node</pre></div>\n<p dir=\"auto\">Because NPM is sensitive to the specific version of NodeJS being used, this specific situation will produce an error because the currently running version of NPM is incompatible with the hidden version of NodeJS:</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ npm run build\n\n&gt; build\n&gt; npm run lint &amp;&amp; npm test\n\nERROR: npm v9.2.0 is known not to run on Node.js v12.22.12. You'll need to\nupgrade to a newer Node.js version in order to use this version of npm. This\nversion of npm supports the following node versions: `^14.17.0 || ^16.13.0 ||\n&gt;=18.0.0`. You can find the latest version at https://nodejs.org/.\n\nERROR:\n/usr/share/nodejs/npm/lib/utils/exit-handler.js:22\n  const hasLoadedNpm = npm?.config.loaded\n                           ^\n\nSyntaxError: Unexpected token '.'\n    at wrapSafe (internal/modules/cjs/loader.js:915:16)\n    at Module._compile (internal/modules/cjs/loader.js:963:27)\n    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)\n    at Module.load (internal/modules/cjs/loader.js:863:32)\n    at Function.Module._load (internal/modules/cjs/loader.js:708:14)\n    at Module.require (internal/modules/cjs/loader.js:887:19)\n    at require (internal/modules/cjs/helpers.js:74:18)\n    at module.exports (/usr/share/nodejs/npm/lib/cli.js:76:23)\n    at Object.&lt;anonymous&gt; (/usr/share/nodejs/npm/bin/npm-cli.js:2:25)\n    at Module._compile (internal/modules/cjs/loader.js:999:30)\"><pre class=\"notranslate\">$ npm run build\n\n<span class=\"pl-k\">&gt;</span> build\n<span class=\"pl-k\">&gt;</span> npm run lint <span class=\"pl-k\">&amp;&amp;</span> npm <span class=\"pl-c1\">test</span>\n\nERROR: npm v9.2.0 is known not to run on Node.js v12.22.12. You<span class=\"pl-s\"><span class=\"pl-pds\">'</span>ll need to</span>\n<span class=\"pl-s\">upgrade to a newer Node.js version in order to use this version of npm. This</span>\n<span class=\"pl-s\">version of npm supports the following node versions: `^14.17.0 || ^16.13.0 ||</span>\n<span class=\"pl-s\">&gt;=18.0.0`. You can find the latest version at https://nodejs.org/.</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">ERROR:</span>\n<span class=\"pl-s\">/usr/share/nodejs/npm/lib/utils/exit-handler.js:22</span>\n<span class=\"pl-s\">  const hasLoadedNpm = npm?.config.loaded</span>\n<span class=\"pl-s\">                           ^</span>\n<span class=\"pl-s\"></span>\n<span class=\"pl-s\">SyntaxError: Unexpected token <span class=\"pl-pds\">'</span></span>.<span class=\"pl-s\"><span class=\"pl-pds\">'</span></span>\n<span class=\"pl-s\">    at wrapSafe (internal/modules/cjs/loader.js:915:16)</span>\n<span class=\"pl-s\">    at Module._compile (internal/modules/cjs/loader.js:963:27)</span>\n<span class=\"pl-s\">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1027:10)</span>\n<span class=\"pl-s\">    at Module.load (internal/modules/cjs/loader.js:863:32)</span>\n<span class=\"pl-s\">    at Function.Module._load (internal/modules/cjs/loader.js:708:14)</span>\n<span class=\"pl-s\">    at Module.require (internal/modules/cjs/loader.js:887:19)</span>\n<span class=\"pl-s\">    at require (internal/modules/cjs/helpers.js:74:18)</span>\n<span class=\"pl-s\">    at module.exports (/usr/share/nodejs/npm/lib/cli.js:76:23)</span>\n<span class=\"pl-s\">    at Object.&lt;anonymous&gt; (/usr/share/nodejs/npm/bin/npm-cli.js:2:25)</span>\n<span class=\"pl-s\">    at Module._compile (internal/modules/cjs/loader.js:999:30)</span></pre></div>\n<p dir=\"auto\">Throughout this entire scenario NPM has been working as intended and the root cause of this error is the user mis-configuring their environment. However, I believe that since this is detectable situation that <a href=\"https://superuser.com/questions/1504815/how-to-prevent-npm-from-installing-packages-in-home-directory\" rel=\"nofollow\">has been reported by users</a> it is worth adding a warning message to bring attention to a potentially confusing issue.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">It would be ideal to present the user with some sort of warning about installing packages in their home directory so that way they are made aware of the fact that they may be introducing unexpected behaviors in the future.</p>\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"$ cd ~\n$ npm install lodash\nWARNING: Installing NPM packages in your home directory can have unexpected consequences.\nadded 1 package in 943ms\"><pre class=\"notranslate\">$ <span class=\"pl-c1\">cd</span> <span class=\"pl-k\">~</span>\n$ npm install lodash\nWARNING: Installing NPM packages <span class=\"pl-k\">in</span> your home directory can have unexpected consequences.\nadded 1 package <span class=\"pl-k\">in</span> 943ms</pre></div>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://docs.npmjs.com/cli/v10/commands/npm-run-script\" rel=\"nofollow\">npm-run-script | npm Docs</a></li>\n<li><a href=\"https://superuser.com/questions/1504815/how-to-prevent-npm-from-installing-packages-in-home-directory\" rel=\"nofollow\">How to prevent npm from installing packages in home directory? - Super User</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/753",
            "title": "[RRFC] Add a Warning Message When Installing Packages into Home Directory",
            "date_modified": "2024-01-17T18:11:07.000Z",
            "date_published": "2024-01-17T16:55:00.000Z",
            "author": {
                "name": "stevenmhunt",
                "url": "https://github.com/stevenmhunt"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/12551007?u=0f7144ebd151183099707b54c51040039414c186&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">I found two packages that ship Readme.md, <code class=\"notranslate\">chalk</code> and <code class=\"notranslate\">commander.js</code>.</p>\n<p dir=\"auto\">If we stop shipping Readme.md, we can save <code class=\"notranslate\">631GB</code> and <code class=\"notranslate\">1.3TB</code> per week of bandwidth for these two packages.</p>\n<p dir=\"auto\">If we consider all the packages in the NPM ecosystem, I think the bandwidth that can be saved is huge.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\">I created two PRs to propose a lighter version instead of shipping the heaviest Readme.md:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1971508672\" data-permission-text=\"Title is private\" data-url=\"https://github.com/tj/commander.js/issues/2058\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/tj/commander.js/pull/2058/hovercard\" href=\"https://github.com/tj/commander.js/pull/2058\">tj/commander.js#2058</a></li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1971519202\" data-permission-text=\"Title is private\" data-url=\"https://github.com/chalk/chalk/issues/618\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/chalk/chalk/pull/618/hovercard\" href=\"https://github.com/chalk/chalk/pull/618\">chalk/chalk#618</a></li>\n</ul>\n\n<h3 dir=\"auto\">How</h3>\n<p dir=\"auto\">But I think instead of trying to fix each package, maybe we can change the behavior of NPM itself.</p>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Today, we always include README.md.</p>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">Not have to the <code class=\"notranslate\">README.md</code> on the bundle.</p>\n<h2 dir=\"auto\">Possible solutions</h2>\n<p dir=\"auto\">We can remove <code class=\"notranslate\">Readme.md</code> when the repository URL is defined and if <code class=\"notranslate\">Readme.md</code> is not included in the files.<br>\nTo present the content of the <code class=\"notranslate\">NPM</code> page, when it can be fetched from the repository URL.</p>\n<p dir=\"auto\">Only when the user explicitly defines <code class=\"notranslate\">Readme.md</code> in <code class=\"notranslate\">files</code> or when the repository URL is not defined then we will keep <code class=\"notranslate\">Readme.md</code>.</p>\n<p dir=\"auto\">All this behavior must happen in the <code class=\"notranslate\">prepack</code> step because we should not modify the package after it is generated, as there are many packages that send not only the <code class=\"notranslate\">.tgz</code> but also the hash to validate the integrity, so there is no way for <code class=\"notranslate\">NPM</code> modify package contents after publish.</p>",
            "url": "https://github.com/npm/rfcs/issues/744",
            "title": "[RRFC] Avoid distributing Readme.md when is not needed",
            "date_modified": "2023-11-02T15:11:17.000Z",
            "date_published": "2023-11-01T14:37:31.000Z",
            "author": {
                "name": "H4ad",
                "url": "https://github.com/H4ad"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/148863683?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?\"><pre class=\"notranslate\"><code class=\"notranslate\">          Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?\n</code></pre></div>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/dominykas/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/dominykas\">@dominykas</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"553729996\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/92\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/92/hovercard?comment_id=578555614&amp;comment_type=issue_comment\" href=\"https://github.com/npm/rfcs/pull/92#issuecomment-578555614\">#92 (comment)</a></em></p>",
            "url": "https://github.com/npm/rfcs/issues/740",
            "title": "Sorry, maybe I missed something, I know there's the RFC meetings, but can't find the calendar for them - when is this going to be discussed? Is it better to wait for the meeting or post the questions now?",
            "date_modified": "2023-12-02T20:13:12.000Z",
            "date_published": "2023-10-24T11:00:03.000Z",
            "author": {
                "name": "Listen1231",
                "url": "https://github.com/Listen1231"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/3607524?u=a5a9672c9c0a03e290d9c007052f02cda3b224fa&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">At the moment npm audit does not seem to take into account the origin source of a package when delivering alerts. This results in alerts which are written specifically for packages hosted on npm to be delivered erroneously to users who pull packages of matching names from other locations.</p>\n<h3 dir=\"auto\">Example</h3>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1878875912\" data-permission-text=\"Title is private\" data-url=\"https://github.com/github/advisory-database/issues/2701\" data-hovercard-type=\"issue\" data-hovercard-url=\"/github/advisory-database/issues/2701/hovercard?comment_id=1772006702&amp;comment_type=issue_comment\" href=\"https://github.com/github/advisory-database/issues/2701#issuecomment-1772006702\">github/advisory-database#2701 (comment)</a></p>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">Consider the package source when resolving <code class=\"notranslate\">npm audit</code> alerts</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">Alerts do not get erroneously delivered.</p>\n<h3 dir=\"auto\">References</h3>\n<p dir=\"auto\">GitHub advisory database ecosystem definitions:<br>\n<a href=\"https://github.com/github/advisory-database/#supported-ecosystems\">https://github.com/github/advisory-database/#supported-ecosystems</a></p>",
            "url": "https://github.com/npm/rfcs/issues/739",
            "title": "[RRFC] npm audit fix should consider package source in alert delivery",
            "date_modified": "2023-11-16T17:26:40.000Z",
            "date_published": "2023-10-20T21:35:18.000Z",
            "author": {
                "name": "darakian",
                "url": "https://github.com/darakian"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/145306094?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/738",
            "title": "[RRFC] <title>",
            "date_modified": "2023-10-20T13:55:46.000Z",
            "date_published": "2023-10-19T23:17:50.000Z",
            "author": {
                "name": "eye-make",
                "url": "https://github.com/eye-make"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/144815302?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"          ``\"><pre class=\"notranslate\"><code class=\"notranslate\">          ``\n</code></pre></div>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/rondales/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/rondales\">@rondales</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"553729996\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/92\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/92/hovercard?comment_id=1195113260&amp;comment_type=review_comment\" href=\"https://github.com/npm/rfcs/pull/92#discussion_r1195113260\">#92 (comment)</a></em></p>",
            "url": "https://github.com/npm/rfcs/issues/719",
            "title": "``",
            "date_modified": "2023-09-12T14:47:31.000Z",
            "date_published": "2023-09-12T14:44:31.000Z",
            "author": {
                "name": "Metlina3",
                "url": "https://github.com/Metlina3"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/49113249?u=f4418c6cf440024c83b708f52b59d21cbf6ba050&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<div class=\"highlight highlight-source-shell notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"npm ls lodash -P / --production # only list the dependencies used on runtime\"><pre class=\"notranslate\">npm ls lodash -P / --production <span class=\"pl-c\"><span class=\"pl-c\">#</span> only list the dependencies used on runtime</span></pre></div>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<p dir=\"auto\">list all kinds of dependencies</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<p dir=\"auto\">To keep project tiny, sometimes I want to check if some <em>runtime</em> dependency has already imported by others, so I can improt it  no worries</p>\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/718",
            "title": "[RRFC] npm ls support flag to filter product dependencies only",
            "date_modified": "2023-09-07T06:07:03.000Z",
            "date_published": "2023-09-07T02:43:17.000Z",
            "author": {
                "name": "HomyeeKing",
                "url": "https://github.com/HomyeeKing"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/1177034?u=487d11a2bf7629de0b1cc59ddf0249aaba04d10e&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">When developing in a docker environment, rebuilding images and installing dependencies can be quite slow. Using best practices it is recommended to have a docker file with the following steps:</p>\n<ol dir=\"auto\">\n<li>Copy package.json and package-lock.json files into image</li>\n<li>Install dependencies</li>\n<li>Copy rest of application</li>\n</ol>\n<p dir=\"auto\">Doing it this way ensure that we can skip step 2 if nothing has changed in step 1. Ideally this means that step 1 should only contain the minimum to install the dependencies in step 2.</p>\n<p dir=\"auto\">For npm v9 the minimum needed to be able to install dependencies in a production like setting such as a docker file is both the package.json and package-lock.json.</p>\n<p dir=\"auto\">Relying on package.json has some downsides because it is used for a lot of other configuration:</p>\n<ul dir=\"auto\">\n<li>npm scripts</li>\n<li>eslint configuration</li>\n<li>jest configuration</li>\n<li>repository and licence information.</li>\n</ul>\n<p dir=\"auto\">If any of these change then step 2 of the docker build cannot be skipped.</p>\n\n<h3 dir=\"auto\">Example</h3>\n\n<ul dir=\"auto\">\n<li>Solving this would speed up docker builds for people where package.json has changed but package-lock.json has not changed.</li>\n</ul>\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<ul dir=\"auto\">\n<li>Currently both package.json and package-lock.json is needed to be able to install packages.</li>\n</ul>\n<p dir=\"auto\">Trying to install with only a package-lock.json file present results in the following error:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"npm ERR! code ENOENT\nnpm ERR! syscall open\nnpm ERR! path /path/package.json\nnpm ERR! errno -2\nnpm ERR! enoent ENOENT: no such file or directory, open '/path/package.json'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent \"><pre class=\"notranslate\"><code class=\"notranslate\">npm ERR! code ENOENT\nnpm ERR! syscall open\nnpm ERR! path /path/package.json\nnpm ERR! errno -2\nnpm ERR! enoent ENOENT: no such file or directory, open '/path/package.json'\nnpm ERR! enoent This is related to npm not being able to find a file.\nnpm ERR! enoent \n</code></pre></div>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">npm install</code> should support installing from only a package-lock.json</li>\n<li><code class=\"notranslate\">npm ci</code> should support installing from only a package-lock.json.</li>\n</ul>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li>Potentially related RRFC <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"945299627\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/415\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/rfcs/issues/415/hovercard\" href=\"https://github.com/npm/rfcs/issues/415\">#415</a></li>\n<li><a href=\"https://nodejs.org/en/docs/guides/nodejs-docker-webapp\" rel=\"nofollow\">Recommended docker file for node</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/717",
            "title": "[RRFC] Support installing from only a lock file",
            "date_modified": "2023-09-08T08:23:25.000Z",
            "date_published": "2023-09-06T14:44:53.000Z",
            "author": {
                "name": "gingermusketeer",
                "url": "https://github.com/gingermusketeer"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/142171396?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n\n<h3 dir=\"auto\">Example</h3>\n\n<h3 dir=\"auto\">How</h3>\n<h4 dir=\"auto\">Current Behaviour</h4>\n\n<h4 dir=\"auto\">Desired Behaviour</h4>\n\n<h3 dir=\"auto\">References</h3>\n\n<ul dir=\"auto\">\n<li>n/a</li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/716",
            "title": "[RRFC] <title>work",
            "date_modified": "2023-12-02T20:13:25.000Z",
            "date_published": "2023-08-26T21:57:45.000Z",
            "author": {
                "name": "DaveS143",
                "url": "https://github.com/DaveS143"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/8186898?u=28df40b65e7f26ab3d18fefb10c7b27a74531ea2&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>\n<h2 dir=\"auto\">Motivation (\"The Why\")</h2>\n<p dir=\"auto\">Since our <a href=\"npmjs.com\">npmjs.com</a> supports light mode only, we should add the CSS <code class=\"notranslate\">:root { color-scheme: only light }</code> to our page.</p>\n<p dir=\"auto\">According to GitHub's documentation <a href=\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#specifying-the-theme-an-image-is-shown-to\">Specifying the theme an image is shown to</a>, more and more projects are changing their code to <code class=\"notranslate\">&lt;picture&gt;</code> tags to support dark mode.</p>\n<p dir=\"auto\">But our <a href=\"npmjs.com\">npmjs.com</a> didn't set the <code class=\"notranslate\">color-scheme</code>, which means it will show dark mode pictures when a user changes the operating system color theme to dark on <a href=\"npmjs.com\">npmjs.com</a>.</p>\n<h3 dir=\"auto\">How</h3>\n<p dir=\"auto\">Add a <code class=\"notranslate\">&lt;picture&gt;</code> to the page. You can test with this code below:</p>\n<div class=\"highlight highlight-text-html-basic notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&lt;picture&gt;\n  &lt;source media=&quot;(prefers-color-scheme: dark)&quot; srcset=&quot;https://cdn.simpleicons.org/npm/blue&quot;&gt;\n  &lt;source media=&quot;(prefers-color-scheme: light)&quot; srcset=&quot;https://cdn.simpleicons.org/npm/red&quot;&gt;\n  &lt;img alt=&quot;Simple Icons&quot; width=70 src=&quot;https://cdn.simpleicons.org/npm/red&quot;&gt;\n&lt;/picture&gt;\"><pre class=\"notranslate\"><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">picture</span><span class=\"pl-kos\">&gt;</span>\n  <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">source</span> <span class=\"pl-c1\">media</span>=\"<span class=\"pl-s\">(prefers-color-scheme: dark)</span>\" <span class=\"pl-c1\">srcset</span>=\"<span class=\"pl-s\">https://cdn.simpleicons.org/npm/blue</span>\"<span class=\"pl-kos\">&gt;</span>\n  <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">source</span> <span class=\"pl-c1\">media</span>=\"<span class=\"pl-s\">(prefers-color-scheme: light)</span>\" <span class=\"pl-c1\">srcset</span>=\"<span class=\"pl-s\">https://cdn.simpleicons.org/npm/red</span>\"<span class=\"pl-kos\">&gt;</span>\n  <span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">img</span> <span class=\"pl-c1\">alt</span>=\"<span class=\"pl-s\">Simple Icons</span>\" <span class=\"pl-c1\">width</span>=<span class=\"pl-s\">70</span> <span class=\"pl-c1\">src</span>=\"<span class=\"pl-s\">https://cdn.simpleicons.org/npm/red</span>\"<span class=\"pl-kos\">&gt;</span>\n<span class=\"pl-kos\">&lt;/</span><span class=\"pl-ent\">picture</span><span class=\"pl-kos\">&gt;</span></pre></div>\n<p dir=\"auto\">Or use an image which has <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\" rel=\"nofollow\">prefers-color-scheme</a> inside:</p>\n<div class=\"highlight highlight-text-html-basic notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"&lt;img src=&quot;https://cdn.simpleicons.org/npm/red/blue&quot; /&gt;\"><pre class=\"notranslate\"><span class=\"pl-kos\">&lt;</span><span class=\"pl-ent\">img</span> <span class=\"pl-c1\">src</span>=\"<span class=\"pl-s\">https://cdn.simpleicons.org/npm/red/blue</span>\" /&gt;</pre></div>\n<p dir=\"auto\">Then you can switch your operating system to dark mode.</p>\n<h4 dir=\"auto\">Current Behaviour</h4>\n<p dir=\"auto\">It will show a blue color image on the page.</p>\n<h4 dir=\"auto\">Desired Behaviour</h4>\n<p dir=\"auto\">The image should be kept in red for light mode.</p>\n<h3 dir=\"auto\">References</h3>\n<ul dir=\"auto\">\n<li><a href=\"https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#specifying-the-theme-an-image-is-shown-to\">Specifying the theme an image is shown to</a></li>\n</ul>",
            "url": "https://github.com/npm/rfcs/issues/712",
            "title": "[RRFC] Set website color scheme to only light",
            "date_modified": "2023-07-25T13:48:40.000Z",
            "date_published": "2023-07-25T08:01:30.000Z",
            "author": {
                "name": "LitoMore",
                "url": "https://github.com/LitoMore"
            }
        }
    ]
}