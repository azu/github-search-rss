{
    "version": "https://jsonfeed.org/version/1",
    "title": "npm/statusboard Issues",
    "home_page_url": "https://azu.github.io/github-search-rss/npm-statusboard.json",
    "feed_url": "https://azu.github.io/github-search-rss/npm-statusboard.json",
    "description": "npm/statusboard Issues on GitHub",
    "items": [
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">In a world where folks are using <code class=\"notranslate\">@npmcli/config</code> in pairing with <code class=\"notranslate\">libnpm*</code> libs, the <code class=\"notranslate\">npm-version</code> config item is a bit of an anachronism.  It only makes sense in the cli itself, and we don't use it in very many places.</p>\n<p dir=\"auto\">We should revisit how this is used/consumed and what it means.  Should this just be a passed in <code class=\"notranslate\">_id</code> from whatever package is consuming the config/libnpm* module?  In the places we are using it, is it appropriate to pull it from config and not the npm object itself?</p>",
            "url": "https://github.com/npm/statusboard/issues/682",
            "title": "Revisit `npm-version` config item",
            "date_modified": "2023-06-06T14:12:27.000Z",
            "date_published": "2023-06-06T14:12:27.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/542108?u=2c20c6b8a5298ef8cccf5e4cf0013bae865d0dc7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">currently the pack command does not use anything except pacote to prepare the manifest before creating a tarball. this behavior being different than publish can lead to subtle bugs such as the one caught during v9.7.0 release (TODO LINK).</p>\n<p dir=\"auto\">in this case our smoke test was packing and installing a tarball with the assumption that the only difference was the scripts being run and the registry being hit. but since the bins ended up being different the bug wasn't caught.</p>\n<p dir=\"auto\">i know we want to make less things in the manifest altered during publish, but i think an initial push towards parity between both commands will make future changes easier to implement across both commands.</p>\n<h4 dir=\"auto\">breaking change?</h4>\n<p dir=\"auto\">i think that applying the same behavior to a tarball during pack as during publish should be considered a bugfix. my guess is that creating a tarball during publish is much more popular than packing and publishing separately.</p>",
            "url": "https://github.com/npm/statusboard/issues/679",
            "title": "npm pack should prepare manifests the same as publish",
            "date_modified": "2023-06-05T23:03:01.000Z",
            "date_published": "2023-06-02T01:39:38.000Z",
            "author": {
                "name": "lukekarrys",
                "url": "https://github.com/lukekarrys"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/398027?u=1063798e2298b8b25969db45617376723d221efe&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">We have a handful of command line flags that we'd love to function as boolean-or-string values:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">browser</code> - Can be <code class=\"notranslate\">true</code>/<code class=\"notranslate\">false</code> or accept the path to the browser (currently configured as <code class=\"notranslate\">type: [null, Boolean, String]</code> but doesn't really work as intended).</li>\n<li><code class=\"notranslate\">expect-entries</code> - Can be <code class=\"notranslate\">true</code>/<code class=\"notranslate\">false</code> or specify the number of entries to match.</li>\n<li><code class=\"notranslate\">provenance</code> - Currently accepts <code class=\"notranslate\">true</code>/<code class=\"notranslate\">false</code>, but would like the ability to accept the path to an externally-generated provenance statement.</li>\n</ul>\n<p dir=\"auto\">There's some question as to whether this sort of overloading is even the right approach, but the bottom line is that <code class=\"notranslate\">nopt</code> can't properly handle this use case.</p>\n<p dir=\"auto\">As an alternative to overloaded flags, we could allow for sets of related flags that are mutually exclusive:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">browser</code> becomes <code class=\"notranslate\">browser</code> OR <code class=\"notranslate\">browser-path</code></li>\n<li><code class=\"notranslate\">expected-entries</code> becomes <code class=\"notranslate\">expected-entries</code> OR <code class=\"notranslate\">expected-entries-count</code></li>\n<li><code class=\"notranslate\">provenance</code> becomes <code class=\"notranslate\">provenance</code> OR <code class=\"notranslate\">provenance-path</code></li>\n</ul>\n<p dir=\"auto\">The feature we're missing is some way to indicate that the usage of flags within a given set is mutually exclusive -- preventing the user from specifying conflicting options (like generating provenance AND accepting an existing provenance)</p>\n<h2 dir=\"auto\">Configuration</h2>\n<p dir=\"auto\">When defining command line flags we'll need some way to indicate the sets of mutually exclusive flags:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"define('provenance', {\n  default: false,\n  type: Boolean,\n  description: 'Generate provenance statement on publish',\n  exclusive: ['provenance-path'],\n})\n\ndefine('provenance-path', {\n  default: null,\n  type: path,\n  description: 'Path to provenance statement to publish with package',\n  exclusive: ['provenance'],\n})\"><pre class=\"notranslate\"><span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Generate provenance statement on publish'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">exclusive</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'provenance-path'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance-path'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Path to provenance statement to publish with package'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">exclusive</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'provenance'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<p dir=\"auto\">Our existing examples all have a pair of related flags, but there's no reason we couldn't support larger sets of related flags -- using an <code class=\"notranslate\">Array</code> for the <code class=\"notranslate\">exclusive</code> attribute gives us flexibility to configure related flag sets of any size.</p>\n<p dir=\"auto\">It should be encouraged (but not required) that each flag in an exclusive set list it's excluded partners. In the example above, each flag lists the other in the <code class=\"notranslate\">exclusive</code> set, however, the behavior shouldn't change if we were to omit one of the <code class=\"notranslate\">exclusive</code> attributes.</p>\n<p dir=\"auto\">Either of the following configs should be functionally equivalent to the config show above:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"define('provenance', {\n  default: false,\n  type: Boolean,\n  description: 'Generate provenance statement on publish',\n})\n\ndefine('provenance-path', {\n  default: null,\n  type: path,\n  description: 'Path to provenance statement to publish with package',\n  exclusive: ['provenance'],\n})\"><pre class=\"notranslate\"><span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Generate provenance statement on publish'</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance-path'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Path to provenance statement to publish with package'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">exclusive</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'provenance'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" dir=\"auto\" data-snippet-clipboard-copy-content=\"define('provenance', {\n  default: false,\n  type: Boolean,\n  description: 'Generate provenance statement on publish',\n  exclusive: ['provenance-path'],\n})\n\ndefine('provenance-path', {\n  default: null,\n  type: path,\n  description: 'Path to provenance statement to publish with package',\n})\"><pre class=\"notranslate\"><span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-v\">Boolean</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Generate provenance statement on publish'</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">exclusive</span>: <span class=\"pl-kos\">[</span><span class=\"pl-s\">'provenance-path'</span><span class=\"pl-kos\">]</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span>\n\n<span class=\"pl-en\">define</span><span class=\"pl-kos\">(</span><span class=\"pl-s\">'provenance-path'</span><span class=\"pl-kos\">,</span> <span class=\"pl-kos\">{</span>\n  <span class=\"pl-c1\">default</span>: <span class=\"pl-c1\">null</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">type</span>: <span class=\"pl-s1\">path</span><span class=\"pl-kos\">,</span>\n  <span class=\"pl-c1\">description</span>: <span class=\"pl-s\">'Path to provenance statement to publish with package'</span><span class=\"pl-kos\">,</span>\n<span class=\"pl-kos\">}</span><span class=\"pl-kos\">)</span></pre></div>\n<h2 dir=\"auto\">Behavior</h2>\n<h3 dir=\"auto\">Help</h3>\n<p dir=\"auto\">When help is rendered for a command with exclusive flags, it would be helpful if the output conveyed that only one of the related flags can be specified at a time:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Publish a package\n\nUsage:\nnpm publish &lt;package-spec&gt;\n\nOptions:\n[--provenance | --provenance-path &lt;provenance-file&gt;] . . .\"><pre class=\"notranslate\"><code class=\"notranslate\">Publish a package\n\nUsage:\nnpm publish &lt;package-spec&gt;\n\nOptions:\n[--provenance | --provenance-path &lt;provenance-file&gt;] . . .\n</code></pre></div>\n<p dir=\"auto\">We may need to pick something other than <code class=\"notranslate\">|</code> character to signal the \"OR\" relationship here since it's already being used show the short and long forms of a flag:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[-ws|--workspaces]\"><pre class=\"notranslate\"><code class=\"notranslate\">[-ws|--workspaces]\n</code></pre></div>\n<p dir=\"auto\">Would be nice to have this information surfaced in the detailed help as well:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"   provenance\n\n       •   Default: false\n\n       •   Type: Boolean\n\n       When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it\n       was built and published from.\n\n       Cannot be used when any of the following flags are provided: &quot;provenance-path&quot;\"><pre class=\"notranslate\"><code class=\"notranslate\">   provenance\n\n       •   Default: false\n\n       •   Type: Boolean\n\n       When publishing from a supported cloud CI/CD system, the package will be publicly linked to where it\n       was built and published from.\n\n       Cannot be used when any of the following flags are provided: \"provenance-path\"\n</code></pre></div>\n<h3 dir=\"auto\">Errors</h3>\n<p dir=\"auto\">If a user specifies any combination of flags that appear in the same exclusive set they should receive an error</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ npm publish --provenance-path /tmp/provenance --provenance\n\nnpm ERR! --provenance cannot be provided when using --provenance-path\"><pre class=\"notranslate\"><code class=\"notranslate\">$ npm publish --provenance-path /tmp/provenance --provenance\n\nnpm ERR! --provenance cannot be provided when using --provenance-path\n</code></pre></div>",
            "url": "https://github.com/npm/statusboard/issues/677",
            "title": "add support for exclusive command line flags",
            "date_modified": "2023-05-23T17:51:04.000Z",
            "date_published": "2023-05-18T22:14:30.000Z",
            "author": {
                "name": "bdehamer",
                "url": "https://github.com/bdehamer"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Previously this was done inside cacache using promise-inflight.  Realistically this should be done at the fetch level.</p>",
            "url": "https://github.com/npm/statusboard/issues/674",
            "title": "[task] re-introduce async duplication prevention",
            "date_modified": "2023-05-16T16:19:39.000Z",
            "date_published": "2023-05-12T18:11:22.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Epic</h3>\n<p dir=\"auto\">There is a lot of manipulation that read-package-json does when preparing a manifest for publishing. Not all of it can be removed but some if it can (such as typo corrections).  In order to stop doing that in the next semver-major we need to identify which changes we can stop doing, and start warning the user about them now.</p>\n<p dir=\"auto\">A command to apply the fixes needs to also exist to easily clear the warnings.</p>\n<p dir=\"auto\">Rough roadmap:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> move read-package-json functionality into <code class=\"notranslate\">@npmcli/package-json</code> as-is</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> move npm publish to use <code class=\"notranslate\">@npmcli/package-json</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> identify which changes to warn about and start warning</li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/672",
            "title": "[epic] warn users when altering package.json during publish",
            "date_modified": "2023-05-09T17:43:57.000Z",
            "date_published": "2023-05-09T17:43:42.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/424045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">we have an RRFC that has been discussed and consensus has been reached - we should support the <code class=\"notranslate\">libc</code> field when installing packages.</p>\n<p dir=\"auto\">RRFC: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"979042007\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/438\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/rfcs/issues/438/hovercard\" href=\"https://github.com/npm/rfcs/issues/438\">npm/rfcs#438</a></p>",
            "url": "https://github.com/npm/statusboard/issues/657",
            "title": "add support for `libc` field when verifying engines",
            "date_modified": "2023-03-20T18:01:34.000Z",
            "date_published": "2023-03-20T18:00:22.000Z",
            "author": {
                "name": "nlf",
                "url": "https://github.com/nlf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/424045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nCurrently we set licenses to <code class=\"notranslate\">ISC</code> by default</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nWe should not select a default license on behalf of our users. Instead we should default to omitting the license field entirely in non-interactive mode, and in interactive mode require that the user either provides a value or confirms that they do not want to select a license at all. As a bonus it would be nice if we had a site to link to that helps our users select a license that fits their needs.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&gt; npm init\nlicense: &lt;enter&gt;\n\nleaving this field blank means your package is unlicensed. if you're sure, press enter again to continue\nlicense: &lt;enter&gt;\"><pre class=\"notranslate\"><code class=\"notranslate\">&gt; npm init\nlicense: &lt;enter&gt;\n\nleaving this field blank means your package is unlicensed. if you're sure, press enter again to continue\nlicense: &lt;enter&gt;\n</code></pre></div>\n<p dir=\"auto\"><strong>Describe alternatives you've considered</strong><br>\nThe license default could change, but a new default means that we are once again providing a default that may not align with users needs. It feels best to not provide a license by default at all.</p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1265310367\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/597\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/rfcs/issues/597/hovercard\" href=\"https://github.com/npm/rfcs/issues/597\">npm/rfcs#597</a></p>",
            "url": "https://github.com/npm/statusboard/issues/655",
            "title": "make the license field of `npm init` more stubborn",
            "date_modified": "2023-03-13T18:03:31.000Z",
            "date_published": "2023-03-13T17:52:37.000Z",
            "author": {
                "name": "nlf",
                "url": "https://github.com/nlf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/424045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nWith the current trends of node developers tending to write es6 modules instead of commonjs ones, there is immediate value to be had by allowing users to set a default type for new modules when running <code class=\"notranslate\">npm init</code></p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nThe <code class=\"notranslate\">init-type</code> (or <code class=\"notranslate\">init.type</code>) field should be supported. The default should be set to <code class=\"notranslate\">commonjs</code> and the only other allowed value <code class=\"notranslate\">module</code>.</p>\n<p dir=\"auto\"><strong>Describe alternatives you've considered</strong><br>\nUsers could write their own init module, but documentation there is lacking and this field impacts all of the nodejs community in some way. It's best to support it as a first class value.</p>\n<p dir=\"auto\"><strong>Additional context</strong><br>\n<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"839922614\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/347\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/rfcs/issues/347/hovercard\" href=\"https://github.com/npm/rfcs/issues/347\">npm/rfcs#347</a></p>",
            "url": "https://github.com/npm/statusboard/issues/654",
            "title": "support `init-type` config",
            "date_modified": "2023-03-13T17:42:18.000Z",
            "date_published": "2023-03-13T17:40:52.000Z",
            "author": {
                "name": "nlf",
                "url": "https://github.com/nlf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Epic</h3>\n<p dir=\"auto\">npm currently only \"validates\" config from nopt (i.e. from the cli itself).  It warns when values aren't correct.</p>\n<p dir=\"auto\">Incorrect values from npmrc files are silently ignored, sometimes resulting in invalid types and other times resulting in npmrc config being silently ignored.</p>\n<p dir=\"auto\">npm needs to validate the config it loads from npmrc files and warn in the same way it does when parsing argv</p>",
            "url": "https://github.com/npm/statusboard/issues/653",
            "title": "Validate config from files",
            "date_modified": "2023-03-09T18:22:39.000Z",
            "date_published": "2023-03-09T18:22:39.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Log output going to stdout does not need to match what's in the logs. It's way too repetitive.<br>\nLot output customization would be helpful (basic templating like <code class=\"notranslate\">\"{index} {level}: {subject}\\n{message}\"</code></p>\n<p dir=\"auto\">urls should always be on their own line (good first output linting rule)</p>\n<p dir=\"auto\">Linting is harder because unlike html the source is completely decoupled from the output.  There's no source to meaningfully lint.  It will have to be output testing.  We already have a mock npm object that knows everything it sent to stdout.  The teardown (or t.after) for that object is where we can start to do static analysis of cli output.</p>\n<p dir=\"auto\">normal stdout does not need to be considered part of the semver contract (json and parseable still are of course)</p>\n<p dir=\"auto\">markdown and commit messages should not have line length limits.</p>",
            "url": "https://github.com/npm/statusboard/issues/652",
            "title": "a11y office hours notes",
            "date_modified": "2023-03-08T20:23:05.000Z",
            "date_published": "2023-03-08T15:30:50.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/7879476?u=87176db8f8b5699253411865f7d52a90faf5ff54&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Please see this <a href=\"https://github.com/npm/rfcs/pull/519\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/519/hovercard\">Pull Request </a> for latest updates.</p>",
            "url": "https://github.com/npm/statusboard/issues/647",
            "title": "Package Distributions ",
            "date_modified": "2023-03-08T04:59:10.000Z",
            "date_published": "2023-02-28T11:42:50.000Z",
            "author": {
                "name": "raiyanalam",
                "url": "https://github.com/raiyanalam"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Split audit and node-integration into separate columns outside of status</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Consistently name CI jobs for filtering across repos</li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/643",
            "title": "working to get statusboard green",
            "date_modified": "2023-02-13T17:51:15.000Z",
            "date_published": "2023-02-02T18:23:29.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/424045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Epic</h3>\n<p dir=\"auto\">A common problem in the npm ecosystem is the need to distribute pre-compiled binary assets. To do this today involves either a <code class=\"notranslate\">postinstall</code> script in the package that fetches the asset that corresponds to the current system, or publishing each binary asset as its own package in npm and using optional dependencies on all of them, or potentially a combination of those approaches.</p>\n<p dir=\"auto\">None of these alternatives is ideal. A <code class=\"notranslate\">postinstall</code> script means that users cannot use the <code class=\"notranslate\">--ignore-scripts</code> flag or the script won't run. The use of a series of optional dependencies requires the consumer to attempt to require every one of them in sequence until they find one that's installed (or don't!). It also means that the package-lock.json will only include the optional dependency that was actually installed as part of this particular installation.</p>\n<h3 dir=\"auto\">Exit criteria</h3>\n<ol dir=\"auto\">\n<li>A package should have a means of defining <code class=\"notranslate\">distributions</code>, a means of mapping system parameters to specific sub-packages.</li>\n<li>Distribution sets should be <em>fully included</em> in the <code class=\"notranslate\">package-lock.json</code> in order to eliminate churn and correctly lock <em>all</em> distributions available rather than only the one that successfully installed on the current host.</li>\n<li>Only <em>one</em> matching distribution should actually get installed by default.</li>\n<li>Packages at any depth in the tree should be able to request specific distributions of their dependencies.</li>\n</ol>\n<h3 dir=\"auto\">Tasks</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> review existing RFC</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> answer open questions from RFC</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> review prior art of yarn's package variants proposal - <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"857595978\" data-permission-text=\"Title is private\" data-url=\"https://github.com/yarnpkg/berry/issues/2751\" data-hovercard-type=\"issue\" data-hovercard-url=\"/yarnpkg/berry/issues/2751/hovercard\" href=\"https://github.com/yarnpkg/berry/issues/2751\">yarnpkg/berry#2751</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> investigate potential backwards compatibility</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> determine how the consuming package knows which (if any) distribution is available (<code class=\"notranslate\">require</code> them all?)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> contact some projects who could benefit from distributions and discuss their needs</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> ask ourselves if we're solving the <em>right</em> problem, do we want to make the current workarounds easier or do we want to create a brand new flow?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> rewrite existing RFC to align with data gathered here</li>\n</ul>\n<h3 dir=\"auto\">Immediately actionable items</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"979042007\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/438\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/rfcs/issues/438/hovercard\" href=\"https://github.com/npm/rfcs/issues/438\">npm/rfcs#438</a></li>\n</ul>\n<h3 dir=\"auto\">Feature ideas</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ability to install additional non-matching distributions to allow builds to be performed on a different type of host</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> more fields to match against (see <code class=\"notranslate\">libc</code> rfc above) possibly allowing all of the fields in <code class=\"notranslate\">process.versions</code>, known requests for <code class=\"notranslate\">os</code>, <code class=\"notranslate\">os-version</code>, <code class=\"notranslate\">cpu</code>, <code class=\"notranslate\">libc</code>, <code class=\"notranslate\">libc-version</code>, <code class=\"notranslate\">runtime</code> (<code class=\"notranslate\">node</code>/<code class=\"notranslate\">electron</code>/<code class=\"notranslate\">deno</code>/<code class=\"notranslate\">browser</code>)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> fall through that allows a source package to be installed and built when no match is available</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> more types of distributions, i.e. <code class=\"notranslate\">esm</code> vs <code class=\"notranslate\">commonjs</code>, <code class=\"notranslate\">slim</code> (omits docs), <code class=\"notranslate\">locales</code>, possibly arbitrary tag selectors?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ability to specify distributions as arbitrary files that are fetched and placed within the package's own directory</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> overrides should work for specifying a variant of a third party dependency at any depth</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> allow for providing integrity checksums (if distributions are each their own npm packages we more or less get this for free)</li>\n</ul>\n<h3 dir=\"auto\">Supporting documentation</h3>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1122163157\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/rfcs/issues/519\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/npm/rfcs/pull/519/hovercard\" href=\"https://github.com/npm/rfcs/pull/519\">npm/rfcs#519</a></li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/642",
            "title": "Package Distributions",
            "date_modified": "2023-03-16T16:49:50.000Z",
            "date_published": "2023-01-31T22:01:08.000Z",
            "author": {
                "name": "nlf",
                "url": "https://github.com/nlf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/5888249?u=6523cc0547f97dc9125b1cb19a61f992e7b06a86&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/>",
            "url": "https://github.com/npm/statusboard/issues/641",
            "title": "Get the Nodejs contract and alignment documented in Node repo",
            "date_modified": "2023-03-16T20:16:31.000Z",
            "date_published": "2023-01-31T20:35:06.000Z",
            "author": {
                "name": "saquibkhan",
                "url": "https://github.com/saquibkhan"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/36607?u=79d8c114db476a7ecc6328b328f71d9d758368c7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Discussion issue for deciding the <code class=\"notranslate\">engines</code> entry in future npm versions.</p>\n<p dir=\"auto\">Recently the setting has been a balance between all currently supported node versions at the time of setting, and features within those major node versions we expect to use in npm in the next year.</p>\n<p dir=\"auto\">We may want to consider being more aggressive with the floor of the range, only including versions of node in which this version of npm is expected to be targeted for a backport.</p>",
            "url": "https://github.com/npm/statusboard/issues/640",
            "title": "Engines setting for npm 10 and beyond",
            "date_modified": "2023-01-31T18:08:19.000Z",
            "date_published": "2023-01-31T18:00:40.000Z",
            "author": {
                "name": "wraithgar",
                "url": "https://github.com/wraithgar"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/7879476?u=87176db8f8b5699253411865f7d52a90faf5ff54&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">This epic is a continuation of <a href=\"https://github.com/npm/statusboard/issues/414\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/statusboard/issues/414/hovercard\">Linked Install Strategy - part 1</a></p>\n<p dir=\"auto\">Bugs</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1558599556\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/statusboard/issues/637\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/statusboard/issues/637/hovercard\" href=\"https://github.com/npm/statusboard/issues/637\">#637</a></li>\n</ul>\n<h3 dir=\"auto\">Exit Criteria</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> testing complete\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> MS Outlook hands on testing</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> new smoke tests with linked install strategy</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> cigtm with linked install strategy</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> any major bug fixes closed</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> msft team onboared and migrated to npm</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Performance benchmark and numbers</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> npmjs Document changes</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> announcement blog post</li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/639",
            "title": "Linked Install Strategy - part 2 | Testing & Migration",
            "date_modified": "2023-03-23T16:59:46.000Z",
            "date_published": "2023-01-31T16:10:37.000Z",
            "author": {
                "name": "raiyanalam",
                "url": "https://github.com/raiyanalam"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/91213?u=c5d308beaf78f91744200e6507109f04ad881503&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><h3 dir=\"auto\">Outcomes</h3>\n<ul dir=\"auto\">\n<li>Performance: Facilitate npm in resource constrained environments (Android, Dev Boards, cheaper CI, better GitHub Actions performance)</li>\n<li>Composibility: Additional Workflows and Modes (<code class=\"notranslate\">npm add</code>, support more community tool workflows)</li>\n<li>Better Dev Momentum (composable approach with isolated logic leads to easier feature adds and bugfixes)</li>\n</ul>\n<h3 dir=\"auto\">Current Shortcomings</h3>\n<ul dir=\"auto\">\n<li>Package tree objects contain getters and setters with a lot of embedded logic, making the debugging of workflows difficult, and supporting more workflows impossible. <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1173932050\" data-permission-text=\"Title is private\" data-url=\"https://github.com/npm/statusboard/issues/469\" data-hovercard-type=\"issue\" data-hovercard-url=\"/npm/statusboard/issues/469/hovercard\" href=\"https://github.com/npm/statusboard/issues/469\">#469</a></li>\n<li>State is built across Arborist in a single assumed workflow, making debugging difficult and supporting more features spread everywhere.</li>\n<li>Coding style has an emphasis on a single mixed-in object with strict access restrictions, leading to difficult to read code. Newer JS features makes much of this unnecessary.</li>\n<li>Parallelization and resource restrictions are currently unbounded.</li>\n</ul>\n<h3 dir=\"auto\">Philosophy</h3>\n<p dir=\"auto\">A composable function-based approach, avoiding embedded logic, keeping descriptive tasks isolated and small.</p>\n<ul dir=\"auto\">\n<li>Tree objects should not have embedded logic beyond initialization. Getters should be used sparingly, and setters not at all. Functionally mutating the tree should be done with outside or static functions, isolated in purpose.\n<ul dir=\"auto\">\n<li>Adding or removing nodes from the tree should not mutate other nodes. If mutation logic is required, an external or static function should be used.</li>\n</ul>\n</li>\n<li>Tree attributes should have clearly documented single values (for example, the current <code class=\"notranslate\">Node.name</code> could be any number of values symbolizing the path or package name).</li>\n<li>A dependency tree, disk tree, dependency diff, and disk diff tree serve separate purposes, although may be linked on a node-by-node basis.</li>\n</ul>\n<p dir=\"auto\">The main <code class=\"notranslate\">Arborist</code> class should keep minimal state relating to configuration and command arguments.</p>\n<ul dir=\"auto\">\n<li>Workflow functions keep state logic as scoped variables rather than instance-wide.</li>\n<li>Workflow functions should be clearly labeled by naming convention or comments</li>\n<li>A functions set of purposes of creating new tree object, mutating a tree, accesses io, mutating the disk should be clearly labeled by naming convention, arguments, or comments</li>\n<li>A functions purpose must be kept as singular as practical.\n<ul dir=\"auto\">\n<li>A function should not both mutate a tree and the disk, for example.</li>\n</ul>\n</li>\n</ul>\n<p dir=\"auto\">Workflow functions should manage parallelization intelligently through Promises.</p>\n<ul dir=\"auto\">\n<li>Gathering promises into arrays should be done when parallelization is possible.</li>\n<li><code class=\"notranslate\">Promise.any</code>, <code class=\"notranslate\">all</code>, <code class=\"notranslate\">finally</code>, etc should be used</li>\n<li>IO operations, specifically package retrieval and extraction, should be done ask Tasks that can be parallelized or broken into separate workers or processes.</li>\n</ul>\n<p dir=\"auto\">The API is organized into two tiers for different audiences. The primary APIs should be Query results, Workflow functions, and CLI. Secondarily, developers should have access to the small functions that make up Workflows as well as Tree objects composed of Nodes and Links for writing their own workflows.</p>\n<h3 dir=\"auto\">Testing Brainstorm</h3>\n<p dir=\"auto\">Remove coverage map, fix coverage (1 week)<br>\nFind single point to start new testing.  Tests go in net new area (precedent for this is in npm 7).  This is where we flesh out the starting points for the rest of the epic. (2 weeks)<br>\nThe rest of the quarter is spent writing/porting tests to the new format.  Refactoring can only happen when the new tests fully cover a file we want to change.</p>\n<p dir=\"auto\">Part of this is going to be defining the surface area of Arborist.  This is not easy to do currently and realistically is going to fall out of the new tests. As we write new tests one criteria we need to think about is \"Is this part of the surface area of arborist that we plan on supporting going forward?</p>\n<h3 dir=\"auto\">New testing plan:</h3>\n<p dir=\"auto\">Come up with new / existing mocks for how we want to interface w/ arborist.  This will need to be only what we need each time, but made in a way we can expand as we go.  Mock-registry is the pattern for this.</p>\n<ul dir=\"auto\">\n<li>mock registry (exists, will likely need expanding as we iterate)</li>\n<li>mock packages (mock registry does some of this but not on disk)</li>\n<li>assertions of state need to be meaningful.  What are we testing?  formatSnapshot</li>\n<li>testing disk state.  packuments match fixtures?  what about script execution?</li>\n<li>testing logical state.  formatSnapshot will be the big thing here.  npm query output is maybe a good starting point?  how do nodes serialize?</li>\n</ul>\n<p dir=\"auto\">npm snapshot command tests are probably the best latest iteration on this idea, setting t.context.  for testing both disk and logical state</p>\n<h3 dir=\"auto\">Steps</h3>",
            "url": "https://github.com/npm/statusboard/issues/638",
            "title": "Epic: Refactor Arborist for Performance and Flexiblity",
            "date_modified": "2023-01-30T17:46:49.000Z",
            "date_published": "2023-01-27T00:10:46.000Z",
            "author": {
                "name": "fritzy",
                "url": "https://github.com/fritzy"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/91213?u=c5d308beaf78f91744200e6507109f04ad881503&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">This issue tracks known issues, feedback, fixes, and broken repos for <code class=\"notranslate\">--install-strategy=linked</code></p>\n<h2 dir=\"auto\">Known Issues/Fixes:</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> workspace specific installs failing\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">.children</code> should be <code class=\"notranslate\">CaseInsensitiveMap</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">.inventory</code> might as well be <code class=\"notranslate\">Inventory</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> .bin discovery failing (although placed correctly)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> package cleanup breaking on failed installs (possibly related to build scripts)</li>\n</ul>\n<h2 dir=\"auto\">Known Failed Repos/Packages:</h2>\n<ul dir=\"auto\">\n<li>npm/cli narrowed down to a specific workspace <code class=\"notranslate\">-ws</code></li>\n<li><a href=\"https://github.com/npm/documentation\">https://github.com/npm/documentation</a></li>\n<li><code class=\"notranslate\">npm install --install-strategy=linked lmbd</code></li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/637",
            "title": "Linked Install Strategy Bugs and Feedback",
            "date_modified": "2023-02-16T18:12:27.000Z",
            "date_published": "2023-01-26T18:43:48.000Z",
            "author": {
                "name": "fritzy",
                "url": "https://github.com/fritzy"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/424045?v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong></p>\n<p dir=\"auto\">Yes. For example, if a user runs <code class=\"notranslate\">npm install --legacy-peer-deps</code> followed by <code class=\"notranslate\">npm ls</code> without including the <code class=\"notranslate\">--legacy-peer-deps</code> flag, they will see errors in their tree related to peer dependencies. Running <code class=\"notranslate\">npm ls --legacy-peer-deps</code> however, returns correctly.</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong></p>\n<p dir=\"auto\">We should store flags that impact the shape of the dependency tree in the package-lock.json, this way future commands can be aware those flags were used and can enable them, providing our users a more consistent experience. For our users who disable <code class=\"notranslate\">package-lock.json</code> (like ourselves, we do that) this data should be persisted in the hidden lockfile as well.</p>\n<p dir=\"auto\"><strong>Describe alternatives you've considered</strong></p>\n<p dir=\"auto\">The only alternative I can think of is implicitly saving these settings to a project level <code class=\"notranslate\">.npmrc</code>. This could be a viable approach too.</p>\n<p dir=\"auto\"><strong>Additional context</strong></p>\n<p dir=\"auto\">Here's a spot to link related issues as we find them:</p>",
            "url": "https://github.com/npm/statusboard/issues/636",
            "title": "feat: store flags that impact tree building in the package-lock.json",
            "date_modified": "2023-01-26T18:34:49.000Z",
            "date_published": "2023-01-26T17:24:47.000Z",
            "author": {
                "name": "nlf",
                "url": "https://github.com/nlf"
            }
        },
        {
            "content_html": "<img src=\"https://avatars.githubusercontent.com/u/542108?u=2c20c6b8a5298ef8cccf5e4cf0013bae865d0dc7&v=4\" width=\"64\" height=\"64\" alt=\"\"/><br/><p dir=\"auto\">Here's a list of flaky tests I've seen across our supported repos:</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">npm/cli</code>: get node integration green</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">@npmcli/arborist</code>: <a href=\"https://github.com/npm/cli/actions/runs/3928786524\">https://github.com/npm/cli/actions/runs/3928786524</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">npm/ignore-walk</code>: <a href=\"https://github.com/npm/ignore-walk/actions/runs/3928775936\">https://github.com/npm/ignore-walk/actions/runs/3928775936</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">fs-minipass</code>: <a href=\"https://github.com/npm/fs-minipass/actions/runs/3984841403\">https://github.com/npm/fs-minipass/actions/runs/3984841403</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">minipass-fetch</code>: <a href=\"https://github.com/npm/minipass-fetch/actions/runs/4009475310/jobs/6884876964\">https://github.com/npm/minipass-fetch/actions/runs/4009475310/jobs/6884876964</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">make-fetch-happen</code>: <a href=\"https://github.com/npm/make-fetch-happen/actions/runs/3927650948/jobs/6714458250\">https://github.com/npm/make-fetch-happen/actions/runs/3927650948/jobs/6714458250</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">tap-nock</code>: <a href=\"https://github.com/npm/tap-nock/actions/runs/4126626699/jobs/7128805133\">https://github.com/npm/tap-nock/actions/runs/4126626699/jobs/7128805133</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">read-package-json</code>: <a href=\"https://github.com/npm/read-package-json/actions/runs/4126624250/jobs/7128799142\">https://github.com/npm/read-package-json/actions/runs/4126624250/jobs/7128799142</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">metavuln-calculator</code>: <a href=\"https://github.com/npm/metavuln-calculator/actions/runs/4126696910/jobs/7128958897\">https://github.com/npm/metavuln-calculator/actions/runs/4126696910/jobs/7128958897</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">normalize-package-data</code>: <a href=\"https://github.com/npm/normalize-package-data/actions/runs/4126748375/jobs/7129080000\">https://github.com/npm/normalize-package-data/actions/runs/4126748375/jobs/7129080000</a></li>\n</ul>",
            "url": "https://github.com/npm/statusboard/issues/631",
            "title": "Flaky tests",
            "date_modified": "2023-02-08T17:39:02.000Z",
            "date_published": "2023-01-18T18:14:22.000Z",
            "author": {
                "name": "lukekarrys",
                "url": "https://github.com/lukekarrys"
            }
        }
    ]
}